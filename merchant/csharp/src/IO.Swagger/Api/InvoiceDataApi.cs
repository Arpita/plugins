/* 
 * coinMerchant Api Documentation
 *
 * To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.
 *
 * OpenAPI spec version: 1.0B
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET ALL CANCELLED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Cancelled Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetCancInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL CANCELLED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Cancelled Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetCancInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL COMPLETED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Completed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetCompleteInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL COMPLETED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Completed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetCompleteInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL CONFIRMED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Confirmed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetConfInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL CONFIRMED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Confirmed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetConfInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET INVOICE FROM ID
        /// </summary>
        /// <remarks>
        /// Gets Details of an Invoice ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>SuccessInvoice</returns>
        SuccessInvoice GetInvoiceFromID (string invoiceID, string apikey);

        /// <summary>
        /// GET INVOICE FROM ID
        /// </summary>
        /// <remarks>
        /// Gets Details of an Invoice ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>ApiResponse of SuccessInvoice</returns>
        ApiResponse<SuccessInvoice> GetInvoiceFromIDWithHttpInfo (string invoiceID, string apikey);
        /// <summary>
        /// GET ALL PAID INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Paid Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetPaidInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL PAID INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Paid Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetPaidInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL REFUND INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Refund Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetRefundInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL REFUND INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Refund Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetRefundInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL UNPROCESSED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Unprocessed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        SuccessInvoices GetUnprocessedInvoices (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Unprocessed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        ApiResponse<SuccessInvoices> GetUnprocessedInvoicesWithHttpInfo (string apikey, InvoiceIDFull body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// GET ALL CANCELLED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Cancelled Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetCancInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL CANCELLED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Cancelled Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetCancInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL COMPLETED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Completed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetCompleteInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL COMPLETED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Completed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetCompleteInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL CONFIRMED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Confirmed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetConfInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL CONFIRMED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Confirmed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetConfInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET INVOICE FROM ID
        /// </summary>
        /// <remarks>
        /// Gets Details of an Invoice ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>Task of SuccessInvoice</returns>
        System.Threading.Tasks.Task<SuccessInvoice> GetInvoiceFromIDAsync (string invoiceID, string apikey);

        /// <summary>
        /// GET INVOICE FROM ID
        /// </summary>
        /// <remarks>
        /// Gets Details of an Invoice ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>Task of ApiResponse (SuccessInvoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoice>> GetInvoiceFromIDAsyncWithHttpInfo (string invoiceID, string apikey);
        /// <summary>
        /// GET ALL PAID INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Paid Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetPaidInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL PAID INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Paid Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetPaidInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL REFUND INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Refund Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetRefundInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL REFUND INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Refund Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetRefundInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        /// <summary>
        /// GET ALL UNPROCESSED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Unprocessed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        System.Threading.Tasks.Task<SuccessInvoices> GetUnprocessedInvoicesAsync (string apikey, InvoiceIDFull body);

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES
        /// </summary>
        /// <remarks>
        /// Gets All Unprocessed Invoice Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetUnprocessedInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoiceDataApi : IInvoiceDataApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoiceDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// GET ALL CANCELLED INVOICES Gets All Cancelled Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetCancInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetCancInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL CANCELLED INVOICES Gets All Cancelled Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetCancInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetCancInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetCancInvoices");

            var localVarPath = "/invoice/getCancInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetCancInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetCancInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL CANCELLED INVOICES Gets All Cancelled Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetCancInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetCancInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL CANCELLED INVOICES Gets All Cancelled Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetCancInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetCancInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetCancInvoices");

            var localVarPath = "/invoice/getCancInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetCancInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetCancInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL COMPLETED INVOICES Gets All Completed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetCompleteInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetCompleteInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL COMPLETED INVOICES Gets All Completed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetCompleteInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetCompleteInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetCompleteInvoices");

            var localVarPath = "/invoice/getCompleteInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetCompleteInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetCompleteInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL COMPLETED INVOICES Gets All Completed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetCompleteInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetCompleteInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL COMPLETED INVOICES Gets All Completed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetCompleteInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetCompleteInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetCompleteInvoices");

            var localVarPath = "/invoice/getCompleteInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetCompleteInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetCompleteInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL CONFIRMED INVOICES Gets All Confirmed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetConfInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetConfInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL CONFIRMED INVOICES Gets All Confirmed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetConfInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetConfInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetConfInvoices");

            var localVarPath = "/invoice/getConfInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetConfInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetConfInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL CONFIRMED INVOICES Gets All Confirmed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetConfInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetConfInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL CONFIRMED INVOICES Gets All Confirmed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetConfInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetConfInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetConfInvoices");

            var localVarPath = "/invoice/getConfInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetConfInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetConfInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET INVOICE FROM ID Gets Details of an Invoice ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>SuccessInvoice</returns>
        public SuccessInvoice GetInvoiceFromID (string invoiceID, string apikey)
        {
             ApiResponse<SuccessInvoice> localVarResponse = GetInvoiceFromIDWithHttpInfo(invoiceID, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET INVOICE FROM ID Gets Details of an Invoice ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>ApiResponse of SuccessInvoice</returns>
        public ApiResponse< SuccessInvoice > GetInvoiceFromIDWithHttpInfo (string invoiceID, string apikey)
        {
            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceID' when calling InvoiceDataApi->GetInvoiceFromID");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetInvoiceFromID");

            var localVarPath = "/invoice/getInvoiceFromID/{invoiceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invoiceID != null) localVarPathParams.Add("invoiceID", Configuration.ApiClient.ParameterToString(invoiceID)); // path parameter
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetInvoiceFromID: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetInvoiceFromID: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoice)));
            
        }

        /// <summary>
        /// GET INVOICE FROM ID Gets Details of an Invoice ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>Task of SuccessInvoice</returns>
        public async System.Threading.Tasks.Task<SuccessInvoice> GetInvoiceFromIDAsync (string invoiceID, string apikey)
        {
             ApiResponse<SuccessInvoice> localVarResponse = await GetInvoiceFromIDAsyncWithHttpInfo(invoiceID, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET INVOICE FROM ID Gets Details of an Invoice ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceID"></param>
        /// <param name="apikey">Enter User Key</param>
        /// <returns>Task of ApiResponse (SuccessInvoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoice>> GetInvoiceFromIDAsyncWithHttpInfo (string invoiceID, string apikey)
        {
            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceID' when calling InvoiceDataApi->GetInvoiceFromID");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetInvoiceFromID");

            var localVarPath = "/invoice/getInvoiceFromID/{invoiceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invoiceID != null) localVarPathParams.Add("invoiceID", Configuration.ApiClient.ParameterToString(invoiceID)); // path parameter
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetInvoiceFromID: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetInvoiceFromID: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoice)));
            
        }

        /// <summary>
        /// GET ALL PAID INVOICES Gets All Paid Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetPaidInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetPaidInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL PAID INVOICES Gets All Paid Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetPaidInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetPaidInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetPaidInvoices");

            var localVarPath = "/invoice/getPaidInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetPaidInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetPaidInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL PAID INVOICES Gets All Paid Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetPaidInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetPaidInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL PAID INVOICES Gets All Paid Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetPaidInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetPaidInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetPaidInvoices");

            var localVarPath = "/invoice/getPaidInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetPaidInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetPaidInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL REFUND INVOICES Gets All Refund Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetRefundInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetRefundInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL REFUND INVOICES Gets All Refund Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetRefundInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetRefundInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetRefundInvoices");

            var localVarPath = "/invoice/getRefundInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetRefundInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetRefundInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL REFUND INVOICES Gets All Refund Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetRefundInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetRefundInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL REFUND INVOICES Gets All Refund Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetRefundInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetRefundInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetRefundInvoices");

            var localVarPath = "/invoice/getRefundInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetRefundInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetRefundInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES Gets All Unprocessed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>SuccessInvoices</returns>
        public SuccessInvoices GetUnprocessedInvoices (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = GetUnprocessedInvoicesWithHttpInfo(apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES Gets All Unprocessed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>ApiResponse of SuccessInvoices</returns>
        public ApiResponse< SuccessInvoices > GetUnprocessedInvoicesWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetUnprocessedInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetUnprocessedInvoices");

            var localVarPath = "/invoice/getUnprocessedInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetUnprocessedInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetUnprocessedInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES Gets All Unprocessed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of SuccessInvoices</returns>
        public async System.Threading.Tasks.Task<SuccessInvoices> GetUnprocessedInvoicesAsync (string apikey, InvoiceIDFull body)
        {
             ApiResponse<SuccessInvoices> localVarResponse = await GetUnprocessedInvoicesAsyncWithHttpInfo(apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GET ALL UNPROCESSED INVOICES Gets All Unprocessed Invoice Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Enter User Key</param>
        /// <param name="body">Enter details to query Invoices</param>
        /// <returns>Task of ApiResponse (SuccessInvoices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessInvoices>> GetUnprocessedInvoicesAsyncWithHttpInfo (string apikey, InvoiceIDFull body)
        {
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling InvoiceDataApi->GetUnprocessedInvoices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceDataApi->GetUnprocessedInvoices");

            var localVarPath = "/invoice/getUnprocessedInvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apikey != null) localVarHeaderParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling GetUnprocessedInvoices: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling GetUnprocessedInvoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessInvoices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessInvoices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessInvoices)));
            
        }

    }
}
