/* 
 * coinMerchant Api Documentation
 *
 * To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.
 *
 * OpenAPI spec version: 1.0B
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewInvoice
    /// </summary>
    [DataContract]
    public partial class NewInvoice :  IEquatable<NewInvoice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInvoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewInvoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInvoice" /> class.
        /// </summary>
        /// <param name="OrderID">OrderID (required).</param>
        /// <param name="Fiat">Fiat (required).</param>
        /// <param name="SuccURL">SuccURL (required).</param>
        /// <param name="CancelURL">CancelURL (required).</param>
        /// <param name="BuyerEmail">BuyerEmail (required).</param>
        /// <param name="NotifyEmail">NotifyEmail (required).</param>
        /// <param name="Info">Info (required).</param>
        public NewInvoice(string OrderID = null, long? Fiat = null, string SuccURL = null, string CancelURL = null, string BuyerEmail = null, string NotifyEmail = null, string Info = null)
        {
            // to ensure "OrderID" is required (not null)
            if (OrderID == null)
            {
                throw new InvalidDataException("OrderID is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.OrderID = OrderID;
            }
            // to ensure "Fiat" is required (not null)
            if (Fiat == null)
            {
                throw new InvalidDataException("Fiat is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.Fiat = Fiat;
            }
            // to ensure "SuccURL" is required (not null)
            if (SuccURL == null)
            {
                throw new InvalidDataException("SuccURL is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.SuccURL = SuccURL;
            }
            // to ensure "CancelURL" is required (not null)
            if (CancelURL == null)
            {
                throw new InvalidDataException("CancelURL is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.CancelURL = CancelURL;
            }
            // to ensure "BuyerEmail" is required (not null)
            if (BuyerEmail == null)
            {
                throw new InvalidDataException("BuyerEmail is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.BuyerEmail = BuyerEmail;
            }
            // to ensure "NotifyEmail" is required (not null)
            if (NotifyEmail == null)
            {
                throw new InvalidDataException("NotifyEmail is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.NotifyEmail = NotifyEmail;
            }
            // to ensure "Info" is required (not null)
            if (Info == null)
            {
                throw new InvalidDataException("Info is a required property for NewInvoice and cannot be null");
            }
            else
            {
                this.Info = Info;
            }
        }
        
        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public string OrderID { get; set; }
        /// <summary>
        /// Gets or Sets Fiat
        /// </summary>
        [DataMember(Name="fiat", EmitDefaultValue=false)]
        public long? Fiat { get; set; }
        /// <summary>
        /// Gets or Sets SuccURL
        /// </summary>
        [DataMember(Name="succURL", EmitDefaultValue=false)]
        public string SuccURL { get; set; }
        /// <summary>
        /// Gets or Sets CancelURL
        /// </summary>
        [DataMember(Name="cancelURL", EmitDefaultValue=false)]
        public string CancelURL { get; set; }
        /// <summary>
        /// Gets or Sets BuyerEmail
        /// </summary>
        [DataMember(Name="buyerEmail", EmitDefaultValue=false)]
        public string BuyerEmail { get; set; }
        /// <summary>
        /// Gets or Sets NotifyEmail
        /// </summary>
        [DataMember(Name="notifyEmail", EmitDefaultValue=false)]
        public string NotifyEmail { get; set; }
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewInvoice {\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  Fiat: ").Append(Fiat).Append("\n");
            sb.Append("  SuccURL: ").Append(SuccURL).Append("\n");
            sb.Append("  CancelURL: ").Append(CancelURL).Append("\n");
            sb.Append("  BuyerEmail: ").Append(BuyerEmail).Append("\n");
            sb.Append("  NotifyEmail: ").Append(NotifyEmail).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NewInvoice);
        }

        /// <summary>
        /// Returns true if NewInvoice instances are equal
        /// </summary>
        /// <param name="other">Instance of NewInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewInvoice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderID == other.OrderID ||
                    this.OrderID != null &&
                    this.OrderID.Equals(other.OrderID)
                ) && 
                (
                    this.Fiat == other.Fiat ||
                    this.Fiat != null &&
                    this.Fiat.Equals(other.Fiat)
                ) && 
                (
                    this.SuccURL == other.SuccURL ||
                    this.SuccURL != null &&
                    this.SuccURL.Equals(other.SuccURL)
                ) && 
                (
                    this.CancelURL == other.CancelURL ||
                    this.CancelURL != null &&
                    this.CancelURL.Equals(other.CancelURL)
                ) && 
                (
                    this.BuyerEmail == other.BuyerEmail ||
                    this.BuyerEmail != null &&
                    this.BuyerEmail.Equals(other.BuyerEmail)
                ) && 
                (
                    this.NotifyEmail == other.NotifyEmail ||
                    this.NotifyEmail != null &&
                    this.NotifyEmail.Equals(other.NotifyEmail)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderID != null)
                    hash = hash * 59 + this.OrderID.GetHashCode();
                if (this.Fiat != null)
                    hash = hash * 59 + this.Fiat.GetHashCode();
                if (this.SuccURL != null)
                    hash = hash * 59 + this.SuccURL.GetHashCode();
                if (this.CancelURL != null)
                    hash = hash * 59 + this.CancelURL.GetHashCode();
                if (this.BuyerEmail != null)
                    hash = hash * 59 + this.BuyerEmail.GetHashCode();
                if (this.NotifyEmail != null)
                    hash = hash * 59 + this.NotifyEmail.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                return hash;
            }
        }
    }

}
