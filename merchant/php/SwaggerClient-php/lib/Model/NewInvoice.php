<?php
/**
 * NewInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * coinMerchant Api Documentation
 *
 * To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.
 *
 * OpenAPI spec version: 1.0B
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NewInvoice Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewInvoice implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NewInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'order_id' => 'string',
        'fiat' => 'int',
        'succ_url' => 'string',
        'cancel_url' => 'string',
        'buyer_email' => 'string',
        'notify_email' => 'string',
        'info' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'order_id' => 'orderID',
        'fiat' => 'fiat',
        'succ_url' => 'succURL',
        'cancel_url' => 'cancelURL',
        'buyer_email' => 'buyerEmail',
        'notify_email' => 'notifyEmail',
        'info' => 'info'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'order_id' => 'setOrderId',
        'fiat' => 'setFiat',
        'succ_url' => 'setSuccUrl',
        'cancel_url' => 'setCancelUrl',
        'buyer_email' => 'setBuyerEmail',
        'notify_email' => 'setNotifyEmail',
        'info' => 'setInfo'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'order_id' => 'getOrderId',
        'fiat' => 'getFiat',
        'succ_url' => 'getSuccUrl',
        'cancel_url' => 'getCancelUrl',
        'buyer_email' => 'getBuyerEmail',
        'notify_email' => 'getNotifyEmail',
        'info' => 'getInfo'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['fiat'] = isset($data['fiat']) ? $data['fiat'] : null;
        $this->container['succ_url'] = isset($data['succ_url']) ? $data['succ_url'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['buyer_email'] = isset($data['buyer_email']) ? $data['buyer_email'] : null;
        $this->container['notify_email'] = isset($data['notify_email']) ? $data['notify_email'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['order_id'] === null) {
            $invalid_properties[] = "'order_id' can't be null";
        }
        if ($this->container['fiat'] === null) {
            $invalid_properties[] = "'fiat' can't be null";
        }
        if ($this->container['succ_url'] === null) {
            $invalid_properties[] = "'succ_url' can't be null";
        }
        if ($this->container['cancel_url'] === null) {
            $invalid_properties[] = "'cancel_url' can't be null";
        }
        if ($this->container['buyer_email'] === null) {
            $invalid_properties[] = "'buyer_email' can't be null";
        }
        if ($this->container['notify_email'] === null) {
            $invalid_properties[] = "'notify_email' can't be null";
        }
        if ($this->container['info'] === null) {
            $invalid_properties[] = "'info' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['order_id'] === null) {
            return false;
        }
        if ($this->container['fiat'] === null) {
            return false;
        }
        if ($this->container['succ_url'] === null) {
            return false;
        }
        if ($this->container['cancel_url'] === null) {
            return false;
        }
        if ($this->container['buyer_email'] === null) {
            return false;
        }
        if ($this->container['notify_email'] === null) {
            return false;
        }
        if ($this->container['info'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_id
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     * @param string $order_id
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets fiat
     * @return int
     */
    public function getFiat()
    {
        return $this->container['fiat'];
    }

    /**
     * Sets fiat
     * @param int $fiat
     * @return $this
     */
    public function setFiat($fiat)
    {
        $this->container['fiat'] = $fiat;

        return $this;
    }

    /**
     * Gets succ_url
     * @return string
     */
    public function getSuccUrl()
    {
        return $this->container['succ_url'];
    }

    /**
     * Sets succ_url
     * @param string $succ_url
     * @return $this
     */
    public function setSuccUrl($succ_url)
    {
        $this->container['succ_url'] = $succ_url;

        return $this;
    }

    /**
     * Gets cancel_url
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     * @param string $cancel_url
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets buyer_email
     * @return string
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     * @param string $buyer_email
     * @return $this
     */
    public function setBuyerEmail($buyer_email)
    {
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets notify_email
     * @return string
     */
    public function getNotifyEmail()
    {
        return $this->container['notify_email'];
    }

    /**
     * Sets notify_email
     * @param string $notify_email
     * @return $this
     */
    public function setNotifyEmail($notify_email)
    {
        $this->container['notify_email'] = $notify_email;

        return $this;
    }

    /**
     * Gets info
     * @return string
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     * @param string $info
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
