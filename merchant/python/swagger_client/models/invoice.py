# coding: utf-8

"""
    coinMerchant Api Documentation

    To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.

    OpenAPI spec version: 1.0B
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Invoice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Invoice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'buyer_email': 'str',
            'cancel_url': 'str',
            'expire_time': 'str',
            'succ_url': 'str',
            'invoice_id': 'str',
            'bitpay_invoice_id': 'str',
            'notify_email': 'str',
            'status': 'str',
            'time': 'str',
            'fiat_cents': 'str',
            'satoshis': 'str',
            'info': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'buyer_email': 'buyerEmail',
            'cancel_url': 'cancelURL',
            'expire_time': 'expireTime',
            'succ_url': 'succURL',
            'invoice_id': 'invoiceID',
            'bitpay_invoice_id': 'bitpayInvoiceID',
            'notify_email': 'notifyEmail',
            'status': 'status',
            'time': 'time',
            'fiat_cents': 'fiatCents',
            'satoshis': 'satoshis',
            'info': 'info'
        }

        self._address = None
        self._buyer_email = None
        self._cancel_url = None
        self._expire_time = None
        self._succ_url = None
        self._invoice_id = None
        self._bitpay_invoice_id = None
        self._notify_email = None
        self._status = None
        self._time = None
        self._fiat_cents = None
        self._satoshis = None
        self._info = None

    @property
    def address(self):
        """
        Gets the address of this Invoice.


        :return: The address of this Invoice.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Invoice.


        :param address: The address of this Invoice.
        :type: str
        """
        
        self._address = address

    @property
    def buyer_email(self):
        """
        Gets the buyer_email of this Invoice.


        :return: The buyer_email of this Invoice.
        :rtype: str
        """
        return self._buyer_email

    @buyer_email.setter
    def buyer_email(self, buyer_email):
        """
        Sets the buyer_email of this Invoice.


        :param buyer_email: The buyer_email of this Invoice.
        :type: str
        """
        
        self._buyer_email = buyer_email

    @property
    def cancel_url(self):
        """
        Gets the cancel_url of this Invoice.


        :return: The cancel_url of this Invoice.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """
        Sets the cancel_url of this Invoice.


        :param cancel_url: The cancel_url of this Invoice.
        :type: str
        """
        
        self._cancel_url = cancel_url

    @property
    def expire_time(self):
        """
        Gets the expire_time of this Invoice.


        :return: The expire_time of this Invoice.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """
        Sets the expire_time of this Invoice.


        :param expire_time: The expire_time of this Invoice.
        :type: str
        """
        
        self._expire_time = expire_time

    @property
    def succ_url(self):
        """
        Gets the succ_url of this Invoice.


        :return: The succ_url of this Invoice.
        :rtype: str
        """
        return self._succ_url

    @succ_url.setter
    def succ_url(self, succ_url):
        """
        Sets the succ_url of this Invoice.


        :param succ_url: The succ_url of this Invoice.
        :type: str
        """
        
        self._succ_url = succ_url

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this Invoice.


        :return: The invoice_id of this Invoice.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this Invoice.


        :param invoice_id: The invoice_id of this Invoice.
        :type: str
        """
        
        self._invoice_id = invoice_id

    @property
    def bitpay_invoice_id(self):
        """
        Gets the bitpay_invoice_id of this Invoice.


        :return: The bitpay_invoice_id of this Invoice.
        :rtype: str
        """
        return self._bitpay_invoice_id

    @bitpay_invoice_id.setter
    def bitpay_invoice_id(self, bitpay_invoice_id):
        """
        Sets the bitpay_invoice_id of this Invoice.


        :param bitpay_invoice_id: The bitpay_invoice_id of this Invoice.
        :type: str
        """
        
        self._bitpay_invoice_id = bitpay_invoice_id

    @property
    def notify_email(self):
        """
        Gets the notify_email of this Invoice.


        :return: The notify_email of this Invoice.
        :rtype: str
        """
        return self._notify_email

    @notify_email.setter
    def notify_email(self, notify_email):
        """
        Sets the notify_email of this Invoice.


        :param notify_email: The notify_email of this Invoice.
        :type: str
        """
        
        self._notify_email = notify_email

    @property
    def status(self):
        """
        Gets the status of this Invoice.


        :return: The status of this Invoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Invoice.


        :param status: The status of this Invoice.
        :type: str
        """
        
        self._status = status

    @property
    def time(self):
        """
        Gets the time of this Invoice.


        :return: The time of this Invoice.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this Invoice.


        :param time: The time of this Invoice.
        :type: str
        """
        
        self._time = time

    @property
    def fiat_cents(self):
        """
        Gets the fiat_cents of this Invoice.


        :return: The fiat_cents of this Invoice.
        :rtype: str
        """
        return self._fiat_cents

    @fiat_cents.setter
    def fiat_cents(self, fiat_cents):
        """
        Sets the fiat_cents of this Invoice.


        :param fiat_cents: The fiat_cents of this Invoice.
        :type: str
        """
        
        self._fiat_cents = fiat_cents

    @property
    def satoshis(self):
        """
        Gets the satoshis of this Invoice.


        :return: The satoshis of this Invoice.
        :rtype: str
        """
        return self._satoshis

    @satoshis.setter
    def satoshis(self, satoshis):
        """
        Sets the satoshis of this Invoice.


        :param satoshis: The satoshis of this Invoice.
        :type: str
        """
        
        self._satoshis = satoshis

    @property
    def info(self):
        """
        Gets the info of this Invoice.


        :return: The info of this Invoice.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this Invoice.


        :param info: The info of this Invoice.
        :type: str
        """
        
        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

