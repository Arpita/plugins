# coding: utf-8

"""
    coinMerchant Api Documentation

    To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.

    OpenAPI spec version: 1.0B
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NewInvoice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NewInvoice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order_id': 'str',
            'fiat': 'int',
            'succ_url': 'str',
            'cancel_url': 'str',
            'buyer_email': 'str',
            'notify_email': 'str',
            'info': 'str'
        }

        self.attribute_map = {
            'order_id': 'orderID',
            'fiat': 'fiat',
            'succ_url': 'succURL',
            'cancel_url': 'cancelURL',
            'buyer_email': 'buyerEmail',
            'notify_email': 'notifyEmail',
            'info': 'info'
        }

        self._order_id = None
        self._fiat = None
        self._succ_url = None
        self._cancel_url = None
        self._buyer_email = None
        self._notify_email = None
        self._info = None

    @property
    def order_id(self):
        """
        Gets the order_id of this NewInvoice.


        :return: The order_id of this NewInvoice.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this NewInvoice.


        :param order_id: The order_id of this NewInvoice.
        :type: str
        """
        
        self._order_id = order_id

    @property
    def fiat(self):
        """
        Gets the fiat of this NewInvoice.


        :return: The fiat of this NewInvoice.
        :rtype: int
        """
        return self._fiat

    @fiat.setter
    def fiat(self, fiat):
        """
        Sets the fiat of this NewInvoice.


        :param fiat: The fiat of this NewInvoice.
        :type: int
        """
        
        self._fiat = fiat

    @property
    def succ_url(self):
        """
        Gets the succ_url of this NewInvoice.


        :return: The succ_url of this NewInvoice.
        :rtype: str
        """
        return self._succ_url

    @succ_url.setter
    def succ_url(self, succ_url):
        """
        Sets the succ_url of this NewInvoice.


        :param succ_url: The succ_url of this NewInvoice.
        :type: str
        """
        
        self._succ_url = succ_url

    @property
    def cancel_url(self):
        """
        Gets the cancel_url of this NewInvoice.


        :return: The cancel_url of this NewInvoice.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """
        Sets the cancel_url of this NewInvoice.


        :param cancel_url: The cancel_url of this NewInvoice.
        :type: str
        """
        
        self._cancel_url = cancel_url

    @property
    def buyer_email(self):
        """
        Gets the buyer_email of this NewInvoice.


        :return: The buyer_email of this NewInvoice.
        :rtype: str
        """
        return self._buyer_email

    @buyer_email.setter
    def buyer_email(self, buyer_email):
        """
        Sets the buyer_email of this NewInvoice.


        :param buyer_email: The buyer_email of this NewInvoice.
        :type: str
        """
        
        self._buyer_email = buyer_email

    @property
    def notify_email(self):
        """
        Gets the notify_email of this NewInvoice.


        :return: The notify_email of this NewInvoice.
        :rtype: str
        """
        return self._notify_email

    @notify_email.setter
    def notify_email(self, notify_email):
        """
        Sets the notify_email of this NewInvoice.


        :param notify_email: The notify_email of this NewInvoice.
        :type: str
        """
        
        self._notify_email = notify_email

    @property
    def info(self):
        """
        Gets the info of this NewInvoice.


        :return: The info of this NewInvoice.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this NewInvoice.


        :param info: The info of this NewInvoice.
        :type: str
        """
        
        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

