/* 
 * coinMerchant Api Documentation
 *
 * To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.
 *
 * OpenAPI spec version: 1.0B
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type InvoiceActionsApi struct {
	Configuration Configuration
}

func NewInvoiceActionsApi() *InvoiceActionsApi {
	configuration := NewConfiguration()
	return &InvoiceActionsApi{
		Configuration: *configuration,
	}
}

func NewInvoiceActionsApiWithBasePath(basePath string) *InvoiceActionsApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &InvoiceActionsApi{
		Configuration: *configuration,
	}
}

/**
 * NEW INVOICE
 * Allows user to create a new Invoice.
 *
 * @param apikey Enter User Key
 * @param body Enter details to create an Invoice
 * @return *SuccessInvoice
 */
func (a InvoiceActionsApi) CreateNewInvoice(apikey string, body NewInvoice) (*SuccessInvoice, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/createNewInvoice"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoice), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceActionsApi->CreateNewInvoice")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoice), nil, errors.New("Missing required parameter 'body' when calling InvoiceActionsApi->CreateNewInvoice")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoice)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * 
 *
 * @param invoiceID 
 * @return *ActionAnyContent
 */
func (a InvoiceActionsApi) LoadInvoice(invoiceID string) (*ActionAnyContent, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/{invoiceID}"
	path = strings.Replace(path, "{"+"invoiceID"+"}", fmt.Sprintf("%v", invoiceID), -1)

	// verify the required parameter 'invoiceID' is set
	if &invoiceID == nil {
		return new(ActionAnyContent), nil, errors.New("Missing required parameter 'invoiceID' when calling InvoiceActionsApi->LoadInvoice")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(ActionAnyContent)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

