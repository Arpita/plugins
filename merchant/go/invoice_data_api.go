/* 
 * coinMerchant Api Documentation
 *
 * To generate an API key, please visit <a href='https://pay.coinsecure.in/payment-tools/api' target='_new' class='homeapi'>https://pay.coinsecure.in/payment-tools/api</a>.<br>Guidelines for use can be accessed at <a href='https://pay.coinsecure.in/api/guidelines'>https://pay.coinsecure.in/api/guidelines</a>.
 *
 * OpenAPI spec version: 1.0B
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type InvoiceDataApi struct {
	Configuration Configuration
}

func NewInvoiceDataApi() *InvoiceDataApi {
	configuration := NewConfiguration()
	return &InvoiceDataApi{
		Configuration: *configuration,
	}
}

func NewInvoiceDataApiWithBasePath(basePath string) *InvoiceDataApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &InvoiceDataApi{
		Configuration: *configuration,
	}
}

/**
 * GET ALL CANCELLED INVOICES
 * Gets All Cancelled Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetCancInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getCancInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetCancInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetCancInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET ALL COMPLETED INVOICES
 * Gets All Completed Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetCompleteInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getCompleteInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetCompleteInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetCompleteInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET ALL CONFIRMED INVOICES
 * Gets All Confirmed Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetConfInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getConfInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetConfInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetConfInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET INVOICE FROM ID
 * Gets Details of an Invoice ID.
 *
 * @param invoiceID 
 * @param apikey Enter User Key
 * @return *SuccessInvoice
 */
func (a InvoiceDataApi) GetInvoiceFromID(invoiceID string, apikey string) (*SuccessInvoice, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getInvoiceFromID/{invoiceID}"
	path = strings.Replace(path, "{"+"invoiceID"+"}", fmt.Sprintf("%v", invoiceID), -1)

	// verify the required parameter 'invoiceID' is set
	if &invoiceID == nil {
		return new(SuccessInvoice), nil, errors.New("Missing required parameter 'invoiceID' when calling InvoiceDataApi->GetInvoiceFromID")
	}
	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoice), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetInvoiceFromID")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	var successPayload = new(SuccessInvoice)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET ALL PAID INVOICES
 * Gets All Paid Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetPaidInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getPaidInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetPaidInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetPaidInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET ALL REFUND INVOICES
 * Gets All Refund Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetRefundInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getRefundInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetRefundInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetRefundInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * GET ALL UNPROCESSED INVOICES
 * Gets All Unprocessed Invoice Details.
 *
 * @param apikey Enter User Key
 * @param body Enter details to query Invoices
 * @return *SuccessInvoices
 */
func (a InvoiceDataApi) GetUnprocessedInvoices(apikey string, body InvoiceIdFull) (*SuccessInvoices, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/invoice/getUnprocessedInvoices"

	// verify the required parameter 'apikey' is set
	if &apikey == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'apikey' when calling InvoiceDataApi->GetUnprocessedInvoices")
	}
	// verify the required parameter 'body' is set
	if &body == nil {
		return new(SuccessInvoices), nil, errors.New("Missing required parameter 'body' when calling InvoiceDataApi->GetUnprocessedInvoices")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
			}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "apikey"
	headerParams["apikey"] = apikey

	// body params
	postBody = &body

	var successPayload = new(SuccessInvoices)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

