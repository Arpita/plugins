/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.FailResult
import io.swagger.client.model.SuccessCancelDataResponse
import io.swagger.client.model.SuccessOrderDataResponse
import io.swagger.client.model.RateVolData
import io.swagger.client.model.MinFiat
import io.swagger.client.model.MaxVol
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class ExchangeTradeActionsApi(val defBasePath: String = "https://api.coinsecure.in/",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Cancel Open Sell Order
   * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
   * @param orderID  
   * @param authorization Enter a valid Api Key. (optional)
   * @return SuccessCancelDataResponse
   */
  def v1UserExchangeAskCancelOrderID(orderID: String, authorization: Option[String] = None): Option[SuccessCancelDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/ask/cancel/{orderID}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (orderID == null) throw new Exception("Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->v1UserExchangeAskCancelOrderID")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessCancelDataResponse]).asInstanceOf[SuccessCancelDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * BTC Sell Order
   * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
   * @param body Please send the form with valid inputs. 
   * @param authorization Enter a valid Api Key. (optional)
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return SuccessOrderDataResponse
   */
  def v1UserExchangeAskNew(body: RateVolData, authorization: Option[String] = None, accept: Option[String] = None): Option[SuccessOrderDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/ask/new".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ExchangeTradeActionsApi->v1UserExchangeAskNew")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessOrderDataResponse]).asInstanceOf[SuccessOrderDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Cancel Open Buy Order
   * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
   * @param orderID  
   * @param authorization Enter a valid Api Key. (optional)
   * @return SuccessCancelDataResponse
   */
  def v1UserExchangeBidCancelOrderID(orderID: String, authorization: Option[String] = None): Option[SuccessCancelDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/bid/cancel/{orderID}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "orderID" + "\\}",apiInvoker.escape(orderID))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (orderID == null) throw new Exception("Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->v1UserExchangeBidCancelOrderID")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessCancelDataResponse]).asInstanceOf[SuccessCancelDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * BTC Buy Order
   * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
   * @param body Please send the form with valid inputs. 
   * @param authorization Enter a valid Api Key. (optional)
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return SuccessOrderDataResponse
   */
  def v1UserExchangeBidNew(body: RateVolData, authorization: Option[String] = None, accept: Option[String] = None): Option[SuccessOrderDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/bid/new".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ExchangeTradeActionsApi->v1UserExchangeBidNew")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessOrderDataResponse]).asInstanceOf[SuccessOrderDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Instantly Buy BTC
   * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
   * @param body Please send the form with valid inputs. 
   * @param authorization Enter a valid Api Key. (optional)
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return SuccessOrderDataResponse
   */
  def v1UserExchangeInstantBuy(body: MinFiat, authorization: Option[String] = None, accept: Option[String] = None): Option[SuccessOrderDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/instant/buy".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ExchangeTradeActionsApi->v1UserExchangeInstantBuy")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessOrderDataResponse]).asInstanceOf[SuccessOrderDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Instantly Sell BTC
   * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
   * @param body Please send the form with valid inputs. 
   * @param authorization Enter a valid Api Key. (optional)
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return SuccessOrderDataResponse
   */
  def v1UserExchangeInstantSell(body: MaxVol, authorization: Option[String] = None, accept: Option[String] = None): Option[SuccessOrderDataResponse] = {
    // create path and map variables
    val path = "/v1/user/exchange/instant/sell".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling ExchangeTradeActionsApi->v1UserExchangeInstantSell")

    
    authorization.map(paramVal => headerParams += "Authorization" -> paramVal)
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[SuccessOrderDataResponse]).asInstanceOf[SuccessOrderDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
