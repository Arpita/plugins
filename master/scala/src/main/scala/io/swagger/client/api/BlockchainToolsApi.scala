/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.FailResult
import io.swagger.client.model.ValidAddressSearchDataResponse
import io.swagger.client.model.ConfirmDataResponse
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class BlockchainToolsApi(val defBasePath: String = "https://api.coinsecure.in/",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Search Bitcoin Blockchain
   * Searches for a Bitcoin Address, Netki Wallet Name or Transaction ID.
   * @param any  
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return ValidAddressSearchDataResponse
   */
  def v1BitcoinSearchAddress(any: String, accept: Option[String] = None): Option[ValidAddressSearchDataResponse] = {
    // create path and map variables
    val path = "/v1/bitcoin/search/{any}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "any" + "\\}",apiInvoker.escape(any))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (any == null) throw new Exception("Missing required parameter 'any' when calling BlockchainToolsApi->v1BitcoinSearchAddress")

    
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[ValidAddressSearchDataResponse]).asInstanceOf[ValidAddressSearchDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get Confirmations
   * Searches for a Number of Confirmations on a transaction ID.
   * @param txid  
   * @param accept JSON, XML or CSV can be returned (Optional) (optional)
   * @return ConfirmDataResponse
   */
  def v1BitcoinSearchTxid(txid: String, accept: Option[String] = None): Option[ConfirmDataResponse] = {
    // create path and map variables
    val path = "/v1/bitcoin/search/confirmation/{txid}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "txid" + "\\}",apiInvoker.escape(txid))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (txid == null) throw new Exception("Missing required parameter 'txid' when calling BlockchainToolsApi->v1BitcoinSearchTxid")

    
    accept.map(paramVal => headerParams += "accept" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[ConfirmDataResponse]).asInstanceOf[ConfirmDataResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
