/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WalletSummaryData
    /// </summary>
    [DataContract]
    public partial class WalletSummaryData :  IEquatable<WalletSummaryData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletSummaryData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletSummaryData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletSummaryData" /> class.
        /// </summary>
        /// <param name="WalletConfirmedBalance">WalletConfirmedBalance (required).</param>
        /// <param name="WalletUncofirmedBalance">WalletUncofirmedBalance (required).</param>
        /// <param name="HasWalletNetki">HasWalletNetki (required) (default to false).</param>
        /// <param name="WalletNetki">WalletNetki (required).</param>
        /// <param name="WalletNetkiAddress">WalletNetkiAddress (required).</param>
        /// <param name="WalletNetkiWalletId">WalletNetkiWalletId (required).</param>
        public WalletSummaryData(long? WalletConfirmedBalance = null, long? WalletUncofirmedBalance = null, bool? HasWalletNetki = null, string WalletNetki = null, string WalletNetkiAddress = null, string WalletNetkiWalletId = null)
        {
            // to ensure "WalletConfirmedBalance" is required (not null)
            if (WalletConfirmedBalance == null)
            {
                throw new InvalidDataException("WalletConfirmedBalance is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.WalletConfirmedBalance = WalletConfirmedBalance;
            }
            // to ensure "WalletUncofirmedBalance" is required (not null)
            if (WalletUncofirmedBalance == null)
            {
                throw new InvalidDataException("WalletUncofirmedBalance is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.WalletUncofirmedBalance = WalletUncofirmedBalance;
            }
            // to ensure "HasWalletNetki" is required (not null)
            if (HasWalletNetki == null)
            {
                throw new InvalidDataException("HasWalletNetki is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.HasWalletNetki = HasWalletNetki;
            }
            // to ensure "WalletNetki" is required (not null)
            if (WalletNetki == null)
            {
                throw new InvalidDataException("WalletNetki is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.WalletNetki = WalletNetki;
            }
            // to ensure "WalletNetkiAddress" is required (not null)
            if (WalletNetkiAddress == null)
            {
                throw new InvalidDataException("WalletNetkiAddress is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.WalletNetkiAddress = WalletNetkiAddress;
            }
            // to ensure "WalletNetkiWalletId" is required (not null)
            if (WalletNetkiWalletId == null)
            {
                throw new InvalidDataException("WalletNetkiWalletId is a required property for WalletSummaryData and cannot be null");
            }
            else
            {
                this.WalletNetkiWalletId = WalletNetkiWalletId;
            }
        }
        
        /// <summary>
        /// Gets or Sets WalletConfirmedBalance
        /// </summary>
        [DataMember(Name="walletConfirmedBalance", EmitDefaultValue=false)]
        public long? WalletConfirmedBalance { get; set; }
        /// <summary>
        /// Gets or Sets WalletUncofirmedBalance
        /// </summary>
        [DataMember(Name="walletUncofirmedBalance", EmitDefaultValue=false)]
        public long? WalletUncofirmedBalance { get; set; }
        /// <summary>
        /// Gets or Sets HasWalletNetki
        /// </summary>
        [DataMember(Name="hasWalletNetki", EmitDefaultValue=false)]
        public bool? HasWalletNetki { get; set; }
        /// <summary>
        /// Gets or Sets WalletNetki
        /// </summary>
        [DataMember(Name="walletNetki", EmitDefaultValue=false)]
        public string WalletNetki { get; set; }
        /// <summary>
        /// Gets or Sets WalletNetkiAddress
        /// </summary>
        [DataMember(Name="walletNetkiAddress", EmitDefaultValue=false)]
        public string WalletNetkiAddress { get; set; }
        /// <summary>
        /// Gets or Sets WalletNetkiWalletId
        /// </summary>
        [DataMember(Name="walletNetkiWalletId", EmitDefaultValue=false)]
        public string WalletNetkiWalletId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletSummaryData {\n");
            sb.Append("  WalletConfirmedBalance: ").Append(WalletConfirmedBalance).Append("\n");
            sb.Append("  WalletUncofirmedBalance: ").Append(WalletUncofirmedBalance).Append("\n");
            sb.Append("  HasWalletNetki: ").Append(HasWalletNetki).Append("\n");
            sb.Append("  WalletNetki: ").Append(WalletNetki).Append("\n");
            sb.Append("  WalletNetkiAddress: ").Append(WalletNetkiAddress).Append("\n");
            sb.Append("  WalletNetkiWalletId: ").Append(WalletNetkiWalletId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WalletSummaryData);
        }

        /// <summary>
        /// Returns true if WalletSummaryData instances are equal
        /// </summary>
        /// <param name="other">Instance of WalletSummaryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletSummaryData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WalletConfirmedBalance == other.WalletConfirmedBalance ||
                    this.WalletConfirmedBalance != null &&
                    this.WalletConfirmedBalance.Equals(other.WalletConfirmedBalance)
                ) && 
                (
                    this.WalletUncofirmedBalance == other.WalletUncofirmedBalance ||
                    this.WalletUncofirmedBalance != null &&
                    this.WalletUncofirmedBalance.Equals(other.WalletUncofirmedBalance)
                ) && 
                (
                    this.HasWalletNetki == other.HasWalletNetki ||
                    this.HasWalletNetki != null &&
                    this.HasWalletNetki.Equals(other.HasWalletNetki)
                ) && 
                (
                    this.WalletNetki == other.WalletNetki ||
                    this.WalletNetki != null &&
                    this.WalletNetki.Equals(other.WalletNetki)
                ) && 
                (
                    this.WalletNetkiAddress == other.WalletNetkiAddress ||
                    this.WalletNetkiAddress != null &&
                    this.WalletNetkiAddress.Equals(other.WalletNetkiAddress)
                ) && 
                (
                    this.WalletNetkiWalletId == other.WalletNetkiWalletId ||
                    this.WalletNetkiWalletId != null &&
                    this.WalletNetkiWalletId.Equals(other.WalletNetkiWalletId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WalletConfirmedBalance != null)
                    hash = hash * 59 + this.WalletConfirmedBalance.GetHashCode();
                if (this.WalletUncofirmedBalance != null)
                    hash = hash * 59 + this.WalletUncofirmedBalance.GetHashCode();
                if (this.HasWalletNetki != null)
                    hash = hash * 59 + this.HasWalletNetki.GetHashCode();
                if (this.WalletNetki != null)
                    hash = hash * 59 + this.WalletNetki.GetHashCode();
                if (this.WalletNetkiAddress != null)
                    hash = hash * 59 + this.WalletNetkiAddress.GetHashCode();
                if (this.WalletNetkiWalletId != null)
                    hash = hash * 59 + this.WalletNetkiWalletId.GetHashCode();
                return hash;
            }
        }
    }

}
