/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SuccessVerifySignupResponse
    /// </summary>
    [DataContract]
    public partial class SuccessVerifySignupResponse :  IEquatable<SuccessVerifySignupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccessVerifySignupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SuccessVerifySignupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccessVerifySignupResponse" /> class.
        /// </summary>
        /// <param name="Message">Message (required).</param>
        /// <param name="ValidTill">ValidTill (required).</param>
        /// <param name="LoginMessage">LoginMessage (required).</param>
        /// <param name="LoginToken">LoginToken (required).</param>
        public SuccessVerifySignupResponse(string Message = null, long? ValidTill = null, string LoginMessage = null, string LoginToken = null)
        {
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for SuccessVerifySignupResponse and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "ValidTill" is required (not null)
            if (ValidTill == null)
            {
                throw new InvalidDataException("ValidTill is a required property for SuccessVerifySignupResponse and cannot be null");
            }
            else
            {
                this.ValidTill = ValidTill;
            }
            // to ensure "LoginMessage" is required (not null)
            if (LoginMessage == null)
            {
                throw new InvalidDataException("LoginMessage is a required property for SuccessVerifySignupResponse and cannot be null");
            }
            else
            {
                this.LoginMessage = LoginMessage;
            }
            // to ensure "LoginToken" is required (not null)
            if (LoginToken == null)
            {
                throw new InvalidDataException("LoginToken is a required property for SuccessVerifySignupResponse and cannot be null");
            }
            else
            {
                this.LoginToken = LoginToken;
            }
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets ValidTill
        /// </summary>
        [DataMember(Name="validTill", EmitDefaultValue=false)]
        public long? ValidTill { get; set; }
        /// <summary>
        /// Gets or Sets LoginMessage
        /// </summary>
        [DataMember(Name="loginMessage", EmitDefaultValue=false)]
        public string LoginMessage { get; set; }
        /// <summary>
        /// Gets or Sets LoginToken
        /// </summary>
        [DataMember(Name="loginToken", EmitDefaultValue=false)]
        public string LoginToken { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuccessVerifySignupResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ValidTill: ").Append(ValidTill).Append("\n");
            sb.Append("  LoginMessage: ").Append(LoginMessage).Append("\n");
            sb.Append("  LoginToken: ").Append(LoginToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SuccessVerifySignupResponse);
        }

        /// <summary>
        /// Returns true if SuccessVerifySignupResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SuccessVerifySignupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuccessVerifySignupResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.ValidTill == other.ValidTill ||
                    this.ValidTill != null &&
                    this.ValidTill.Equals(other.ValidTill)
                ) && 
                (
                    this.LoginMessage == other.LoginMessage ||
                    this.LoginMessage != null &&
                    this.LoginMessage.Equals(other.LoginMessage)
                ) && 
                (
                    this.LoginToken == other.LoginToken ||
                    this.LoginToken != null &&
                    this.LoginToken.Equals(other.LoginToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.ValidTill != null)
                    hash = hash * 59 + this.ValidTill.GetHashCode();
                if (this.LoginMessage != null)
                    hash = hash * 59 + this.LoginMessage.GetHashCode();
                if (this.LoginToken != null)
                    hash = hash * 59 + this.LoginToken.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
