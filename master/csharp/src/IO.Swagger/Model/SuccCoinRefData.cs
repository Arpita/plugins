/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SuccCoinRefData
    /// </summary>
    [DataContract]
    public partial class SuccCoinRefData :  IEquatable<SuccCoinRefData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccCoinRefData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SuccCoinRefData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccCoinRefData" /> class.
        /// </summary>
        /// <param name="RefPercent">RefPercent (required).</param>
        /// <param name="Time">Time (required).</param>
        /// <param name="OrderID">OrderID (required).</param>
        /// <param name="RefID">RefID (required).</param>
        /// <param name="TradeID">TradeID (required).</param>
        /// <param name="NewUserIDMasked">NewUserIDMasked (required).</param>
        /// <param name="DepositID">DepositID (required).</param>
        /// <param name="AmtPaid">AmtPaid (required).</param>
        public SuccCoinRefData(double? RefPercent = null, long? Time = null, string OrderID = null, string RefID = null, string TradeID = null, string NewUserIDMasked = null, string DepositID = null, long? AmtPaid = null)
        {
            // to ensure "RefPercent" is required (not null)
            if (RefPercent == null)
            {
                throw new InvalidDataException("RefPercent is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.RefPercent = RefPercent;
            }
            // to ensure "Time" is required (not null)
            if (Time == null)
            {
                throw new InvalidDataException("Time is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.Time = Time;
            }
            // to ensure "OrderID" is required (not null)
            if (OrderID == null)
            {
                throw new InvalidDataException("OrderID is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.OrderID = OrderID;
            }
            // to ensure "RefID" is required (not null)
            if (RefID == null)
            {
                throw new InvalidDataException("RefID is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.RefID = RefID;
            }
            // to ensure "TradeID" is required (not null)
            if (TradeID == null)
            {
                throw new InvalidDataException("TradeID is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.TradeID = TradeID;
            }
            // to ensure "NewUserIDMasked" is required (not null)
            if (NewUserIDMasked == null)
            {
                throw new InvalidDataException("NewUserIDMasked is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.NewUserIDMasked = NewUserIDMasked;
            }
            // to ensure "DepositID" is required (not null)
            if (DepositID == null)
            {
                throw new InvalidDataException("DepositID is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.DepositID = DepositID;
            }
            // to ensure "AmtPaid" is required (not null)
            if (AmtPaid == null)
            {
                throw new InvalidDataException("AmtPaid is a required property for SuccCoinRefData and cannot be null");
            }
            else
            {
                this.AmtPaid = AmtPaid;
            }
        }
        
        /// <summary>
        /// Gets or Sets RefPercent
        /// </summary>
        [DataMember(Name="refPercent", EmitDefaultValue=false)]
        public double? RefPercent { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }
        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public string OrderID { get; set; }
        /// <summary>
        /// Gets or Sets RefID
        /// </summary>
        [DataMember(Name="refID", EmitDefaultValue=false)]
        public string RefID { get; set; }
        /// <summary>
        /// Gets or Sets TradeID
        /// </summary>
        [DataMember(Name="tradeID", EmitDefaultValue=false)]
        public string TradeID { get; set; }
        /// <summary>
        /// Gets or Sets NewUserIDMasked
        /// </summary>
        [DataMember(Name="newUserIDMasked", EmitDefaultValue=false)]
        public string NewUserIDMasked { get; set; }
        /// <summary>
        /// Gets or Sets DepositID
        /// </summary>
        [DataMember(Name="depositID", EmitDefaultValue=false)]
        public string DepositID { get; set; }
        /// <summary>
        /// Gets or Sets AmtPaid
        /// </summary>
        [DataMember(Name="amtPaid", EmitDefaultValue=false)]
        public long? AmtPaid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuccCoinRefData {\n");
            sb.Append("  RefPercent: ").Append(RefPercent).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  RefID: ").Append(RefID).Append("\n");
            sb.Append("  TradeID: ").Append(TradeID).Append("\n");
            sb.Append("  NewUserIDMasked: ").Append(NewUserIDMasked).Append("\n");
            sb.Append("  DepositID: ").Append(DepositID).Append("\n");
            sb.Append("  AmtPaid: ").Append(AmtPaid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SuccCoinRefData);
        }

        /// <summary>
        /// Returns true if SuccCoinRefData instances are equal
        /// </summary>
        /// <param name="other">Instance of SuccCoinRefData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuccCoinRefData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RefPercent == other.RefPercent ||
                    this.RefPercent != null &&
                    this.RefPercent.Equals(other.RefPercent)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.OrderID == other.OrderID ||
                    this.OrderID != null &&
                    this.OrderID.Equals(other.OrderID)
                ) && 
                (
                    this.RefID == other.RefID ||
                    this.RefID != null &&
                    this.RefID.Equals(other.RefID)
                ) && 
                (
                    this.TradeID == other.TradeID ||
                    this.TradeID != null &&
                    this.TradeID.Equals(other.TradeID)
                ) && 
                (
                    this.NewUserIDMasked == other.NewUserIDMasked ||
                    this.NewUserIDMasked != null &&
                    this.NewUserIDMasked.Equals(other.NewUserIDMasked)
                ) && 
                (
                    this.DepositID == other.DepositID ||
                    this.DepositID != null &&
                    this.DepositID.Equals(other.DepositID)
                ) && 
                (
                    this.AmtPaid == other.AmtPaid ||
                    this.AmtPaid != null &&
                    this.AmtPaid.Equals(other.AmtPaid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RefPercent != null)
                    hash = hash * 59 + this.RefPercent.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.OrderID != null)
                    hash = hash * 59 + this.OrderID.GetHashCode();
                if (this.RefID != null)
                    hash = hash * 59 + this.RefID.GetHashCode();
                if (this.TradeID != null)
                    hash = hash * 59 + this.TradeID.GetHashCode();
                if (this.NewUserIDMasked != null)
                    hash = hash * 59 + this.NewUserIDMasked.GetHashCode();
                if (this.DepositID != null)
                    hash = hash * 59 + this.DepositID.GetHashCode();
                if (this.AmtPaid != null)
                    hash = hash * 59 + this.AmtPaid.GetHashCode();
                return hash;
            }
        }
    }

}
