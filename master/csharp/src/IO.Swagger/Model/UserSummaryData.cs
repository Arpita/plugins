/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserSummaryData
    /// </summary>
    [DataContract]
    public partial class UserSummaryData :  IEquatable<UserSummaryData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSummaryData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSummaryData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSummaryData" /> class.
        /// </summary>
        /// <param name="KycStatus">KycStatus (required).</param>
        /// <param name="BankLinkStatus">BankLinkStatus (required).</param>
        /// <param name="TradeReady">TradeReady (required).</param>
        /// <param name="IsDisabledAccount">IsDisabledAccount (required) (default to false).</param>
        /// <param name="FaSecure">FaSecure (required).</param>
        /// <param name="HasPhone">HasPhone (required).</param>
        public UserSummaryData(string KycStatus = null, string BankLinkStatus = null, string TradeReady = null, bool? IsDisabledAccount = null, string FaSecure = null, string HasPhone = null)
        {
            // to ensure "KycStatus" is required (not null)
            if (KycStatus == null)
            {
                throw new InvalidDataException("KycStatus is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.KycStatus = KycStatus;
            }
            // to ensure "BankLinkStatus" is required (not null)
            if (BankLinkStatus == null)
            {
                throw new InvalidDataException("BankLinkStatus is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.BankLinkStatus = BankLinkStatus;
            }
            // to ensure "TradeReady" is required (not null)
            if (TradeReady == null)
            {
                throw new InvalidDataException("TradeReady is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.TradeReady = TradeReady;
            }
            // to ensure "IsDisabledAccount" is required (not null)
            if (IsDisabledAccount == null)
            {
                throw new InvalidDataException("IsDisabledAccount is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.IsDisabledAccount = IsDisabledAccount;
            }
            // to ensure "FaSecure" is required (not null)
            if (FaSecure == null)
            {
                throw new InvalidDataException("FaSecure is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.FaSecure = FaSecure;
            }
            // to ensure "HasPhone" is required (not null)
            if (HasPhone == null)
            {
                throw new InvalidDataException("HasPhone is a required property for UserSummaryData and cannot be null");
            }
            else
            {
                this.HasPhone = HasPhone;
            }
        }
        
        /// <summary>
        /// Gets or Sets KycStatus
        /// </summary>
        [DataMember(Name="kycStatus", EmitDefaultValue=false)]
        public string KycStatus { get; set; }
        /// <summary>
        /// Gets or Sets BankLinkStatus
        /// </summary>
        [DataMember(Name="bankLinkStatus", EmitDefaultValue=false)]
        public string BankLinkStatus { get; set; }
        /// <summary>
        /// Gets or Sets TradeReady
        /// </summary>
        [DataMember(Name="tradeReady", EmitDefaultValue=false)]
        public string TradeReady { get; set; }
        /// <summary>
        /// Gets or Sets IsDisabledAccount
        /// </summary>
        [DataMember(Name="isDisabledAccount", EmitDefaultValue=false)]
        public bool? IsDisabledAccount { get; set; }
        /// <summary>
        /// Gets or Sets FaSecure
        /// </summary>
        [DataMember(Name="faSecure", EmitDefaultValue=false)]
        public string FaSecure { get; set; }
        /// <summary>
        /// Gets or Sets HasPhone
        /// </summary>
        [DataMember(Name="hasPhone", EmitDefaultValue=false)]
        public string HasPhone { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserSummaryData {\n");
            sb.Append("  KycStatus: ").Append(KycStatus).Append("\n");
            sb.Append("  BankLinkStatus: ").Append(BankLinkStatus).Append("\n");
            sb.Append("  TradeReady: ").Append(TradeReady).Append("\n");
            sb.Append("  IsDisabledAccount: ").Append(IsDisabledAccount).Append("\n");
            sb.Append("  FaSecure: ").Append(FaSecure).Append("\n");
            sb.Append("  HasPhone: ").Append(HasPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserSummaryData);
        }

        /// <summary>
        /// Returns true if UserSummaryData instances are equal
        /// </summary>
        /// <param name="other">Instance of UserSummaryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSummaryData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.KycStatus == other.KycStatus ||
                    this.KycStatus != null &&
                    this.KycStatus.Equals(other.KycStatus)
                ) && 
                (
                    this.BankLinkStatus == other.BankLinkStatus ||
                    this.BankLinkStatus != null &&
                    this.BankLinkStatus.Equals(other.BankLinkStatus)
                ) && 
                (
                    this.TradeReady == other.TradeReady ||
                    this.TradeReady != null &&
                    this.TradeReady.Equals(other.TradeReady)
                ) && 
                (
                    this.IsDisabledAccount == other.IsDisabledAccount ||
                    this.IsDisabledAccount != null &&
                    this.IsDisabledAccount.Equals(other.IsDisabledAccount)
                ) && 
                (
                    this.FaSecure == other.FaSecure ||
                    this.FaSecure != null &&
                    this.FaSecure.Equals(other.FaSecure)
                ) && 
                (
                    this.HasPhone == other.HasPhone ||
                    this.HasPhone != null &&
                    this.HasPhone.Equals(other.HasPhone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.KycStatus != null)
                    hash = hash * 59 + this.KycStatus.GetHashCode();
                if (this.BankLinkStatus != null)
                    hash = hash * 59 + this.BankLinkStatus.GetHashCode();
                if (this.TradeReady != null)
                    hash = hash * 59 + this.TradeReady.GetHashCode();
                if (this.IsDisabledAccount != null)
                    hash = hash * 59 + this.IsDisabledAccount.GetHashCode();
                if (this.FaSecure != null)
                    hash = hash * 59 + this.FaSecure.GetHashCode();
                if (this.HasPhone != null)
                    hash = hash * 59 + this.HasPhone.GetHashCode();
                return hash;
            }
        }
    }

}
