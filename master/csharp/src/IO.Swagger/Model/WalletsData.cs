/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WalletsData
    /// </summary>
    [DataContract]
    public partial class WalletsData :  IEquatable<WalletsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletsData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsData" /> class.
        /// </summary>
        /// <param name="WalletID">WalletID (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="CoinBalance">CoinBalance (required).</param>
        /// <param name="Time">Time (required).</param>
        /// <param name="Info">Info (required).</param>
        /// <param name="Netki">Netki (required).</param>
        public WalletsData(string WalletID = null, string Name = null, long? CoinBalance = null, long? Time = null, string Info = null, string Netki = null)
        {
            // to ensure "WalletID" is required (not null)
            if (WalletID == null)
            {
                throw new InvalidDataException("WalletID is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.WalletID = WalletID;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "CoinBalance" is required (not null)
            if (CoinBalance == null)
            {
                throw new InvalidDataException("CoinBalance is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.CoinBalance = CoinBalance;
            }
            // to ensure "Time" is required (not null)
            if (Time == null)
            {
                throw new InvalidDataException("Time is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.Time = Time;
            }
            // to ensure "Info" is required (not null)
            if (Info == null)
            {
                throw new InvalidDataException("Info is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.Info = Info;
            }
            // to ensure "Netki" is required (not null)
            if (Netki == null)
            {
                throw new InvalidDataException("Netki is a required property for WalletsData and cannot be null");
            }
            else
            {
                this.Netki = Netki;
            }
        }
        
        /// <summary>
        /// Gets or Sets WalletID
        /// </summary>
        [DataMember(Name="walletID", EmitDefaultValue=false)]
        public string WalletID { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets CoinBalance
        /// </summary>
        [DataMember(Name="coinBalance", EmitDefaultValue=false)]
        public long? CoinBalance { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }
        /// <summary>
        /// Gets or Sets Netki
        /// </summary>
        [DataMember(Name="netki", EmitDefaultValue=false)]
        public string Netki { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletsData {\n");
            sb.Append("  WalletID: ").Append(WalletID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CoinBalance: ").Append(CoinBalance).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Netki: ").Append(Netki).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WalletsData);
        }

        /// <summary>
        /// Returns true if WalletsData instances are equal
        /// </summary>
        /// <param name="other">Instance of WalletsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WalletID == other.WalletID ||
                    this.WalletID != null &&
                    this.WalletID.Equals(other.WalletID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CoinBalance == other.CoinBalance ||
                    this.CoinBalance != null &&
                    this.CoinBalance.Equals(other.CoinBalance)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                ) && 
                (
                    this.Netki == other.Netki ||
                    this.Netki != null &&
                    this.Netki.Equals(other.Netki)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WalletID != null)
                    hash = hash * 59 + this.WalletID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CoinBalance != null)
                    hash = hash * 59 + this.CoinBalance.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                if (this.Netki != null)
                    hash = hash * 59 + this.Netki.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
