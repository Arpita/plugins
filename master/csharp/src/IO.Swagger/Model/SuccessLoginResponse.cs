/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SuccessLoginResponse
    /// </summary>
    [DataContract]
    public partial class SuccessLoginResponse :  IEquatable<SuccessLoginResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccessLoginResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SuccessLoginResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SuccessLoginResponse" /> class.
        /// </summary>
        /// <param name="Success">Success (required) (default to false).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="Message">Message (required).</param>
        /// <param name="KeyType">KeyType (required).</param>
        /// <param name="KeyNeeded">KeyNeeded (required).</param>
        public SuccessLoginResponse(bool? Success = null, string Email = null, string Message = null, string KeyType = null, string KeyNeeded = null)
        {
            // to ensure "Success" is required (not null)
            if (Success == null)
            {
                throw new InvalidDataException("Success is a required property for SuccessLoginResponse and cannot be null");
            }
            else
            {
                this.Success = Success;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for SuccessLoginResponse and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for SuccessLoginResponse and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "KeyType" is required (not null)
            if (KeyType == null)
            {
                throw new InvalidDataException("KeyType is a required property for SuccessLoginResponse and cannot be null");
            }
            else
            {
                this.KeyType = KeyType;
            }
            // to ensure "KeyNeeded" is required (not null)
            if (KeyNeeded == null)
            {
                throw new InvalidDataException("KeyNeeded is a required property for SuccessLoginResponse and cannot be null");
            }
            else
            {
                this.KeyNeeded = KeyNeeded;
            }
        }
        
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>
        [DataMember(Name="keyType", EmitDefaultValue=false)]
        public string KeyType { get; set; }
        /// <summary>
        /// Gets or Sets KeyNeeded
        /// </summary>
        [DataMember(Name="keyNeeded", EmitDefaultValue=false)]
        public string KeyNeeded { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuccessLoginResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  KeyNeeded: ").Append(KeyNeeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SuccessLoginResponse);
        }

        /// <summary>
        /// Returns true if SuccessLoginResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SuccessLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuccessLoginResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.KeyType == other.KeyType ||
                    this.KeyType != null &&
                    this.KeyType.Equals(other.KeyType)
                ) && 
                (
                    this.KeyNeeded == other.KeyNeeded ||
                    this.KeyNeeded != null &&
                    this.KeyNeeded.Equals(other.KeyNeeded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.KeyType != null)
                    hash = hash * 59 + this.KeyType.GetHashCode();
                if (this.KeyNeeded != null)
                    hash = hash * 59 + this.KeyNeeded.GetHashCode();
                return hash;
            }
        }
    }

}
