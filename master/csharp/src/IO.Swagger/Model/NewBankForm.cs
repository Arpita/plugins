/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewBankForm
    /// </summary>
    [DataContract]
    public partial class NewBankForm :  IEquatable<NewBankForm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewBankForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewBankForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewBankForm" /> class.
        /// </summary>
        /// <param name="AcctNick">AcctNick (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Ban">Ban (required).</param>
        /// <param name="Ifsc">Ifsc (required).</param>
        /// <param name="Message">Message.</param>
        /// <param name="BanType">BanType (required).</param>
        /// <param name="Phone">Phone (required).</param>
        /// <param name="Otp">Otp (required).</param>
        public NewBankForm(string AcctNick = null, string Name = null, string Ban = null, string Ifsc = null, string Message = null, string BanType = null, string Phone = null, string Otp = null)
        {
            // to ensure "AcctNick" is required (not null)
            if (AcctNick == null)
            {
                throw new InvalidDataException("AcctNick is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.AcctNick = AcctNick;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Ban" is required (not null)
            if (Ban == null)
            {
                throw new InvalidDataException("Ban is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.Ban = Ban;
            }
            // to ensure "Ifsc" is required (not null)
            if (Ifsc == null)
            {
                throw new InvalidDataException("Ifsc is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.Ifsc = Ifsc;
            }
            // to ensure "BanType" is required (not null)
            if (BanType == null)
            {
                throw new InvalidDataException("BanType is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.BanType = BanType;
            }
            // to ensure "Phone" is required (not null)
            if (Phone == null)
            {
                throw new InvalidDataException("Phone is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.Phone = Phone;
            }
            // to ensure "Otp" is required (not null)
            if (Otp == null)
            {
                throw new InvalidDataException("Otp is a required property for NewBankForm and cannot be null");
            }
            else
            {
                this.Otp = Otp;
            }
            this.Message = Message;
        }
        
        /// <summary>
        /// Gets or Sets AcctNick
        /// </summary>
        [DataMember(Name="acct_nick", EmitDefaultValue=false)]
        public string AcctNick { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Ban
        /// </summary>
        [DataMember(Name="ban", EmitDefaultValue=false)]
        public string Ban { get; set; }
        /// <summary>
        /// Gets or Sets Ifsc
        /// </summary>
        [DataMember(Name="ifsc", EmitDefaultValue=false)]
        public string Ifsc { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets BanType
        /// </summary>
        [DataMember(Name="banType", EmitDefaultValue=false)]
        public string BanType { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets Otp
        /// </summary>
        [DataMember(Name="otp", EmitDefaultValue=false)]
        public string Otp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewBankForm {\n");
            sb.Append("  AcctNick: ").Append(AcctNick).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ban: ").Append(Ban).Append("\n");
            sb.Append("  Ifsc: ").Append(Ifsc).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  BanType: ").Append(BanType).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NewBankForm);
        }

        /// <summary>
        /// Returns true if NewBankForm instances are equal
        /// </summary>
        /// <param name="other">Instance of NewBankForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewBankForm other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcctNick == other.AcctNick ||
                    this.AcctNick != null &&
                    this.AcctNick.Equals(other.AcctNick)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Ban == other.Ban ||
                    this.Ban != null &&
                    this.Ban.Equals(other.Ban)
                ) && 
                (
                    this.Ifsc == other.Ifsc ||
                    this.Ifsc != null &&
                    this.Ifsc.Equals(other.Ifsc)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.BanType == other.BanType ||
                    this.BanType != null &&
                    this.BanType.Equals(other.BanType)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Otp == other.Otp ||
                    this.Otp != null &&
                    this.Otp.Equals(other.Otp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcctNick != null)
                    hash = hash * 59 + this.AcctNick.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Ban != null)
                    hash = hash * 59 + this.Ban.GetHashCode();
                if (this.Ifsc != null)
                    hash = hash * 59 + this.Ifsc.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.BanType != null)
                    hash = hash * 59 + this.BanType.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Otp != null)
                    hash = hash * 59 + this.Otp.GetHashCode();
                return hash;
            }
        }
    }

}
