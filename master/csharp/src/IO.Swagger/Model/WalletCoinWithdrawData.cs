/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WalletCoinWithdrawData
    /// </summary>
    [DataContract]
    public partial class WalletCoinWithdrawData :  IEquatable<WalletCoinWithdrawData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletCoinWithdrawData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletCoinWithdrawData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletCoinWithdrawData" /> class.
        /// </summary>
        /// <param name="TimeDetails">TimeDetails (required).</param>
        /// <param name="TxID">TxID (required).</param>
        /// <param name="Message">Message (required).</param>
        /// <param name="Satoshis">Satoshis (required).</param>
        /// <param name="WalletID">WalletID (required).</param>
        /// <param name="WithdrawID">WithdrawID (required).</param>
        /// <param name="SentTo">SentTo (required).</param>
        public WalletCoinWithdrawData(TimeData TimeDetails = null, string TxID = null, string Message = null, long? Satoshis = null, string WalletID = null, string WithdrawID = null, string SentTo = null)
        {
            // to ensure "TimeDetails" is required (not null)
            if (TimeDetails == null)
            {
                throw new InvalidDataException("TimeDetails is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.TimeDetails = TimeDetails;
            }
            // to ensure "TxID" is required (not null)
            if (TxID == null)
            {
                throw new InvalidDataException("TxID is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.TxID = TxID;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "Satoshis" is required (not null)
            if (Satoshis == null)
            {
                throw new InvalidDataException("Satoshis is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.Satoshis = Satoshis;
            }
            // to ensure "WalletID" is required (not null)
            if (WalletID == null)
            {
                throw new InvalidDataException("WalletID is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.WalletID = WalletID;
            }
            // to ensure "WithdrawID" is required (not null)
            if (WithdrawID == null)
            {
                throw new InvalidDataException("WithdrawID is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.WithdrawID = WithdrawID;
            }
            // to ensure "SentTo" is required (not null)
            if (SentTo == null)
            {
                throw new InvalidDataException("SentTo is a required property for WalletCoinWithdrawData and cannot be null");
            }
            else
            {
                this.SentTo = SentTo;
            }
        }
        
        /// <summary>
        /// Gets or Sets TimeDetails
        /// </summary>
        [DataMember(Name="timeDetails", EmitDefaultValue=false)]
        public TimeData TimeDetails { get; set; }
        /// <summary>
        /// Gets or Sets TxID
        /// </summary>
        [DataMember(Name="txID", EmitDefaultValue=false)]
        public string TxID { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets Satoshis
        /// </summary>
        [DataMember(Name="satoshis", EmitDefaultValue=false)]
        public long? Satoshis { get; set; }
        /// <summary>
        /// Gets or Sets WalletID
        /// </summary>
        [DataMember(Name="walletID", EmitDefaultValue=false)]
        public string WalletID { get; set; }
        /// <summary>
        /// Gets or Sets WithdrawID
        /// </summary>
        [DataMember(Name="withdrawID", EmitDefaultValue=false)]
        public string WithdrawID { get; set; }
        /// <summary>
        /// Gets or Sets SentTo
        /// </summary>
        [DataMember(Name="sentTo", EmitDefaultValue=false)]
        public string SentTo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletCoinWithdrawData {\n");
            sb.Append("  TimeDetails: ").Append(TimeDetails).Append("\n");
            sb.Append("  TxID: ").Append(TxID).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Satoshis: ").Append(Satoshis).Append("\n");
            sb.Append("  WalletID: ").Append(WalletID).Append("\n");
            sb.Append("  WithdrawID: ").Append(WithdrawID).Append("\n");
            sb.Append("  SentTo: ").Append(SentTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WalletCoinWithdrawData);
        }

        /// <summary>
        /// Returns true if WalletCoinWithdrawData instances are equal
        /// </summary>
        /// <param name="other">Instance of WalletCoinWithdrawData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletCoinWithdrawData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TimeDetails == other.TimeDetails ||
                    this.TimeDetails != null &&
                    this.TimeDetails.Equals(other.TimeDetails)
                ) && 
                (
                    this.TxID == other.TxID ||
                    this.TxID != null &&
                    this.TxID.Equals(other.TxID)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Satoshis == other.Satoshis ||
                    this.Satoshis != null &&
                    this.Satoshis.Equals(other.Satoshis)
                ) && 
                (
                    this.WalletID == other.WalletID ||
                    this.WalletID != null &&
                    this.WalletID.Equals(other.WalletID)
                ) && 
                (
                    this.WithdrawID == other.WithdrawID ||
                    this.WithdrawID != null &&
                    this.WithdrawID.Equals(other.WithdrawID)
                ) && 
                (
                    this.SentTo == other.SentTo ||
                    this.SentTo != null &&
                    this.SentTo.Equals(other.SentTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TimeDetails != null)
                    hash = hash * 59 + this.TimeDetails.GetHashCode();
                if (this.TxID != null)
                    hash = hash * 59 + this.TxID.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Satoshis != null)
                    hash = hash * 59 + this.Satoshis.GetHashCode();
                if (this.WalletID != null)
                    hash = hash * 59 + this.WalletID.GetHashCode();
                if (this.WithdrawID != null)
                    hash = hash * 59 + this.WithdrawID.GetHashCode();
                if (this.SentTo != null)
                    hash = hash * 59 + this.SentTo.GetHashCode();
                return hash;
            }
        }
    }

}
