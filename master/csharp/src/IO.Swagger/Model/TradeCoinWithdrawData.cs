/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TradeCoinWithdrawData
    /// </summary>
    [DataContract]
    public partial class TradeCoinWithdrawData :  IEquatable<TradeCoinWithdrawData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeCoinWithdrawData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradeCoinWithdrawData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeCoinWithdrawData" /> class.
        /// </summary>
        /// <param name="TimeDetails">TimeDetails (required).</param>
        /// <param name="Address">Address (required).</param>
        /// <param name="Value">Value (required).</param>
        /// <param name="Fees">Fees (required).</param>
        /// <param name="WithdrawID">WithdrawID (required).</param>
        /// <param name="TxHash">TxHash (required).</param>
        public TradeCoinWithdrawData(TimeData TimeDetails = null, string Address = null, long? Value = null, long? Fees = null, string WithdrawID = null, string TxHash = null)
        {
            // to ensure "TimeDetails" is required (not null)
            if (TimeDetails == null)
            {
                throw new InvalidDataException("TimeDetails is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.TimeDetails = TimeDetails;
            }
            // to ensure "Address" is required (not null)
            if (Address == null)
            {
                throw new InvalidDataException("Address is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.Address = Address;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            // to ensure "Fees" is required (not null)
            if (Fees == null)
            {
                throw new InvalidDataException("Fees is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.Fees = Fees;
            }
            // to ensure "WithdrawID" is required (not null)
            if (WithdrawID == null)
            {
                throw new InvalidDataException("WithdrawID is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.WithdrawID = WithdrawID;
            }
            // to ensure "TxHash" is required (not null)
            if (TxHash == null)
            {
                throw new InvalidDataException("TxHash is a required property for TradeCoinWithdrawData and cannot be null");
            }
            else
            {
                this.TxHash = TxHash;
            }
        }
        
        /// <summary>
        /// Gets or Sets TimeDetails
        /// </summary>
        [DataMember(Name="timeDetails", EmitDefaultValue=false)]
        public TimeData TimeDetails { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; set; }
        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public long? Fees { get; set; }
        /// <summary>
        /// Gets or Sets WithdrawID
        /// </summary>
        [DataMember(Name="withdrawID", EmitDefaultValue=false)]
        public string WithdrawID { get; set; }
        /// <summary>
        /// Gets or Sets TxHash
        /// </summary>
        [DataMember(Name="txHash", EmitDefaultValue=false)]
        public string TxHash { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeCoinWithdrawData {\n");
            sb.Append("  TimeDetails: ").Append(TimeDetails).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  WithdrawID: ").Append(WithdrawID).Append("\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TradeCoinWithdrawData);
        }

        /// <summary>
        /// Returns true if TradeCoinWithdrawData instances are equal
        /// </summary>
        /// <param name="other">Instance of TradeCoinWithdrawData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeCoinWithdrawData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TimeDetails == other.TimeDetails ||
                    this.TimeDetails != null &&
                    this.TimeDetails.Equals(other.TimeDetails)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Fees == other.Fees ||
                    this.Fees != null &&
                    this.Fees.Equals(other.Fees)
                ) && 
                (
                    this.WithdrawID == other.WithdrawID ||
                    this.WithdrawID != null &&
                    this.WithdrawID.Equals(other.WithdrawID)
                ) && 
                (
                    this.TxHash == other.TxHash ||
                    this.TxHash != null &&
                    this.TxHash.Equals(other.TxHash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TimeDetails != null)
                    hash = hash * 59 + this.TimeDetails.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Fees != null)
                    hash = hash * 59 + this.Fees.GetHashCode();
                if (this.WithdrawID != null)
                    hash = hash * 59 + this.WithdrawID.GetHashCode();
                if (this.TxHash != null)
                    hash = hash * 59 + this.TxHash.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
