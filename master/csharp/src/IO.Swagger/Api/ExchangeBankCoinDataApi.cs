/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeBankCoinDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Exchange Coin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeAddressDataResponse</returns>
        TradeAddressDataResponse V1userexchangebankcoinaddresses (string authorization, string accept = null);

        /// <summary>
        /// Exchange Coin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeAddressDataResponse</returns>
        ApiResponse<TradeAddressDataResponse> V1userexchangebankcoinaddressesWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Available Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        VolDataResponse V1userexchangebankcoinbalanceavailable (string authorization, string accept = null);

        /// <summary>
        /// Available Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        ApiResponse<VolDataResponse> V1userexchangebankcoinbalanceavailableWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending coin balance in satoshi.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        VolDataResponse V1userexchangebankcoinbalancepending (string authorization, string accept = null);

        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending coin balance in satoshi.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        ApiResponse<VolDataResponse> V1userexchangebankcoinbalancependingWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Total Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns users total coin balance in satoshis. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        VolDataResponse V1userexchangebankcoinbalancetotal (string authorization, string accept = null);

        /// <summary>
        /// Total Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns users total coin balance in satoshis. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        ApiResponse<VolDataResponse> V1userexchangebankcoinbalancetotalWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        CoinDepDataResponse V1userexchangebankcoindepositcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        ApiResponse<CoinDepDataResponse> V1userexchangebankcoindepositcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        CoinDepDataResponse V1userexchangebankcoindepositunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        ApiResponse<CoinDepDataResponse> V1userexchangebankcoindepositunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        CoinDepDataResponse V1userexchangebankcoindepositverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        ApiResponse<CoinDepDataResponse> V1userexchangebankcoindepositverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Cancelled Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        ApiResponse<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Completed Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        ApiResponse<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        ApiResponse<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        ApiResponse<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Exchange Coin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeAddressDataResponse</returns>
        System.Threading.Tasks.Task<TradeAddressDataResponse> V1userexchangebankcoinaddressesAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Coin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeAddressDataResponse>> V1userexchangebankcoinaddressesAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Available Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalanceavailableAsync (string authorization, string accept = null);

        /// <summary>
        /// Available Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalanceavailableAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending coin balance in satoshi.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalancependingAsync (string authorization, string accept = null);

        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending coin balance in satoshi.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalancependingAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Total Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns users total coin balance in satoshis. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalancetotalAsync (string authorization, string accept = null);

        /// <summary>
        /// Total Exchange Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns users total coin balance in satoshis. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalancetotalAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Coin Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Cancelled Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Completed Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeBankCoinDataApi : IExchangeBankCoinDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankCoinDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeBankCoinDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankCoinDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeBankCoinDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Exchange Coin Addresses Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeAddressDataResponse</returns>
        public TradeAddressDataResponse V1userexchangebankcoinaddresses (string authorization, string accept = null)
        {
             ApiResponse<TradeAddressDataResponse> localVarResponse = V1userexchangebankcoinaddressesWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Coin Addresses Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeAddressDataResponse</returns>
        public ApiResponse< TradeAddressDataResponse > V1userexchangebankcoinaddressesWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinaddresses");

            var localVarPath = "/v1/user/exchange/bank/coin/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinaddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeAddressDataResponse)));
            
        }

        /// <summary>
        /// Exchange Coin Addresses Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeAddressDataResponse> V1userexchangebankcoinaddressesAsync (string authorization, string accept = null)
        {
             ApiResponse<TradeAddressDataResponse> localVarResponse = await V1userexchangebankcoinaddressesAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Coin Addresses Gets a List of Users Exchange Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeAddressDataResponse>> V1userexchangebankcoinaddressesAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinaddresses");

            var localVarPath = "/v1/user/exchange/bank/coin/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinaddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeAddressDataResponse)));
            
        }

        /// <summary>
        /// Available Exchange Coin Balance Returns balance which is in Available for Trades. The response is in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        public VolDataResponse V1userexchangebankcoinbalanceavailable (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = V1userexchangebankcoinbalanceavailableWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available Exchange Coin Balance Returns balance which is in Available for Trades. The response is in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        public ApiResponse< VolDataResponse > V1userexchangebankcoinbalanceavailableWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalanceavailable");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalanceavailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// Available Exchange Coin Balance Returns balance which is in Available for Trades. The response is in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        public async System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalanceavailableAsync (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = await V1userexchangebankcoinbalanceavailableAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available Exchange Coin Balance Returns balance which is in Available for Trades. The response is in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalanceavailableAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalanceavailable");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalanceavailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending coin balance in satoshi.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        public VolDataResponse V1userexchangebankcoinbalancepending (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = V1userexchangebankcoinbalancependingWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending coin balance in satoshi.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        public ApiResponse< VolDataResponse > V1userexchangebankcoinbalancependingWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalancepending");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalancepending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending coin balance in satoshi.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        public async System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalancependingAsync (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = await V1userexchangebankcoinbalancependingAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending coin balance in satoshi.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalancependingAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalancepending");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalancepending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// Total Exchange Coin Balance Returns users total coin balance in satoshis. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>VolDataResponse</returns>
        public VolDataResponse V1userexchangebankcoinbalancetotal (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = V1userexchangebankcoinbalancetotalWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Total Exchange Coin Balance Returns users total coin balance in satoshis. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of VolDataResponse</returns>
        public ApiResponse< VolDataResponse > V1userexchangebankcoinbalancetotalWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalancetotal");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalancetotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// Total Exchange Coin Balance Returns users total coin balance in satoshis. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of VolDataResponse</returns>
        public async System.Threading.Tasks.Task<VolDataResponse> V1userexchangebankcoinbalancetotalAsync (string authorization, string accept = null)
        {
             ApiResponse<VolDataResponse> localVarResponse = await V1userexchangebankcoinbalancetotalAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Total Exchange Coin Balance Returns users total coin balance in satoshis. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (VolDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VolDataResponse>> V1userexchangebankcoinbalancetotalAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinbalancetotal");

            var localVarPath = "/v1/user/exchange/bank/coin/balance/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinbalancetotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VolDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Coin Deposits Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        public CoinDepDataResponse V1userexchangebankcoindepositcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = V1userexchangebankcoindepositcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Exchange Coin Deposits Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        public ApiResponse< CoinDepDataResponse > V1userexchangebankcoindepositcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositcancelled");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Coin Deposits Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        public async System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = await V1userexchangebankcoindepositcancelledAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled Exchange Coin Deposits Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositcancelled");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Coin Deposits Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        public CoinDepDataResponse V1userexchangebankcoindepositunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = V1userexchangebankcoindepositunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unverified Exchange Coin Deposits Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        public ApiResponse< CoinDepDataResponse > V1userexchangebankcoindepositunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositunverified");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Coin Deposits Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        public async System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = await V1userexchangebankcoindepositunverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unverified Exchange Coin Deposits Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositunverified");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Coin Deposits Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>CoinDepDataResponse</returns>
        public CoinDepDataResponse V1userexchangebankcoindepositverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = V1userexchangebankcoindepositverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verified Exchange Coin Deposits Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of CoinDepDataResponse</returns>
        public ApiResponse< CoinDepDataResponse > V1userexchangebankcoindepositverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositverified");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Coin Deposits Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of CoinDepDataResponse</returns>
        public async System.Threading.Tasks.Task<CoinDepDataResponse> V1userexchangebankcoindepositverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<CoinDepDataResponse> localVarResponse = await V1userexchangebankcoindepositverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verified Exchange Coin Deposits Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (CoinDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoinDepDataResponse>> V1userexchangebankcoindepositverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoindepositverified");

            var localVarPath = "/v1/user/exchange/bank/coin/deposit/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoindepositverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoinDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoinDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoinDepDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        public TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = V1userexchangebankcoinwithdrawcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        public ApiResponse< TradeCoinWithdrawDataResponse > V1userexchangebankcoinwithdrawcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawcancelled");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = await V1userexchangebankcoinwithdrawcancelledAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled Exchange Coin Withdrawals Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawcancelled");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Completed Exchange Coin Withdrawals Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        public TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = V1userexchangebankcoinwithdrawcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completed Exchange Coin Withdrawals Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        public ApiResponse< TradeCoinWithdrawDataResponse > V1userexchangebankcoinwithdrawcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawcompleted");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Completed Exchange Coin Withdrawals Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = await V1userexchangebankcoinwithdrawcompletedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completed Exchange Coin Withdrawals Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawcompleted");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Coin Withdrawals Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        public TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = V1userexchangebankcoinwithdrawunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unverified Exchange Coin Withdrawals Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        public ApiResponse< TradeCoinWithdrawDataResponse > V1userexchangebankcoinwithdrawunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawunverified");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Coin Withdrawals Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = await V1userexchangebankcoinwithdrawunverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unverified Exchange Coin Withdrawals Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawunverified");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Coin Withdrawals Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeCoinWithdrawDataResponse</returns>
        public TradeCoinWithdrawDataResponse V1userexchangebankcoinwithdrawverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = V1userexchangebankcoinwithdrawverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verified Exchange Coin Withdrawals Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeCoinWithdrawDataResponse</returns>
        public ApiResponse< TradeCoinWithdrawDataResponse > V1userexchangebankcoinwithdrawverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawverified");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Coin Withdrawals Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeCoinWithdrawDataResponse> V1userexchangebankcoinwithdrawverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<TradeCoinWithdrawDataResponse> localVarResponse = await V1userexchangebankcoinwithdrawverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verified Exchange Coin Withdrawals Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeCoinWithdrawDataResponse>> V1userexchangebankcoinwithdrawverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankCoinDataApi->V1userexchangebankcoinwithdrawverified");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradeCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeCoinWithdrawDataResponse)));
            
        }

    }
}
