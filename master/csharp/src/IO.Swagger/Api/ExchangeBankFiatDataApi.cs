/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeBankFiatDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Exchange Bitcoin Deposit Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatBankDataResponse</returns>
        FiatBankDataResponse V1userexchangebankfiataccounts (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatBankDataResponse</returns>
        ApiResponse<FiatBankDataResponse> V1userexchangebankfiataccountsWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Available Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        RateDataResponse V1userexchangebankfiatbalanceavailable (string authorization, string accept = null);

        /// <summary>
        /// Available Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        ApiResponse<RateDataResponse> V1userexchangebankfiatbalanceavailableWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending fiat balance in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        RateDataResponse V1userexchangebankfiatbalancepending (string authorization, string accept = null);

        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending fiat balance in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        ApiResponse<RateDataResponse> V1userexchangebankfiatbalancependingWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Total Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns users total fiat balance in paisa. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        RateDataResponse V1userexchangebankfiatbalancetotal (string authorization, string accept = null);

        /// <summary>
        /// Total Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns users total fiat balance in paisa. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        ApiResponse<RateDataResponse> V1userexchangebankfiatbalancetotalWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        FiatDepDataResponse V1userexchangebankfiatdepositcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        ApiResponse<FiatDepDataResponse> V1userexchangebankfiatdepositcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        FiatDepDataResponse V1userexchangebankfiatdepositunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        ApiResponse<FiatDepDataResponse> V1userexchangebankfiatdepositunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        FiatDepDataResponse V1userexchangebankfiatdepositverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        ApiResponse<FiatDepDataResponse> V1userexchangebankfiatdepositverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        FiatWithDataResponse V1userexchangebankfiatwithdrawcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        ApiResponse<FiatWithDataResponse> V1userexchangebankfiatwithdrawcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Completed Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        FiatWithDataResponse V1userexchangebankfiatwithdrawcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        ApiResponse<FiatWithDataResponse> V1userexchangebankfiatwithdrawcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        FiatWithDataResponse V1userexchangebankfiatwithdrawunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        ApiResponse<FiatWithDataResponse> V1userexchangebankfiatwithdrawunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        FiatWithDataResponse V1userexchangebankfiatwithdrawverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        ApiResponse<FiatWithDataResponse> V1userexchangebankfiatwithdrawverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Exchange Bitcoin Deposit Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatBankDataResponse</returns>
        System.Threading.Tasks.Task<FiatBankDataResponse> V1userexchangebankfiataccountsAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Exchange Bitcoin Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatBankDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatBankDataResponse>> V1userexchangebankfiataccountsAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Available Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalanceavailableAsync (string authorization, string accept = null);

        /// <summary>
        /// Available Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns balance which is in Available for Trades. The response is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalanceavailableAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending fiat balance in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalancependingAsync (string authorization, string accept = null);

        /// <summary>
        /// In Trade Coin Balance
        /// </summary>
        /// <remarks>
        /// Returns in-trade or pending fiat balance in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalancependingAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Total Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns users total fiat balance in paisa. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalancetotalAsync (string authorization, string accept = null);

        /// <summary>
        /// Total Exchange Fiat Balance
        /// </summary>
        /// <remarks>
        /// Returns users total fiat balance in paisa. Pending + Available
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalancetotalAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Fiat Deposits
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Completed Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Unverified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Verified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Verified Exchange Fiat Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeBankFiatDataApi : IExchangeBankFiatDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankFiatDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeBankFiatDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankFiatDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeBankFiatDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses Gets a List of Users Exchange Bitcoin Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatBankDataResponse</returns>
        public FiatBankDataResponse V1userexchangebankfiataccounts (string authorization, string accept = null)
        {
             ApiResponse<FiatBankDataResponse> localVarResponse = V1userexchangebankfiataccountsWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses Gets a List of Users Exchange Bitcoin Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatBankDataResponse</returns>
        public ApiResponse< FiatBankDataResponse > V1userexchangebankfiataccountsWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiataccounts");

            var localVarPath = "/v1/user/exchange/bank/fiat/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiataccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatBankDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatBankDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatBankDataResponse)));
            
        }

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses Gets a List of Users Exchange Bitcoin Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatBankDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatBankDataResponse> V1userexchangebankfiataccountsAsync (string authorization, string accept = null)
        {
             ApiResponse<FiatBankDataResponse> localVarResponse = await V1userexchangebankfiataccountsAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Bitcoin Deposit Addresses Gets a List of Users Exchange Bitcoin Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatBankDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatBankDataResponse>> V1userexchangebankfiataccountsAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiataccounts");

            var localVarPath = "/v1/user/exchange/bank/fiat/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiataccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatBankDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatBankDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatBankDataResponse)));
            
        }

        /// <summary>
        /// Available Exchange Fiat Balance Returns balance which is in Available for Trades. The response is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        public RateDataResponse V1userexchangebankfiatbalanceavailable (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = V1userexchangebankfiatbalanceavailableWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available Exchange Fiat Balance Returns balance which is in Available for Trades. The response is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        public ApiResponse< RateDataResponse > V1userexchangebankfiatbalanceavailableWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalanceavailable");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalanceavailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Available Exchange Fiat Balance Returns balance which is in Available for Trades. The response is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalanceavailableAsync (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = await V1userexchangebankfiatbalanceavailableAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available Exchange Fiat Balance Returns balance which is in Available for Trades. The response is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalanceavailableAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalanceavailable");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalanceavailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending fiat balance in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        public RateDataResponse V1userexchangebankfiatbalancepending (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = V1userexchangebankfiatbalancependingWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending fiat balance in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        public ApiResponse< RateDataResponse > V1userexchangebankfiatbalancependingWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalancepending");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalancepending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending fiat balance in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalancependingAsync (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = await V1userexchangebankfiatbalancependingAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// In Trade Coin Balance Returns in-trade or pending fiat balance in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalancependingAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalancepending");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalancepending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Total Exchange Fiat Balance Returns users total fiat balance in paisa. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        public RateDataResponse V1userexchangebankfiatbalancetotal (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = V1userexchangebankfiatbalancetotalWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Total Exchange Fiat Balance Returns users total fiat balance in paisa. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        public ApiResponse< RateDataResponse > V1userexchangebankfiatbalancetotalWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalancetotal");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalancetotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Total Exchange Fiat Balance Returns users total fiat balance in paisa. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDataResponse> V1userexchangebankfiatbalancetotalAsync (string authorization, string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = await V1userexchangebankfiatbalancetotalAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Total Exchange Fiat Balance Returns users total fiat balance in paisa. Pending + Available
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1userexchangebankfiatbalancetotalAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatbalancetotal");

            var localVarPath = "/v1/user/exchange/bank/fiat/balance/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatbalancetotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Fiat Deposits Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        public FiatDepDataResponse V1userexchangebankfiatdepositcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = V1userexchangebankfiatdepositcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Exchange Fiat Deposits Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        public ApiResponse< FiatDepDataResponse > V1userexchangebankfiatdepositcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositcancelled");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Fiat Deposits Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = await V1userexchangebankfiatdepositcancelledAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled Exchange Fiat Deposits Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositcancelled");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Fiat Deposits Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        public FiatDepDataResponse V1userexchangebankfiatdepositunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = V1userexchangebankfiatdepositunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unverified Exchange Fiat Deposits Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        public ApiResponse< FiatDepDataResponse > V1userexchangebankfiatdepositunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositunverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Fiat Deposits Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = await V1userexchangebankfiatdepositunverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unverified Exchange Fiat Deposits Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositunverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Fiat Deposits Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatDepDataResponse</returns>
        public FiatDepDataResponse V1userexchangebankfiatdepositverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = V1userexchangebankfiatdepositverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verified Exchange Fiat Deposits Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatDepDataResponse</returns>
        public ApiResponse< FiatDepDataResponse > V1userexchangebankfiatdepositverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Fiat Deposits Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatDepDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatDepDataResponse> V1userexchangebankfiatdepositverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatDepDataResponse> localVarResponse = await V1userexchangebankfiatdepositverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verified Exchange Fiat Deposits Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatDepDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatDepDataResponse>> V1userexchangebankfiatdepositverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatdepositverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatDepDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatDepDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatDepDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        public FiatWithDataResponse V1userexchangebankfiatwithdrawcancelled (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = V1userexchangebankfiatwithdrawcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        public ApiResponse< FiatWithDataResponse > V1userexchangebankfiatwithdrawcancelledWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawcancelled");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawcancelledAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = await V1userexchangebankfiatwithdrawcancelledAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled Exchange Fiat Withdrawals Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawcancelledAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawcancelled");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Completed Exchange Fiat Withdrawals Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        public FiatWithDataResponse V1userexchangebankfiatwithdrawcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = V1userexchangebankfiatwithdrawcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completed Exchange Fiat Withdrawals Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        public ApiResponse< FiatWithDataResponse > V1userexchangebankfiatwithdrawcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawcompleted");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Completed Exchange Fiat Withdrawals Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = await V1userexchangebankfiatwithdrawcompletedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completed Exchange Fiat Withdrawals Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawcompleted");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        public FiatWithDataResponse V1userexchangebankfiatwithdrawunverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = V1userexchangebankfiatwithdrawunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        public ApiResponse< FiatWithDataResponse > V1userexchangebankfiatwithdrawunverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawunverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawunverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = await V1userexchangebankfiatwithdrawunverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unverified Exchange Fiat Withdrawals Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawunverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawunverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Fiat Withdrawals Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>FiatWithDataResponse</returns>
        public FiatWithDataResponse V1userexchangebankfiatwithdrawverified (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = V1userexchangebankfiatwithdrawverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verified Exchange Fiat Withdrawals Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of FiatWithDataResponse</returns>
        public ApiResponse< FiatWithDataResponse > V1userexchangebankfiatwithdrawverifiedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

        /// <summary>
        /// Verified Exchange Fiat Withdrawals Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of FiatWithDataResponse</returns>
        public async System.Threading.Tasks.Task<FiatWithDataResponse> V1userexchangebankfiatwithdrawverifiedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<FiatWithDataResponse> localVarResponse = await V1userexchangebankfiatwithdrawverifiedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verified Exchange Fiat Withdrawals Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (FiatWithDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiatWithDataResponse>> V1userexchangebankfiatwithdrawverifiedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1userexchangebankfiatwithdrawverified");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FiatWithDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FiatWithDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FiatWithDataResponse)));
            
        }

    }
}
