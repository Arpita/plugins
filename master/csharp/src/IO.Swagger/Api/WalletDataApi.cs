/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Wallet Bitcoin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        WalletAddressDataResponse V1userwalletcoinaddressWalletID (string walletID, string authorization = null, string accept = null);

        /// <summary>
        /// Wallet Bitcoin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        ApiResponse<WalletAddressDataResponse> V1userwalletcoinaddressWalletIDWithHttpInfo (string walletID, string authorization = null, string accept = null);
        /// <summary>
        /// Confirmed Wallet Transactions
        /// </summary>
        /// <remarks>
        /// Gets your Confirmed Wallet Bitcoin Transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        WalletAddressDataResponse V1userwalletcoindepositconfirmedWalletID (string walletID, string authorization = null, string accept = null);

        /// <summary>
        /// Confirmed Wallet Transactions
        /// </summary>
        /// <remarks>
        /// Gets your Confirmed Wallet Bitcoin Transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        ApiResponse<WalletAddressDataResponse> V1userwalletcoindepositconfirmedWalletIDWithHttpInfo (string walletID, string authorization = null, string accept = null);
        /// <summary>
        /// Confirmed Wallet Deposit
        /// </summary>
        /// <remarks>
        /// Gets the total confirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        WalletAddressDataResponse V1userwalletcoindepositconfirmedall (string authorization = null, string accept = null);

        /// <summary>
        /// Confirmed Wallet Deposit
        /// </summary>
        /// <remarks>
        /// Gets the total confirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        ApiResponse<WalletAddressDataResponse> V1userwalletcoindepositconfirmedallWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Unconfirmed Transactions in Wallet
        /// </summary>
        /// <remarks>
        /// Gets the unconfirmed transactions on an account/ wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns></returns>
        void V1userwalletcoindepositunconfirmedWalletID (string walletID, string authorization, string accept = null);

        /// <summary>
        /// Unconfirmed Transactions in Wallet
        /// </summary>
        /// <remarks>
        /// Gets the unconfirmed transactions on an account/ wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1userwalletcoindepositunconfirmedWalletIDWithHttpInfo (string walletID, string authorization, string accept = null);
        /// <summary>
        /// All Unconfirmed Deposits
        /// </summary>
        /// <remarks>
        /// Gets the total unconfirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns></returns>
        void V1userwalletcoindepositunconfirmedall (string authorization = null, string accept = null);

        /// <summary>
        /// All Unconfirmed Deposits
        /// </summary>
        /// <remarks>
        /// Gets the total unconfirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1userwalletcoindepositunconfirmedallWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Wallet Details
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Wallets.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletsDataResponse</returns>
        WalletsDataResponse V1userwalletcoinwallets (string authorization = null, string accept = null);

        /// <summary>
        /// Wallet Details
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Wallets.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletsDataResponse</returns>
        ApiResponse<WalletsDataResponse> V1userwalletcoinwalletsWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Cancelled Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        WalletCoinWithdrawDataResponse V1walletwithdrawcancelled (string authorization, string accept = null);

        /// <summary>
        /// Cancelled Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        ApiResponse<WalletCoinWithdrawDataResponse> V1walletwithdrawcancelledWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        WalletCoinWithdrawDataResponse V1walletwithdrawcompleted (string authorization, string accept = null);

        /// <summary>
        /// Completed Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        ApiResponse<WalletCoinWithdrawDataResponse> V1walletwithdrawcompletedWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Unverified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        WalletCoinWithdrawDataResponse V1walletwithdrawunverified (string authorization, string accept = null);

        /// <summary>
        /// Unverified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        ApiResponse<WalletCoinWithdrawDataResponse> V1walletwithdrawunverifiedWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Verified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        WalletCoinWithdrawDataResponse V1walletwithdrawverified (string authorization, string accept = null);

        /// <summary>
        /// Verified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        ApiResponse<WalletCoinWithdrawDataResponse> V1walletwithdrawverifiedWithHttpInfo (string authorization, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Wallet Bitcoin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinaddressWalletIDAsync (string walletID, string authorization = null, string accept = null);

        /// <summary>
        /// Wallet Bitcoin Addresses
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Bitcoin Deposit Addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinaddressWalletIDAsyncWithHttpInfo (string walletID, string authorization = null, string accept = null);
        /// <summary>
        /// Confirmed Wallet Transactions
        /// </summary>
        /// <remarks>
        /// Gets your Confirmed Wallet Bitcoin Transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoindepositconfirmedWalletIDAsync (string walletID, string authorization = null, string accept = null);

        /// <summary>
        /// Confirmed Wallet Transactions
        /// </summary>
        /// <remarks>
        /// Gets your Confirmed Wallet Bitcoin Transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoindepositconfirmedWalletIDAsyncWithHttpInfo (string walletID, string authorization = null, string accept = null);
        /// <summary>
        /// Confirmed Wallet Deposit
        /// </summary>
        /// <remarks>
        /// Gets the total confirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoindepositconfirmedallAsync (string authorization = null, string accept = null);

        /// <summary>
        /// Confirmed Wallet Deposit
        /// </summary>
        /// <remarks>
        /// Gets the total confirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoindepositconfirmedallAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Unconfirmed Transactions in Wallet
        /// </summary>
        /// <remarks>
        /// Gets the unconfirmed transactions on an account/ wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1userwalletcoindepositunconfirmedWalletIDAsync (string walletID, string authorization, string accept = null);

        /// <summary>
        /// Unconfirmed Transactions in Wallet
        /// </summary>
        /// <remarks>
        /// Gets the unconfirmed transactions on an account/ wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1userwalletcoindepositunconfirmedWalletIDAsyncWithHttpInfo (string walletID, string authorization, string accept = null);
        /// <summary>
        /// All Unconfirmed Deposits
        /// </summary>
        /// <remarks>
        /// Gets the total unconfirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1userwalletcoindepositunconfirmedallAsync (string authorization = null, string accept = null);

        /// <summary>
        /// All Unconfirmed Deposits
        /// </summary>
        /// <remarks>
        /// Gets the total unconfirmed transactions across all accounts and addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1userwalletcoindepositunconfirmedallAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Wallet Details
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Wallets.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletsDataResponse</returns>
        System.Threading.Tasks.Task<WalletsDataResponse> V1userwalletcoinwalletsAsync (string authorization = null, string accept = null);

        /// <summary>
        /// Wallet Details
        /// </summary>
        /// <remarks>
        /// Gets a List of Users Wallets.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletsDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletsDataResponse>> V1userwalletcoinwalletsAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Cancelled Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawcancelledAsync (string authorization, string accept = null);

        /// <summary>
        /// Cancelled Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawcancelledAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawcompletedAsync (string authorization, string accept = null);

        /// <summary>
        /// Completed Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawcompletedAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Unverified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawunverifiedAsync (string authorization, string accept = null);

        /// <summary>
        /// Unverified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawunverifiedAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Verified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawverifiedAsync (string authorization, string accept = null);

        /// <summary>
        /// Verified Coin Withdrawals
        /// </summary>
        /// <remarks>
        /// Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawverifiedAsyncWithHttpInfo (string authorization, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletDataApi : IWalletDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Wallet Bitcoin Addresses Gets a List of Users Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        public WalletAddressDataResponse V1userwalletcoinaddressWalletID (string walletID, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = V1userwalletcoinaddressWalletIDWithHttpInfo(walletID, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wallet Bitcoin Addresses Gets a List of Users Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        public ApiResponse< WalletAddressDataResponse > V1userwalletcoinaddressWalletIDWithHttpInfo (string walletID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoinaddressWalletID");

            var localVarPath = "/v1/user/wallet/coin/address/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoinaddressWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Wallet Bitcoin Addresses Gets a List of Users Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinaddressWalletIDAsync (string walletID, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = await V1userwalletcoinaddressWalletIDAsyncWithHttpInfo(walletID, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wallet Bitcoin Addresses Gets a List of Users Bitcoin Deposit Addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinaddressWalletIDAsyncWithHttpInfo (string walletID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoinaddressWalletID");

            var localVarPath = "/v1/user/wallet/coin/address/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoinaddressWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Confirmed Wallet Transactions Gets your Confirmed Wallet Bitcoin Transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        public WalletAddressDataResponse V1userwalletcoindepositconfirmedWalletID (string walletID, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = V1userwalletcoindepositconfirmedWalletIDWithHttpInfo(walletID, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirmed Wallet Transactions Gets your Confirmed Wallet Bitcoin Transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        public ApiResponse< WalletAddressDataResponse > V1userwalletcoindepositconfirmedWalletIDWithHttpInfo (string walletID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoindepositconfirmedWalletID");

            var localVarPath = "/v1/user/wallet/coin/deposit/confirmed/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositconfirmedWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Confirmed Wallet Transactions Gets your Confirmed Wallet Bitcoin Transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoindepositconfirmedWalletIDAsync (string walletID, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = await V1userwalletcoindepositconfirmedWalletIDAsyncWithHttpInfo(walletID, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirmed Wallet Transactions Gets your Confirmed Wallet Bitcoin Transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoindepositconfirmedWalletIDAsyncWithHttpInfo (string walletID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoindepositconfirmedWalletID");

            var localVarPath = "/v1/user/wallet/coin/deposit/confirmed/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositconfirmedWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Confirmed Wallet Deposit Gets the total confirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        public WalletAddressDataResponse V1userwalletcoindepositconfirmedall (string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = V1userwalletcoindepositconfirmedallWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirmed Wallet Deposit Gets the total confirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        public ApiResponse< WalletAddressDataResponse > V1userwalletcoindepositconfirmedallWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/deposit/confirmed/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositconfirmedall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Confirmed Wallet Deposit Gets the total confirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoindepositconfirmedallAsync (string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = await V1userwalletcoindepositconfirmedallAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirmed Wallet Deposit Gets the total confirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoindepositconfirmedallAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/deposit/confirmed/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositconfirmedall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Unconfirmed Transactions in Wallet Gets the unconfirmed transactions on an account/ wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns></returns>
        public void V1userwalletcoindepositunconfirmedWalletID (string walletID, string authorization, string accept = null)
        {
             V1userwalletcoindepositunconfirmedWalletIDWithHttpInfo(walletID, authorization, accept);
        }

        /// <summary>
        /// Unconfirmed Transactions in Wallet Gets the unconfirmed transactions on an account/ wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1userwalletcoindepositunconfirmedWalletIDWithHttpInfo (string walletID, string authorization, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoindepositunconfirmedWalletID");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1userwalletcoindepositunconfirmedWalletID");

            var localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositunconfirmedWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unconfirmed Transactions in Wallet Gets the unconfirmed transactions on an account/ wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1userwalletcoindepositunconfirmedWalletIDAsync (string walletID, string authorization, string accept = null)
        {
             await V1userwalletcoindepositunconfirmedWalletIDAsyncWithHttpInfo(walletID, authorization, accept);

        }

        /// <summary>
        /// Unconfirmed Transactions in Wallet Gets the unconfirmed transactions on an account/ wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletID"></param>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1userwalletcoindepositunconfirmedWalletIDAsyncWithHttpInfo (string walletID, string authorization, string accept = null)
        {
            // verify the required parameter 'walletID' is set
            if (walletID == null)
                throw new ApiException(400, "Missing required parameter 'walletID' when calling WalletDataApi->V1userwalletcoindepositunconfirmedWalletID");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1userwalletcoindepositunconfirmedWalletID");

            var localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/{walletID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (walletID != null) localVarPathParams.Add("walletID", Configuration.ApiClient.ParameterToString(walletID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositunconfirmedWalletID", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// All Unconfirmed Deposits Gets the total unconfirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns></returns>
        public void V1userwalletcoindepositunconfirmedall (string authorization = null, string accept = null)
        {
             V1userwalletcoindepositunconfirmedallWithHttpInfo(authorization, accept);
        }

        /// <summary>
        /// All Unconfirmed Deposits Gets the total unconfirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1userwalletcoindepositunconfirmedallWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositunconfirmedall", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// All Unconfirmed Deposits Gets the total unconfirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1userwalletcoindepositunconfirmedallAsync (string authorization = null, string accept = null)
        {
             await V1userwalletcoindepositunconfirmedallAsyncWithHttpInfo(authorization, accept);

        }

        /// <summary>
        /// All Unconfirmed Deposits Gets the total unconfirmed transactions across all accounts and addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1userwalletcoindepositunconfirmedallAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoindepositunconfirmedall", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Wallet Details Gets a List of Users Wallets.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletsDataResponse</returns>
        public WalletsDataResponse V1userwalletcoinwallets (string authorization = null, string accept = null)
        {
             ApiResponse<WalletsDataResponse> localVarResponse = V1userwalletcoinwalletsWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wallet Details Gets a List of Users Wallets.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletsDataResponse</returns>
        public ApiResponse< WalletsDataResponse > V1userwalletcoinwalletsWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoinwallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletsDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletsDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletsDataResponse)));
            
        }

        /// <summary>
        /// Wallet Details Gets a List of Users Wallets.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletsDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletsDataResponse> V1userwalletcoinwalletsAsync (string authorization = null, string accept = null)
        {
             ApiResponse<WalletsDataResponse> localVarResponse = await V1userwalletcoinwalletsAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wallet Details Gets a List of Users Wallets.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletsDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletsDataResponse>> V1userwalletcoinwalletsAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/wallet/coin/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userwalletcoinwallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletsDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletsDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletsDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        public WalletCoinWithdrawDataResponse V1walletwithdrawcancelled (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = V1walletwithdrawcancelledWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        public ApiResponse< WalletCoinWithdrawDataResponse > V1walletwithdrawcancelledWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawcancelled");

            var localVarPath = "/v1/wallet/coin/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Cancelled Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawcancelledAsync (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = await V1walletwithdrawcancelledAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawcancelledAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawcancelled");

            var localVarPath = "/v1/wallet/coin/withdraw/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Completed Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        public WalletCoinWithdrawDataResponse V1walletwithdrawcompleted (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = V1walletwithdrawcompletedWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completed Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        public ApiResponse< WalletCoinWithdrawDataResponse > V1walletwithdrawcompletedWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawcompleted");

            var localVarPath = "/v1/wallet/coin/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Completed Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawcompletedAsync (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = await V1walletwithdrawcompletedAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completed Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawcompletedAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawcompleted");

            var localVarPath = "/v1/wallet/coin/withdraw/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Unverified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        public WalletCoinWithdrawDataResponse V1walletwithdrawunverified (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = V1walletwithdrawunverifiedWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unverified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        public ApiResponse< WalletCoinWithdrawDataResponse > V1walletwithdrawunverifiedWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawunverified");

            var localVarPath = "/v1/wallet/coin/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Unverified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawunverifiedAsync (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = await V1walletwithdrawunverifiedAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unverified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawunverifiedAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawunverified");

            var localVarPath = "/v1/wallet/coin/withdraw/unverified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawunverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Verified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletCoinWithdrawDataResponse</returns>
        public WalletCoinWithdrawDataResponse V1walletwithdrawverified (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = V1walletwithdrawverifiedWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletCoinWithdrawDataResponse</returns>
        public ApiResponse< WalletCoinWithdrawDataResponse > V1walletwithdrawverifiedWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawverified");

            var localVarPath = "/v1/wallet/coin/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

        /// <summary>
        /// Verified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletCoinWithdrawDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletCoinWithdrawDataResponse> V1walletwithdrawverifiedAsync (string authorization, string accept = null)
        {
             ApiResponse<WalletCoinWithdrawDataResponse> localVarResponse = await V1walletwithdrawverifiedAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verified Coin Withdrawals Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletCoinWithdrawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletCoinWithdrawDataResponse>> V1walletwithdrawverifiedAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletDataApi->V1walletwithdrawverified");

            var localVarPath = "/v1/wallet/coin/withdraw/verified";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1walletwithdrawverified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletCoinWithdrawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletCoinWithdrawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletCoinWithdrawDataResponse)));
            
        }

    }
}
