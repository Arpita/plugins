/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeBankActionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankcoinwithdrawinitiate (SendCoin body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankcoinwithdrawinitiateWithHttpInfo (SendCoin body, string authorization = null, string accept = null);
        /// <summary>
        /// Gets a Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankcoinwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID (string withdrawID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDWithHttpInfo (string withdrawID, string authorization = null, string accept = null);
        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankcoinwithdrawverify (Code body, string authorization = null, string accept = null);

        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankcoinwithdrawverifyWithHttpInfo (Code body, string authorization = null, string accept = null);
        /// <summary>
        /// New Bank Link
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link on KYC Verified Accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiataccountnew (NewBankForm body, string authorization = null, string accept = null);

        /// <summary>
        /// New Bank Link
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link on KYC Verified Accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiataccountnewWithHttpInfo (NewBankForm body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Cancels an unverified Exchange Fiat Deposit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatdepositcancelDepositID (string depositID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Cancels an unverified Exchange Fiat Deposit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatdepositcancelDepositIDWithHttpInfo (string depositID, string authorization = null, string accept = null);
        /// <summary>
        /// New Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatdepositnew (NewFiatBankDeposit body, string authorization = null, string accept = null);

        /// <summary>
        /// New Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatdepositnewWithHttpInfo (NewFiatBankDeposit body, string authorization = null, string accept = null);
        /// <summary>
        /// Initiate Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatwithdrawinitiate (WithdrawFiat body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatwithdrawinitiateWithHttpInfo (WithdrawFiat body, string authorization = null, string accept = null);
        /// <summary>
        /// Gets a Fiat Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Fiat Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID (string withdrawID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDWithHttpInfo (string withdrawID, string authorization = null, string accept = null);
        /// <summary>
        /// Verify Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangebankfiatwithdrawverify (Code body, string authorization = null, string accept = null);

        /// <summary>
        /// Verify Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangebankfiatwithdrawverifyWithHttpInfo (Code body, string authorization = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawinitiateAsync (SendCoin body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawinitiateAsyncWithHttpInfo (SendCoin body, string authorization = null, string accept = null);
        /// <summary>
        /// Gets a Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsync (string withdrawID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo (string withdrawID, string authorization = null, string accept = null);
        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawverifyAsync (Code body, string authorization = null, string accept = null);

        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawverifyAsyncWithHttpInfo (Code body, string authorization = null, string accept = null);
        /// <summary>
        /// New Bank Link
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link on KYC Verified Accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiataccountnewAsync (NewBankForm body, string authorization = null, string accept = null);

        /// <summary>
        /// New Bank Link
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link on KYC Verified Accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiataccountnewAsyncWithHttpInfo (NewBankForm body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Cancels an unverified Exchange Fiat Deposit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatdepositcancelDepositIDAsync (string depositID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Cancels an unverified Exchange Fiat Deposit.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatdepositcancelDepositIDAsyncWithHttpInfo (string depositID, string authorization = null, string accept = null);
        /// <summary>
        /// New Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatdepositnewAsync (NewFiatBankDeposit body, string authorization = null, string accept = null);

        /// <summary>
        /// New Exchange Fiat Deposit
        /// </summary>
        /// <remarks>
        /// Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatdepositnewAsyncWithHttpInfo (NewFiatBankDeposit body, string authorization = null, string accept = null);
        /// <summary>
        /// Initiate Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawinitiateAsync (WithdrawFiat body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawinitiateAsyncWithHttpInfo (WithdrawFiat body, string authorization = null, string accept = null);
        /// <summary>
        /// Gets a Fiat Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Fiat Verification Code.
        /// </summary>
        /// <remarks>
        /// Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsync (string withdrawID, string authorization = null, string accept = null);

        /// <summary>
        /// Cancel Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo (string withdrawID, string authorization = null, string accept = null);
        /// <summary>
        /// Verify Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawverifyAsync (Code body, string authorization = null, string accept = null);

        /// <summary>
        /// Verify Fiat Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawverifyAsyncWithHttpInfo (Code body, string authorization = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeBankActionsApi : IExchangeBankActionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeBankActionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeBankActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeBankActionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankcoinwithdrawinitiate (SendCoin body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankcoinwithdrawinitiateWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankcoinwithdrawinitiateWithHttpInfo (SendCoin body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawinitiate");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawinitiate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawinitiateAsync (SendCoin body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankcoinwithdrawinitiateAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawinitiateAsyncWithHttpInfo (SendCoin body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawinitiate");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawinitiate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Verification Code. Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankcoinwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a Verification Code. Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawnewVerifycode");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawnewVerifycode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Verification Code. Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankcoinwithdrawnewVerifycodeAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a Verification Code. Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawnewVerifycode");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawnewVerifycode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID (string withdrawID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDWithHttpInfo(withdrawID, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDWithHttpInfo (string withdrawID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'withdrawID' is set
            if (withdrawID == null)
                throw new ApiException(400, "Missing required parameter 'withdrawID' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (withdrawID != null) localVarPathParams.Add("withdrawID", Configuration.ApiClient.ParameterToString(withdrawID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsync (string withdrawID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo(withdrawID, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo (string withdrawID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'withdrawID' is set
            if (withdrawID == null)
                throw new ApiException(400, "Missing required parameter 'withdrawID' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (withdrawID != null) localVarPathParams.Add("withdrawID", Configuration.ApiClient.ParameterToString(withdrawID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawunverifiedcancelWithdrawID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankcoinwithdrawverify (Code body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankcoinwithdrawverifyWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankcoinwithdrawverifyWithHttpInfo (Code body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawverify");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawverify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankcoinwithdrawverifyAsync (Code body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankcoinwithdrawverifyAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankcoinwithdrawverifyAsyncWithHttpInfo (Code body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankcoinwithdrawverify");

            var localVarPath = "/v1/user/exchange/bank/coin/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankcoinwithdrawverify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Bank Link Submits a New Bank Link on KYC Verified Accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiataccountnew (NewBankForm body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiataccountnewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// New Bank Link Submits a New Bank Link on KYC Verified Accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiataccountnewWithHttpInfo (NewBankForm body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiataccountnew");

            var localVarPath = "/v1/user/exchange/bank/fiat/account/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiataccountnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Bank Link Submits a New Bank Link on KYC Verified Accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiataccountnewAsync (NewBankForm body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiataccountnewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// New Bank Link Submits a New Bank Link on KYC Verified Accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiataccountnewAsyncWithHttpInfo (NewBankForm body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiataccountnew");

            var localVarPath = "/v1/user/exchange/bank/fiat/account/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiataccountnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit Cancels an unverified Exchange Fiat Deposit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatdepositcancelDepositID (string depositID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatdepositcancelDepositIDWithHttpInfo(depositID, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit Cancels an unverified Exchange Fiat Deposit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatdepositcancelDepositIDWithHttpInfo (string depositID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'depositID' is set
            if (depositID == null)
                throw new ApiException(400, "Missing required parameter 'depositID' when calling ExchangeBankActionsApi->V1userexchangebankfiatdepositcancelDepositID");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancel/{depositID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (depositID != null) localVarPathParams.Add("depositID", Configuration.ApiClient.ParameterToString(depositID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositcancelDepositID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit Cancels an unverified Exchange Fiat Deposit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatdepositcancelDepositIDAsync (string depositID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatdepositcancelDepositIDAsyncWithHttpInfo(depositID, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Unverified Exchange Fiat Deposit Cancels an unverified Exchange Fiat Deposit.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatdepositcancelDepositIDAsyncWithHttpInfo (string depositID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'depositID' is set
            if (depositID == null)
                throw new ApiException(400, "Missing required parameter 'depositID' when calling ExchangeBankActionsApi->V1userexchangebankfiatdepositcancelDepositID");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancel/{depositID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (depositID != null) localVarPathParams.Add("depositID", Configuration.ApiClient.ParameterToString(depositID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositcancelDepositID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Exchange Fiat Deposit Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatdepositnew (NewFiatBankDeposit body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatdepositnewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// New Exchange Fiat Deposit Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatdepositnewWithHttpInfo (NewFiatBankDeposit body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatdepositnew");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Exchange Fiat Deposit Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatdepositnewAsync (NewFiatBankDeposit body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatdepositnewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// New Exchange Fiat Deposit Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatdepositnewAsyncWithHttpInfo (NewFiatBankDeposit body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatdepositnew");

            var localVarPath = "/v1/user/exchange/bank/fiat/deposit/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatdepositnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Initiate Fiat Withdrawal The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatwithdrawinitiate (WithdrawFiat body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatwithdrawinitiateWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Fiat Withdrawal The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatwithdrawinitiateWithHttpInfo (WithdrawFiat body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawinitiate");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawinitiate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Initiate Fiat Withdrawal The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawinitiateAsync (WithdrawFiat body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatwithdrawinitiateAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Fiat Withdrawal The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawinitiateAsyncWithHttpInfo (WithdrawFiat body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawinitiate");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawinitiate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Fiat Verification Code. Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a Fiat Verification Code. Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawnewVerifycode");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawnewVerifycode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Fiat Verification Code. Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatwithdrawnewVerifycodeAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a Fiat Verification Code. Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawnewVerifycode");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawnewVerifycode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Fiat Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID (string withdrawID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDWithHttpInfo(withdrawID, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Fiat Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDWithHttpInfo (string withdrawID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'withdrawID' is set
            if (withdrawID == null)
                throw new ApiException(400, "Missing required parameter 'withdrawID' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (withdrawID != null) localVarPathParams.Add("withdrawID", Configuration.ApiClient.ParameterToString(withdrawID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Fiat Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsync (string withdrawID, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo(withdrawID, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Fiat Withdrawal Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsyncWithHttpInfo (string withdrawID, string authorization = null, string accept = null)
        {
            // verify the required parameter 'withdrawID' is set
            if (withdrawID == null)
                throw new ApiException(400, "Missing required parameter 'withdrawID' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (withdrawID != null) localVarPathParams.Add("withdrawID", Configuration.ApiClient.ParameterToString(withdrawID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawunverifiedcancelWithdrawID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Fiat Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangebankfiatwithdrawverify (Code body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangebankfiatwithdrawverifyWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Fiat Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangebankfiatwithdrawverifyWithHttpInfo (Code body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawverify");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawverify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Fiat Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangebankfiatwithdrawverifyAsync (Code body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangebankfiatwithdrawverifyAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Fiat Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangebankfiatwithdrawverifyAsyncWithHttpInfo (Code body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeBankActionsApi->V1userexchangebankfiatwithdrawverify");

            var localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebankfiatwithdrawverify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

    }
}
