/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeTradeDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lowest Ask
        /// </summary>
        /// <remarks>
        /// Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        RateDataResponse V1exchangeasklow (string accept = null);

        /// <summary>
        /// Lowest Ask
        /// </summary>
        /// <remarks>
        /// Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        ApiResponse<RateDataResponse> V1exchangeasklowWithHttpInfo (string accept = null);
        /// <summary>
        /// All Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateVolDataResponse</returns>
        RateVolDataResponse V1exchangeaskorders (string accept = null);

        /// <summary>
        /// All Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateVolDataResponse</returns>
        ApiResponse<RateVolDataResponse> V1exchangeaskordersWithHttpInfo (string accept = null);
        /// <summary>
        /// Returns the Highest Bid in the Order Book
        /// </summary>
        /// <remarks>
        /// Highest Bid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        RateDataResponse V1exchangebidhigh (string accept = null);

        /// <summary>
        /// Returns the Highest Bid in the Order Book
        /// </summary>
        /// <remarks>
        /// Highest Bid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        ApiResponse<RateDataResponse> V1exchangebidhighWithHttpInfo (string accept = null);
        /// <summary>
        /// All Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateVolDataResponse</returns>
        RateVolDataResponse V1exchangebidorders (string accept = null);

        /// <summary>
        /// All Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateVolDataResponse</returns>
        ApiResponse<RateVolDataResponse> V1exchangebidordersWithHttpInfo (string accept = null);
        /// <summary>
        /// Last Trade
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>LastTradeDataResponse</returns>
        LastTradeDataResponse V1exchangelastTrade (string accept = null);

        /// <summary>
        /// Last Trade
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of LastTradeDataResponse</returns>
        ApiResponse<LastTradeDataResponse> V1exchangelastTradeWithHttpInfo (string accept = null);
        /// <summary>
        /// Max 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDiffDataResponse</returns>
        RateDiffDataResponse V1exchangemax24Hr (string accept = null);

        /// <summary>
        /// Max 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDiffDataResponse</returns>
        ApiResponse<RateDiffDataResponse> V1exchangemax24HrWithHttpInfo (string accept = null);
        /// <summary>
        /// Min 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDiffDataResponse</returns>
        RateDiffDataResponse V1exchangemin24Hr (string accept = null);

        /// <summary>
        /// Min 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDiffDataResponse</returns>
        ApiResponse<RateDiffDataResponse> V1exchangemin24HrWithHttpInfo (string accept = null);
        /// <summary>
        /// Exchange Ticker
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardTickerResultData</returns>
        StandardTickerResultData V1exchangeticker (string accept = null);

        /// <summary>
        /// Exchange Ticker
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardTickerResultData</returns>
        ApiResponse<StandardTickerResultData> V1exchangetickerWithHttpInfo (string accept = null);
        /// <summary>
        /// Cancelled User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangeaskcancelled (string authorization, string accept = null);

        /// <summary>
        /// Cancelled User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangeaskcancelledWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangeaskcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangeaskcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Pending User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangeaskpending (string authorization, string accept = null);

        /// <summary>
        /// Pending User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangeaskpendingWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangebidcancelled (string authorization, string accept = null);

        /// <summary>
        /// Cancelled User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangebidcancelledWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangebidcompleted (string authorization, string accept = null);

        /// <summary>
        /// Completed User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangebidcompletedWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Pending User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        OrderDataResponse V1userexchangebidpending (string authorization, string accept = null);

        /// <summary>
        /// Pending User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        ApiResponse<OrderDataResponse> V1userexchangebidpendingWithHttpInfo (string authorization, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Lowest Ask
        /// </summary>
        /// <remarks>
        /// Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        System.Threading.Tasks.Task<RateDataResponse> V1exchangeasklowAsync (string accept = null);

        /// <summary>
        /// Lowest Ask
        /// </summary>
        /// <remarks>
        /// Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1exchangeasklowAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// All Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateVolDataResponse</returns>
        System.Threading.Tasks.Task<RateVolDataResponse> V1exchangeaskordersAsync (string accept = null);

        /// <summary>
        /// All Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateVolDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateVolDataResponse>> V1exchangeaskordersAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Returns the Highest Bid in the Order Book
        /// </summary>
        /// <remarks>
        /// Highest Bid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        System.Threading.Tasks.Task<RateDataResponse> V1exchangebidhighAsync (string accept = null);

        /// <summary>
        /// Returns the Highest Bid in the Order Book
        /// </summary>
        /// <remarks>
        /// Highest Bid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1exchangebidhighAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// All Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateVolDataResponse</returns>
        System.Threading.Tasks.Task<RateVolDataResponse> V1exchangebidordersAsync (string accept = null);

        /// <summary>
        /// All Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateVolDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateVolDataResponse>> V1exchangebidordersAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Last Trade
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of LastTradeDataResponse</returns>
        System.Threading.Tasks.Task<LastTradeDataResponse> V1exchangelastTradeAsync (string accept = null);

        /// <summary>
        /// Last Trade
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (LastTradeDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LastTradeDataResponse>> V1exchangelastTradeAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Max 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDiffDataResponse</returns>
        System.Threading.Tasks.Task<RateDiffDataResponse> V1exchangemax24HrAsync (string accept = null);

        /// <summary>
        /// Max 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDiffDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDiffDataResponse>> V1exchangemax24HrAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Min 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDiffDataResponse</returns>
        System.Threading.Tasks.Task<RateDiffDataResponse> V1exchangemin24HrAsync (string accept = null);

        /// <summary>
        /// Min 24 Hour Rate
        /// </summary>
        /// <remarks>
        /// Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDiffDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RateDiffDataResponse>> V1exchangemin24HrAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Exchange Ticker
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardTickerResultData</returns>
        System.Threading.Tasks.Task<StandardTickerResultData> V1exchangetickerAsync (string accept = null);

        /// <summary>
        /// Exchange Ticker
        /// </summary>
        /// <remarks>
        /// Returns a summary of data from the Exchange.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardTickerResultData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardTickerResultData>> V1exchangetickerAsyncWithHttpInfo (string accept = null);
        /// <summary>
        /// Cancelled User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskcancelledAsync (string authorization, string accept = null);

        /// <summary>
        /// Cancelled User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskcancelledAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);

        /// <summary>
        /// Completed User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null);
        /// <summary>
        /// Pending User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskpendingAsync (string authorization, string accept = null);

        /// <summary>
        /// Pending User Sell Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskpendingAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Cancelled User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidcancelledAsync (string authorization, string accept = null);

        /// <summary>
        /// Cancelled User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidcancelledAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Completed User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidcompletedAsync (string authorization, string accept = null);

        /// <summary>
        /// Completed User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidcompletedAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Pending User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidpendingAsync (string authorization, string accept = null);

        /// <summary>
        /// Pending User Buy Orders
        /// </summary>
        /// <remarks>
        /// Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidpendingAsyncWithHttpInfo (string authorization, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeTradeDataApi : IExchangeTradeDataApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradeDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeTradeDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradeDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeTradeDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Lowest Ask Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        public RateDataResponse V1exchangeasklow (string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = V1exchangeasklowWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lowest Ask Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        public ApiResponse< RateDataResponse > V1exchangeasklowWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ask/low";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeasklow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Lowest Ask Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDataResponse> V1exchangeasklowAsync (string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = await V1exchangeasklowAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lowest Ask Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1exchangeasklowAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ask/low";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeasklow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// All Sell Orders Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateVolDataResponse</returns>
        public RateVolDataResponse V1exchangeaskorders (string accept = null)
        {
             ApiResponse<RateVolDataResponse> localVarResponse = V1exchangeaskordersWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All Sell Orders Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateVolDataResponse</returns>
        public ApiResponse< RateVolDataResponse > V1exchangeaskordersWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ask/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeaskorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateVolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateVolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateVolDataResponse)));
            
        }

        /// <summary>
        /// All Sell Orders Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateVolDataResponse</returns>
        public async System.Threading.Tasks.Task<RateVolDataResponse> V1exchangeaskordersAsync (string accept = null)
        {
             ApiResponse<RateVolDataResponse> localVarResponse = await V1exchangeaskordersAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All Sell Orders Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateVolDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateVolDataResponse>> V1exchangeaskordersAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ask/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeaskorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateVolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateVolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateVolDataResponse)));
            
        }

        /// <summary>
        /// Returns the Highest Bid in the Order Book Highest Bid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDataResponse</returns>
        public RateDataResponse V1exchangebidhigh (string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = V1exchangebidhighWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Highest Bid in the Order Book Highest Bid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDataResponse</returns>
        public ApiResponse< RateDataResponse > V1exchangebidhighWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/bid/high";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangebidhigh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// Returns the Highest Bid in the Order Book Highest Bid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDataResponse> V1exchangebidhighAsync (string accept = null)
        {
             ApiResponse<RateDataResponse> localVarResponse = await V1exchangebidhighAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Highest Bid in the Order Book Highest Bid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDataResponse>> V1exchangebidhighAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/bid/high";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangebidhigh", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDataResponse)));
            
        }

        /// <summary>
        /// All Buy Orders Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateVolDataResponse</returns>
        public RateVolDataResponse V1exchangebidorders (string accept = null)
        {
             ApiResponse<RateVolDataResponse> localVarResponse = V1exchangebidordersWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All Buy Orders Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateVolDataResponse</returns>
        public ApiResponse< RateVolDataResponse > V1exchangebidordersWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/bid/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangebidorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateVolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateVolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateVolDataResponse)));
            
        }

        /// <summary>
        /// All Buy Orders Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateVolDataResponse</returns>
        public async System.Threading.Tasks.Task<RateVolDataResponse> V1exchangebidordersAsync (string accept = null)
        {
             ApiResponse<RateVolDataResponse> localVarResponse = await V1exchangebidordersAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All Buy Orders Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateVolDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateVolDataResponse>> V1exchangebidordersAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/bid/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangebidorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateVolDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateVolDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateVolDataResponse)));
            
        }

        /// <summary>
        /// Last Trade Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>LastTradeDataResponse</returns>
        public LastTradeDataResponse V1exchangelastTrade (string accept = null)
        {
             ApiResponse<LastTradeDataResponse> localVarResponse = V1exchangelastTradeWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Last Trade Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of LastTradeDataResponse</returns>
        public ApiResponse< LastTradeDataResponse > V1exchangelastTradeWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/lastTrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangelastTrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastTradeDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LastTradeDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastTradeDataResponse)));
            
        }

        /// <summary>
        /// Last Trade Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of LastTradeDataResponse</returns>
        public async System.Threading.Tasks.Task<LastTradeDataResponse> V1exchangelastTradeAsync (string accept = null)
        {
             ApiResponse<LastTradeDataResponse> localVarResponse = await V1exchangelastTradeAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Last Trade Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (LastTradeDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LastTradeDataResponse>> V1exchangelastTradeAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/lastTrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangelastTrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastTradeDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LastTradeDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastTradeDataResponse)));
            
        }

        /// <summary>
        /// Max 24 Hour Rate Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDiffDataResponse</returns>
        public RateDiffDataResponse V1exchangemax24Hr (string accept = null)
        {
             ApiResponse<RateDiffDataResponse> localVarResponse = V1exchangemax24HrWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Max 24 Hour Rate Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDiffDataResponse</returns>
        public ApiResponse< RateDiffDataResponse > V1exchangemax24HrWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/max24Hr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangemax24Hr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDiffDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDiffDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDiffDataResponse)));
            
        }

        /// <summary>
        /// Max 24 Hour Rate Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDiffDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDiffDataResponse> V1exchangemax24HrAsync (string accept = null)
        {
             ApiResponse<RateDiffDataResponse> localVarResponse = await V1exchangemax24HrAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Max 24 Hour Rate Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDiffDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDiffDataResponse>> V1exchangemax24HrAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/max24Hr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangemax24Hr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDiffDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDiffDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDiffDataResponse)));
            
        }

        /// <summary>
        /// Min 24 Hour Rate Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>RateDiffDataResponse</returns>
        public RateDiffDataResponse V1exchangemin24Hr (string accept = null)
        {
             ApiResponse<RateDiffDataResponse> localVarResponse = V1exchangemin24HrWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Min 24 Hour Rate Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of RateDiffDataResponse</returns>
        public ApiResponse< RateDiffDataResponse > V1exchangemin24HrWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/min24Hr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangemin24Hr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDiffDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDiffDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDiffDataResponse)));
            
        }

        /// <summary>
        /// Min 24 Hour Rate Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of RateDiffDataResponse</returns>
        public async System.Threading.Tasks.Task<RateDiffDataResponse> V1exchangemin24HrAsync (string accept = null)
        {
             ApiResponse<RateDiffDataResponse> localVarResponse = await V1exchangemin24HrAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Min 24 Hour Rate Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (RateDiffDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RateDiffDataResponse>> V1exchangemin24HrAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/min24Hr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangemin24Hr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RateDiffDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RateDiffDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RateDiffDataResponse)));
            
        }

        /// <summary>
        /// Exchange Ticker Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardTickerResultData</returns>
        public StandardTickerResultData V1exchangeticker (string accept = null)
        {
             ApiResponse<StandardTickerResultData> localVarResponse = V1exchangetickerWithHttpInfo(accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Ticker Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardTickerResultData</returns>
        public ApiResponse< StandardTickerResultData > V1exchangetickerWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeticker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardTickerResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardTickerResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardTickerResultData)));
            
        }

        /// <summary>
        /// Exchange Ticker Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardTickerResultData</returns>
        public async System.Threading.Tasks.Task<StandardTickerResultData> V1exchangetickerAsync (string accept = null)
        {
             ApiResponse<StandardTickerResultData> localVarResponse = await V1exchangetickerAsyncWithHttpInfo(accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Ticker Returns a summary of data from the Exchange.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardTickerResultData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardTickerResultData>> V1exchangetickerAsyncWithHttpInfo (string accept = null)
        {

            var localVarPath = "/v1/exchange/ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1exchangeticker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardTickerResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardTickerResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardTickerResultData)));
            
        }

        /// <summary>
        /// Cancelled User Sell Orders Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangeaskcancelled (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangeaskcancelledWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled User Sell Orders Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangeaskcancelledWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskcancelled");

            var localVarPath = "/v1/user/exchange/ask/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Cancelled User Sell Orders Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskcancelledAsync (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangeaskcancelledAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled User Sell Orders Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskcancelledAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskcancelled");

            var localVarPath = "/v1/user/exchange/ask/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Completed User Sell Orders Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangeaskcompleted (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangeaskcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completed User Sell Orders Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangeaskcompletedWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskcompleted");

            var localVarPath = "/v1/user/exchange/ask/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Completed User Sell Orders Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskcompletedAsync (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangeaskcompletedAsyncWithHttpInfo(authorization, from, to, max, offset, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completed User Sell Orders Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="from">From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)</param>
        /// <param name="to">To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)</param>
        /// <param name="max">Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)</param>
        /// <param name="offset">Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskcompletedAsyncWithHttpInfo (string authorization, long? from = null, long? to = null, int? max = null, long? offset = null, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskcompleted");

            var localVarPath = "/v1/user/exchange/ask/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (max != null) localVarQueryParams.Add("max", Configuration.ApiClient.ParameterToString(max)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Pending User Sell Orders Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangeaskpending (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangeaskpendingWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pending User Sell Orders Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangeaskpendingWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskpending");

            var localVarPath = "/v1/user/exchange/ask/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskpending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Pending User Sell Orders Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangeaskpendingAsync (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangeaskpendingAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pending User Sell Orders Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangeaskpendingAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangeaskpending");

            var localVarPath = "/v1/user/exchange/ask/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskpending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Cancelled User Buy Orders Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangebidcancelled (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangebidcancelledWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled User Buy Orders Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangebidcancelledWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidcancelled");

            var localVarPath = "/v1/user/exchange/bid/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Cancelled User Buy Orders Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidcancelledAsync (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangebidcancelledAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelled User Buy Orders Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidcancelledAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidcancelled");

            var localVarPath = "/v1/user/exchange/bid/cancelled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcancelled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Completed User Buy Orders Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangebidcompleted (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangebidcompletedWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Completed User Buy Orders Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangebidcompletedWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidcompleted");

            var localVarPath = "/v1/user/exchange/bid/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Completed User Buy Orders Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidcompletedAsync (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangebidcompletedAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Completed User Buy Orders Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidcompletedAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidcompleted");

            var localVarPath = "/v1/user/exchange/bid/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Pending User Buy Orders Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>OrderDataResponse</returns>
        public OrderDataResponse V1userexchangebidpending (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = V1userexchangebidpendingWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pending User Buy Orders Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of OrderDataResponse</returns>
        public ApiResponse< OrderDataResponse > V1userexchangebidpendingWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidpending");

            var localVarPath = "/v1/user/exchange/bid/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidpending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

        /// <summary>
        /// Pending User Buy Orders Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of OrderDataResponse</returns>
        public async System.Threading.Tasks.Task<OrderDataResponse> V1userexchangebidpendingAsync (string authorization, string accept = null)
        {
             ApiResponse<OrderDataResponse> localVarResponse = await V1userexchangebidpendingAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pending User Buy Orders Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (OrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDataResponse>> V1userexchangebidpendingAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExchangeTradeDataApi->V1userexchangebidpending");

            var localVarPath = "/v1/user/exchange/bid/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidpending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDataResponse)));
            
        }

    }
}
