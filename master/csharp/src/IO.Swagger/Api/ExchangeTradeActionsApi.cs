/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeTradeActionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Open Sell Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>SuccessCancelDataResponse</returns>
        SuccessCancelDataResponse V1userexchangeaskcancelOrderID (string orderID, string authorization = null);

        /// <summary>
        /// Cancel Open Sell Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>ApiResponse of SuccessCancelDataResponse</returns>
        ApiResponse<SuccessCancelDataResponse> V1userexchangeaskcancelOrderIDWithHttpInfo (string orderID, string authorization = null);
        /// <summary>
        /// BTC Sell Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        SuccessOrderDataResponse V1userexchangeasknew (RateVolData body, string authorization = null, string accept = null);

        /// <summary>
        /// BTC Sell Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        ApiResponse<SuccessOrderDataResponse> V1userexchangeasknewWithHttpInfo (RateVolData body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Open Buy Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>SuccessCancelDataResponse</returns>
        SuccessCancelDataResponse V1userexchangebidcancelOrderID (string orderID, string authorization = null);

        /// <summary>
        /// Cancel Open Buy Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>ApiResponse of SuccessCancelDataResponse</returns>
        ApiResponse<SuccessCancelDataResponse> V1userexchangebidcancelOrderIDWithHttpInfo (string orderID, string authorization = null);
        /// <summary>
        /// BTC Buy Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        SuccessOrderDataResponse V1userexchangebidnew (RateVolData body, string authorization = null, string accept = null);

        /// <summary>
        /// BTC Buy Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        ApiResponse<SuccessOrderDataResponse> V1userexchangebidnewWithHttpInfo (RateVolData body, string authorization = null, string accept = null);
        /// <summary>
        /// Instantly Buy BTC
        /// </summary>
        /// <remarks>
        /// Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        SuccessOrderDataResponse V1userexchangeinstantbuy (MinFiat body, string authorization = null, string accept = null);

        /// <summary>
        /// Instantly Buy BTC
        /// </summary>
        /// <remarks>
        /// Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        ApiResponse<SuccessOrderDataResponse> V1userexchangeinstantbuyWithHttpInfo (MinFiat body, string authorization = null, string accept = null);
        /// <summary>
        /// Instantly Sell BTC
        /// </summary>
        /// <remarks>
        /// Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        SuccessOrderDataResponse V1userexchangeinstantsell (MaxVol body, string authorization = null, string accept = null);

        /// <summary>
        /// Instantly Sell BTC
        /// </summary>
        /// <remarks>
        /// Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        ApiResponse<SuccessOrderDataResponse> V1userexchangeinstantsellWithHttpInfo (MaxVol body, string authorization = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Open Sell Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of SuccessCancelDataResponse</returns>
        System.Threading.Tasks.Task<SuccessCancelDataResponse> V1userexchangeaskcancelOrderIDAsync (string orderID, string authorization = null);

        /// <summary>
        /// Cancel Open Sell Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of ApiResponse (SuccessCancelDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessCancelDataResponse>> V1userexchangeaskcancelOrderIDAsyncWithHttpInfo (string orderID, string authorization = null);
        /// <summary>
        /// BTC Sell Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeasknewAsync (RateVolData body, string authorization = null, string accept = null);

        /// <summary>
        /// BTC Sell Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeasknewAsyncWithHttpInfo (RateVolData body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Open Buy Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of SuccessCancelDataResponse</returns>
        System.Threading.Tasks.Task<SuccessCancelDataResponse> V1userexchangebidcancelOrderIDAsync (string orderID, string authorization = null);

        /// <summary>
        /// Cancel Open Buy Order
        /// </summary>
        /// <remarks>
        /// Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of ApiResponse (SuccessCancelDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessCancelDataResponse>> V1userexchangebidcancelOrderIDAsyncWithHttpInfo (string orderID, string authorization = null);
        /// <summary>
        /// BTC Buy Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangebidnewAsync (RateVolData body, string authorization = null, string accept = null);

        /// <summary>
        /// BTC Buy Order
        /// </summary>
        /// <remarks>
        /// Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangebidnewAsyncWithHttpInfo (RateVolData body, string authorization = null, string accept = null);
        /// <summary>
        /// Instantly Buy BTC
        /// </summary>
        /// <remarks>
        /// Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeinstantbuyAsync (MinFiat body, string authorization = null, string accept = null);

        /// <summary>
        /// Instantly Buy BTC
        /// </summary>
        /// <remarks>
        /// Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeinstantbuyAsyncWithHttpInfo (MinFiat body, string authorization = null, string accept = null);
        /// <summary>
        /// Instantly Sell BTC
        /// </summary>
        /// <remarks>
        /// Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeinstantsellAsync (MaxVol body, string authorization = null, string accept = null);

        /// <summary>
        /// Instantly Sell BTC
        /// </summary>
        /// <remarks>
        /// Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeinstantsellAsyncWithHttpInfo (MaxVol body, string authorization = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeTradeActionsApi : IExchangeTradeActionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradeActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeTradeActionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeTradeActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangeTradeActionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel Open Sell Order Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>SuccessCancelDataResponse</returns>
        public SuccessCancelDataResponse V1userexchangeaskcancelOrderID (string orderID, string authorization = null)
        {
             ApiResponse<SuccessCancelDataResponse> localVarResponse = V1userexchangeaskcancelOrderIDWithHttpInfo(orderID, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Open Sell Order Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>ApiResponse of SuccessCancelDataResponse</returns>
        public ApiResponse< SuccessCancelDataResponse > V1userexchangeaskcancelOrderIDWithHttpInfo (string orderID, string authorization = null)
        {
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->V1userexchangeaskcancelOrderID");

            var localVarPath = "/v1/user/exchange/ask/cancel/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcancelOrderID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessCancelDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessCancelDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessCancelDataResponse)));
            
        }

        /// <summary>
        /// Cancel Open Sell Order Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of SuccessCancelDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessCancelDataResponse> V1userexchangeaskcancelOrderIDAsync (string orderID, string authorization = null)
        {
             ApiResponse<SuccessCancelDataResponse> localVarResponse = await V1userexchangeaskcancelOrderIDAsyncWithHttpInfo(orderID, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Open Sell Order Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of ApiResponse (SuccessCancelDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessCancelDataResponse>> V1userexchangeaskcancelOrderIDAsyncWithHttpInfo (string orderID, string authorization = null)
        {
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->V1userexchangeaskcancelOrderID");

            var localVarPath = "/v1/user/exchange/ask/cancel/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeaskcancelOrderID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessCancelDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessCancelDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessCancelDataResponse)));
            
        }

        /// <summary>
        /// BTC Sell Order Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        public SuccessOrderDataResponse V1userexchangeasknew (RateVolData body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = V1userexchangeasknewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// BTC Sell Order Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        public ApiResponse< SuccessOrderDataResponse > V1userexchangeasknewWithHttpInfo (RateVolData body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeasknew");

            var localVarPath = "/v1/user/exchange/ask/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeasknew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// BTC Sell Order Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeasknewAsync (RateVolData body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = await V1userexchangeasknewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// BTC Sell Order Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeasknewAsyncWithHttpInfo (RateVolData body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeasknew");

            var localVarPath = "/v1/user/exchange/ask/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeasknew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// Cancel Open Buy Order Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>SuccessCancelDataResponse</returns>
        public SuccessCancelDataResponse V1userexchangebidcancelOrderID (string orderID, string authorization = null)
        {
             ApiResponse<SuccessCancelDataResponse> localVarResponse = V1userexchangebidcancelOrderIDWithHttpInfo(orderID, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Open Buy Order Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>ApiResponse of SuccessCancelDataResponse</returns>
        public ApiResponse< SuccessCancelDataResponse > V1userexchangebidcancelOrderIDWithHttpInfo (string orderID, string authorization = null)
        {
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->V1userexchangebidcancelOrderID");

            var localVarPath = "/v1/user/exchange/bid/cancel/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcancelOrderID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessCancelDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessCancelDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessCancelDataResponse)));
            
        }

        /// <summary>
        /// Cancel Open Buy Order Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of SuccessCancelDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessCancelDataResponse> V1userexchangebidcancelOrderIDAsync (string orderID, string authorization = null)
        {
             ApiResponse<SuccessCancelDataResponse> localVarResponse = await V1userexchangebidcancelOrderIDAsyncWithHttpInfo(orderID, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Open Buy Order Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderID"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <returns>Task of ApiResponse (SuccessCancelDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessCancelDataResponse>> V1userexchangebidcancelOrderIDAsyncWithHttpInfo (string orderID, string authorization = null)
        {
            // verify the required parameter 'orderID' is set
            if (orderID == null)
                throw new ApiException(400, "Missing required parameter 'orderID' when calling ExchangeTradeActionsApi->V1userexchangebidcancelOrderID");

            var localVarPath = "/v1/user/exchange/bid/cancel/{orderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (orderID != null) localVarPathParams.Add("orderID", Configuration.ApiClient.ParameterToString(orderID)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidcancelOrderID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessCancelDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessCancelDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessCancelDataResponse)));
            
        }

        /// <summary>
        /// BTC Buy Order Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        public SuccessOrderDataResponse V1userexchangebidnew (RateVolData body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = V1userexchangebidnewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// BTC Buy Order Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        public ApiResponse< SuccessOrderDataResponse > V1userexchangebidnewWithHttpInfo (RateVolData body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangebidnew");

            var localVarPath = "/v1/user/exchange/bid/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// BTC Buy Order Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangebidnewAsync (RateVolData body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = await V1userexchangebidnewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// BTC Buy Order Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangebidnewAsyncWithHttpInfo (RateVolData body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangebidnew");

            var localVarPath = "/v1/user/exchange/bid/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangebidnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// Instantly Buy BTC Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        public SuccessOrderDataResponse V1userexchangeinstantbuy (MinFiat body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = V1userexchangeinstantbuyWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instantly Buy BTC Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        public ApiResponse< SuccessOrderDataResponse > V1userexchangeinstantbuyWithHttpInfo (MinFiat body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeinstantbuy");

            var localVarPath = "/v1/user/exchange/instant/buy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeinstantbuy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// Instantly Buy BTC Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeinstantbuyAsync (MinFiat body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = await V1userexchangeinstantbuyAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instantly Buy BTC Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeinstantbuyAsyncWithHttpInfo (MinFiat body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeinstantbuy");

            var localVarPath = "/v1/user/exchange/instant/buy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeinstantbuy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// Instantly Sell BTC Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessOrderDataResponse</returns>
        public SuccessOrderDataResponse V1userexchangeinstantsell (MaxVol body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = V1userexchangeinstantsellWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instantly Sell BTC Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessOrderDataResponse</returns>
        public ApiResponse< SuccessOrderDataResponse > V1userexchangeinstantsellWithHttpInfo (MaxVol body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeinstantsell");

            var localVarPath = "/v1/user/exchange/instant/sell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeinstantsell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

        /// <summary>
        /// Instantly Sell BTC Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessOrderDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccessOrderDataResponse> V1userexchangeinstantsellAsync (MaxVol body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessOrderDataResponse> localVarResponse = await V1userexchangeinstantsellAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instantly Sell BTC Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessOrderDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessOrderDataResponse>> V1userexchangeinstantsellAsyncWithHttpInfo (MaxVol body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ExchangeTradeActionsApi->V1userexchangeinstantsell");

            var localVarPath = "/v1/user/exchange/instant/sell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1userexchangeinstantsell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessOrderDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessOrderDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessOrderDataResponse)));
            
        }

    }
}
