/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>BankSummaryDataResponse</returns>
        BankSummaryDataResponse V1exchangebanksummary (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of BankSummaryDataResponse</returns>
        ApiResponse<BankSummaryDataResponse> V1exchangebanksummaryWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Coin Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users coin fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        DoubleDataResponse V1exchangeusercoinfee (string authorization = null, string accept = null);

        /// <summary>
        /// Users Coin Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users coin fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        ApiResponse<DoubleDataResponse> V1exchangeusercoinfeeWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Users Fiat Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users fiat fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        DoubleDataResponse V1exchangeuserfiatfee (string authorization, string accept = null);

        /// <summary>
        /// Users Fiat Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users fiat fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        ApiResponse<DoubleDataResponse> V1exchangeuserfiatfeeWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Coinsecure.me Netki Lookup
        /// </summary>
        /// <remarks>
        /// Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        DoubleDataResponse V1netkisearchNetkiName (string netkiName, string accept = null);

        /// <summary>
        /// Coinsecure.me Netki Lookup
        /// </summary>
        /// <remarks>
        /// Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        ApiResponse<DoubleDataResponse> V1netkisearchNetkiNameWithHttpInfo (string netkiName, string accept = null);
        /// <summary>
        /// Gets KYC Status Details
        /// </summary>
        /// <remarks>
        /// Gets Users KYC Status Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>KYCDataResponse</returns>
        KYCDataResponse V1userexchangekycs (string authorization, string accept = null);

        /// <summary>
        /// Gets KYC Status Details
        /// </summary>
        /// <remarks>
        /// Gets Users KYC Status Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of KYCDataResponse</returns>
        ApiResponse<KYCDataResponse> V1userexchangekycsWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Coin Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccCoinRefDataResponse</returns>
        SuccCoinRefDataResponse V1userexchangereferralcoinpaid (string authorization, string accept = null);

        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Coin Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccCoinRefDataResponse</returns>
        ApiResponse<SuccCoinRefDataResponse> V1userexchangereferralcoinpaidWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Gets Users Successful Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Successful Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccRefDataResponse</returns>
        SuccRefDataResponse V1userexchangereferralcoinsuccessful (string authorization, string accept = null);

        /// <summary>
        /// Gets Users Successful Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Successful Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccRefDataResponse</returns>
        ApiResponse<SuccRefDataResponse> V1userexchangereferralcoinsuccessfulWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Fiat Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccCoinRefDataResponse</returns>
        SuccCoinRefDataResponse V1userexchangereferralfiatpaid (string authorization, string accept = null);

        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Fiat Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccCoinRefDataResponse</returns>
        ApiResponse<SuccCoinRefDataResponse> V1userexchangereferralfiatpaidWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Gets Users Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>AllRefDataResponse</returns>
        AllRefDataResponse V1userexchangereferrals (string authorization, string accept = null);

        /// <summary>
        /// Gets Users Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of AllRefDataResponse</returns>
        ApiResponse<AllRefDataResponse> V1userexchangereferralsWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Exchange Trade Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Trade Data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeSummaryDataResponse</returns>
        TradeSummaryDataResponse V1userexchangetradesummary (string authorization, string accept = null);

        /// <summary>
        /// Exchange Trade Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Trade Data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeSummaryDataResponse</returns>
        ApiResponse<TradeSummaryDataResponse> V1userexchangetradesummaryWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Login Token Email
        /// </summary>
        /// <remarks>
        /// Retrieves details of a Login Token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userlogintokenToken (string token, string accept = null);

        /// <summary>
        /// Login Token Email
        /// </summary>
        /// <remarks>
        /// Retrieves details of a Login Token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userlogintokenTokenWithHttpInfo (string token, string accept = null);
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>UserSummaryDataResponse</returns>
        UserSummaryDataResponse V1usersummary (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of UserSummaryDataResponse</returns>
        ApiResponse<UserSummaryDataResponse> V1usersummaryWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletSummaryDataResponse</returns>
        WalletSummaryDataResponse V1userwalletsummary (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletSummaryDataResponse</returns>
        ApiResponse<WalletSummaryDataResponse> V1userwalletsummaryWithHttpInfo (string authorization, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of BankSummaryDataResponse</returns>
        System.Threading.Tasks.Task<BankSummaryDataResponse> V1exchangebanksummaryAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (BankSummaryDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankSummaryDataResponse>> V1exchangebanksummaryAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Coin Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users coin fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        System.Threading.Tasks.Task<DoubleDataResponse> V1exchangeusercoinfeeAsync (string authorization = null, string accept = null);

        /// <summary>
        /// Users Coin Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users coin fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1exchangeusercoinfeeAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Users Fiat Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users fiat fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        System.Threading.Tasks.Task<DoubleDataResponse> V1exchangeuserfiatfeeAsync (string authorization, string accept = null);

        /// <summary>
        /// Users Fiat Fee Percentage
        /// </summary>
        /// <remarks>
        /// Returns the users fiat fee percentage. The response is in percentage.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1exchangeuserfiatfeeAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Coinsecure.me Netki Lookup
        /// </summary>
        /// <remarks>
        /// Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        System.Threading.Tasks.Task<DoubleDataResponse> V1netkisearchNetkiNameAsync (string netkiName, string accept = null);

        /// <summary>
        /// Coinsecure.me Netki Lookup
        /// </summary>
        /// <remarks>
        /// Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1netkisearchNetkiNameAsyncWithHttpInfo (string netkiName, string accept = null);
        /// <summary>
        /// Gets KYC Status Details
        /// </summary>
        /// <remarks>
        /// Gets Users KYC Status Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of KYCDataResponse</returns>
        System.Threading.Tasks.Task<KYCDataResponse> V1userexchangekycsAsync (string authorization, string accept = null);

        /// <summary>
        /// Gets KYC Status Details
        /// </summary>
        /// <remarks>
        /// Gets Users KYC Status Details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (KYCDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KYCDataResponse>> V1userexchangekycsAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Coin Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccCoinRefDataResponse</returns>
        System.Threading.Tasks.Task<SuccCoinRefDataResponse> V1userexchangereferralcoinpaidAsync (string authorization, string accept = null);

        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Coin Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccCoinRefDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccCoinRefDataResponse>> V1userexchangereferralcoinpaidAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Gets Users Successful Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Successful Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccRefDataResponse</returns>
        System.Threading.Tasks.Task<SuccRefDataResponse> V1userexchangereferralcoinsuccessfulAsync (string authorization, string accept = null);

        /// <summary>
        /// Gets Users Successful Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Successful Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccRefDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccRefDataResponse>> V1userexchangereferralcoinsuccessfulAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Fiat Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccCoinRefDataResponse</returns>
        System.Threading.Tasks.Task<SuccCoinRefDataResponse> V1userexchangereferralfiatpaidAsync (string authorization, string accept = null);

        /// <summary>
        /// Users Paid Fiat Referrals
        /// </summary>
        /// <remarks>
        /// Returns the Users Paid Fiat Referrals.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccCoinRefDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccCoinRefDataResponse>> V1userexchangereferralfiatpaidAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Gets Users Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of AllRefDataResponse</returns>
        System.Threading.Tasks.Task<AllRefDataResponse> V1userexchangereferralsAsync (string authorization, string accept = null);

        /// <summary>
        /// Gets Users Referral Links
        /// </summary>
        /// <remarks>
        /// Gets Users Referral Links that can be used during signup.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (AllRefDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllRefDataResponse>> V1userexchangereferralsAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Exchange Trade Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Trade Data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeSummaryDataResponse</returns>
        System.Threading.Tasks.Task<TradeSummaryDataResponse> V1userexchangetradesummaryAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Trade Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Trade Data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeSummaryDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeSummaryDataResponse>> V1userexchangetradesummaryAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Login Token Email
        /// </summary>
        /// <remarks>
        /// Retrieves details of a Login Token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userlogintokenTokenAsync (string token, string accept = null);

        /// <summary>
        /// Login Token Email
        /// </summary>
        /// <remarks>
        /// Retrieves details of a Login Token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userlogintokenTokenAsyncWithHttpInfo (string token, string accept = null);
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of UserSummaryDataResponse</returns>
        System.Threading.Tasks.Task<UserSummaryDataResponse> V1usersummaryAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (UserSummaryDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSummaryDataResponse>> V1usersummaryAsyncWithHttpInfo (string authorization, string accept = null);
        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletSummaryDataResponse</returns>
        System.Threading.Tasks.Task<WalletSummaryDataResponse> V1userwalletsummaryAsync (string authorization, string accept = null);

        /// <summary>
        /// Exchange Bank Summary
        /// </summary>
        /// <remarks>
        /// Gets a Summary of Exchange Bank Data and Balances.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletSummaryDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletSummaryDataResponse>> V1userwalletsummaryAsyncWithHttpInfo (string authorization, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountDataApi : IAccountDataApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>BankSummaryDataResponse</returns>
        public BankSummaryDataResponse V1exchangebanksummary (string authorization, string accept = null)
        {
             ApiResponse<BankSummaryDataResponse> localVarResponse = V1exchangebanksummaryWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of BankSummaryDataResponse</returns>
        public ApiResponse< BankSummaryDataResponse > V1exchangebanksummaryWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1exchangebanksummary");

            var localVarPath = "/v1/user/exchange/bank/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangebanksummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangebanksummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BankSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankSummaryDataResponse)));
            
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of BankSummaryDataResponse</returns>
        public async System.Threading.Tasks.Task<BankSummaryDataResponse> V1exchangebanksummaryAsync (string authorization, string accept = null)
        {
             ApiResponse<BankSummaryDataResponse> localVarResponse = await V1exchangebanksummaryAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (BankSummaryDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankSummaryDataResponse>> V1exchangebanksummaryAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1exchangebanksummary");

            var localVarPath = "/v1/user/exchange/bank/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangebanksummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangebanksummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<BankSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankSummaryDataResponse)));
            
        }

        /// <summary>
        /// Users Coin Fee Percentage Returns the users coin fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        public DoubleDataResponse V1exchangeusercoinfee (string authorization = null, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = V1exchangeusercoinfeeWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users Coin Fee Percentage Returns the users coin fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        public ApiResponse< DoubleDataResponse > V1exchangeusercoinfeeWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/exchange/coin/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeusercoinfee: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeusercoinfee: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Users Coin Fee Percentage Returns the users coin fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        public async System.Threading.Tasks.Task<DoubleDataResponse> V1exchangeusercoinfeeAsync (string authorization = null, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = await V1exchangeusercoinfeeAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users Coin Fee Percentage Returns the users coin fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1exchangeusercoinfeeAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/exchange/coin/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeusercoinfee: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeusercoinfee: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Users Fiat Fee Percentage Returns the users fiat fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        public DoubleDataResponse V1exchangeuserfiatfee (string authorization, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = V1exchangeuserfiatfeeWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users Fiat Fee Percentage Returns the users fiat fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        public ApiResponse< DoubleDataResponse > V1exchangeuserfiatfeeWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1exchangeuserfiatfee");

            var localVarPath = "/v1/user/exchange/fiat/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeuserfiatfee: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeuserfiatfee: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Users Fiat Fee Percentage Returns the users fiat fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        public async System.Threading.Tasks.Task<DoubleDataResponse> V1exchangeuserfiatfeeAsync (string authorization, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = await V1exchangeuserfiatfeeAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users Fiat Fee Percentage Returns the users fiat fee percentage. The response is in percentage.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1exchangeuserfiatfeeAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1exchangeuserfiatfee");

            var localVarPath = "/v1/user/exchange/fiat/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeuserfiatfee: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1exchangeuserfiatfee: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Coinsecure.me Netki Lookup Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>DoubleDataResponse</returns>
        public DoubleDataResponse V1netkisearchNetkiName (string netkiName, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = V1netkisearchNetkiNameWithHttpInfo(netkiName, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Coinsecure.me Netki Lookup Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of DoubleDataResponse</returns>
        public ApiResponse< DoubleDataResponse > V1netkisearchNetkiNameWithHttpInfo (string netkiName, string accept = null)
        {
            // verify the required parameter 'netkiName' is set
            if (netkiName == null)
                throw new ApiException(400, "Missing required parameter 'netkiName' when calling AccountDataApi->V1netkisearchNetkiName");

            var localVarPath = "/v1/netki/search/{netkiName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (netkiName != null) localVarPathParams.Add("netkiName", Configuration.ApiClient.ParameterToString(netkiName)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1netkisearchNetkiName: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1netkisearchNetkiName: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Coinsecure.me Netki Lookup Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of DoubleDataResponse</returns>
        public async System.Threading.Tasks.Task<DoubleDataResponse> V1netkisearchNetkiNameAsync (string netkiName, string accept = null)
        {
             ApiResponse<DoubleDataResponse> localVarResponse = await V1netkisearchNetkiNameAsyncWithHttpInfo(netkiName, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Coinsecure.me Netki Lookup Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (DoubleDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoubleDataResponse>> V1netkisearchNetkiNameAsyncWithHttpInfo (string netkiName, string accept = null)
        {
            // verify the required parameter 'netkiName' is set
            if (netkiName == null)
                throw new ApiException(400, "Missing required parameter 'netkiName' when calling AccountDataApi->V1netkisearchNetkiName");

            var localVarPath = "/v1/netki/search/{netkiName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (netkiName != null) localVarPathParams.Add("netkiName", Configuration.ApiClient.ParameterToString(netkiName)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1netkisearchNetkiName: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1netkisearchNetkiName: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<DoubleDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoubleDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoubleDataResponse)));
            
        }

        /// <summary>
        /// Gets KYC Status Details Gets Users KYC Status Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>KYCDataResponse</returns>
        public KYCDataResponse V1userexchangekycs (string authorization, string accept = null)
        {
             ApiResponse<KYCDataResponse> localVarResponse = V1userexchangekycsWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets KYC Status Details Gets Users KYC Status Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of KYCDataResponse</returns>
        public ApiResponse< KYCDataResponse > V1userexchangekycsWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangekycs");

            var localVarPath = "/v1/user/exchange/kycs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekycs: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekycs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KYCDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KYCDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KYCDataResponse)));
            
        }

        /// <summary>
        /// Gets KYC Status Details Gets Users KYC Status Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of KYCDataResponse</returns>
        public async System.Threading.Tasks.Task<KYCDataResponse> V1userexchangekycsAsync (string authorization, string accept = null)
        {
             ApiResponse<KYCDataResponse> localVarResponse = await V1userexchangekycsAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets KYC Status Details Gets Users KYC Status Details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (KYCDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KYCDataResponse>> V1userexchangekycsAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangekycs");

            var localVarPath = "/v1/user/exchange/kycs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekycs: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekycs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<KYCDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KYCDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(KYCDataResponse)));
            
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Coin Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccCoinRefDataResponse</returns>
        public SuccCoinRefDataResponse V1userexchangereferralcoinpaid (string authorization, string accept = null)
        {
             ApiResponse<SuccCoinRefDataResponse> localVarResponse = V1userexchangereferralcoinpaidWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Coin Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccCoinRefDataResponse</returns>
        public ApiResponse< SuccCoinRefDataResponse > V1userexchangereferralcoinpaidWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralcoinpaid");

            var localVarPath = "/v1/user/exchange/referral/coin/paid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinpaid: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinpaid: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccCoinRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccCoinRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccCoinRefDataResponse)));
            
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Coin Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccCoinRefDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccCoinRefDataResponse> V1userexchangereferralcoinpaidAsync (string authorization, string accept = null)
        {
             ApiResponse<SuccCoinRefDataResponse> localVarResponse = await V1userexchangereferralcoinpaidAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Coin Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccCoinRefDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccCoinRefDataResponse>> V1userexchangereferralcoinpaidAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralcoinpaid");

            var localVarPath = "/v1/user/exchange/referral/coin/paid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinpaid: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinpaid: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccCoinRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccCoinRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccCoinRefDataResponse)));
            
        }

        /// <summary>
        /// Gets Users Successful Referral Links Gets Users Successful Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccRefDataResponse</returns>
        public SuccRefDataResponse V1userexchangereferralcoinsuccessful (string authorization, string accept = null)
        {
             ApiResponse<SuccRefDataResponse> localVarResponse = V1userexchangereferralcoinsuccessfulWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Users Successful Referral Links Gets Users Successful Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccRefDataResponse</returns>
        public ApiResponse< SuccRefDataResponse > V1userexchangereferralcoinsuccessfulWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralcoinsuccessful");

            var localVarPath = "/v1/user/exchange/referral/coin/successful";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinsuccessful: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinsuccessful: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccRefDataResponse)));
            
        }

        /// <summary>
        /// Gets Users Successful Referral Links Gets Users Successful Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccRefDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccRefDataResponse> V1userexchangereferralcoinsuccessfulAsync (string authorization, string accept = null)
        {
             ApiResponse<SuccRefDataResponse> localVarResponse = await V1userexchangereferralcoinsuccessfulAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Users Successful Referral Links Gets Users Successful Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccRefDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccRefDataResponse>> V1userexchangereferralcoinsuccessfulAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralcoinsuccessful");

            var localVarPath = "/v1/user/exchange/referral/coin/successful";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinsuccessful: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralcoinsuccessful: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccRefDataResponse)));
            
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Fiat Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccCoinRefDataResponse</returns>
        public SuccCoinRefDataResponse V1userexchangereferralfiatpaid (string authorization, string accept = null)
        {
             ApiResponse<SuccCoinRefDataResponse> localVarResponse = V1userexchangereferralfiatpaidWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Fiat Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccCoinRefDataResponse</returns>
        public ApiResponse< SuccCoinRefDataResponse > V1userexchangereferralfiatpaidWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralfiatpaid");

            var localVarPath = "/v1/user/exchange/referral/fiat/paid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralfiatpaid: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralfiatpaid: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccCoinRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccCoinRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccCoinRefDataResponse)));
            
        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Fiat Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccCoinRefDataResponse</returns>
        public async System.Threading.Tasks.Task<SuccCoinRefDataResponse> V1userexchangereferralfiatpaidAsync (string authorization, string accept = null)
        {
             ApiResponse<SuccCoinRefDataResponse> localVarResponse = await V1userexchangereferralfiatpaidAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users Paid Fiat Referrals Returns the Users Paid Fiat Referrals.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccCoinRefDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccCoinRefDataResponse>> V1userexchangereferralfiatpaidAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferralfiatpaid");

            var localVarPath = "/v1/user/exchange/referral/fiat/paid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralfiatpaid: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferralfiatpaid: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccCoinRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccCoinRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccCoinRefDataResponse)));
            
        }

        /// <summary>
        /// Gets Users Referral Links Gets Users Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>AllRefDataResponse</returns>
        public AllRefDataResponse V1userexchangereferrals (string authorization, string accept = null)
        {
             ApiResponse<AllRefDataResponse> localVarResponse = V1userexchangereferralsWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Users Referral Links Gets Users Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of AllRefDataResponse</returns>
        public ApiResponse< AllRefDataResponse > V1userexchangereferralsWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferrals");

            var localVarPath = "/v1/user/exchange/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferrals: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferrals: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<AllRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllRefDataResponse)));
            
        }

        /// <summary>
        /// Gets Users Referral Links Gets Users Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of AllRefDataResponse</returns>
        public async System.Threading.Tasks.Task<AllRefDataResponse> V1userexchangereferralsAsync (string authorization, string accept = null)
        {
             ApiResponse<AllRefDataResponse> localVarResponse = await V1userexchangereferralsAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Users Referral Links Gets Users Referral Links that can be used during signup.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (AllRefDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllRefDataResponse>> V1userexchangereferralsAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangereferrals");

            var localVarPath = "/v1/user/exchange/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferrals: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangereferrals: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<AllRefDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllRefDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllRefDataResponse)));
            
        }

        /// <summary>
        /// Exchange Trade Summary Gets a Summary of Exchange Trade Data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>TradeSummaryDataResponse</returns>
        public TradeSummaryDataResponse V1userexchangetradesummary (string authorization, string accept = null)
        {
             ApiResponse<TradeSummaryDataResponse> localVarResponse = V1userexchangetradesummaryWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Trade Summary Gets a Summary of Exchange Trade Data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of TradeSummaryDataResponse</returns>
        public ApiResponse< TradeSummaryDataResponse > V1userexchangetradesummaryWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangetradesummary");

            var localVarPath = "/v1/user/exchange/trade/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangetradesummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangetradesummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<TradeSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeSummaryDataResponse)));
            
        }

        /// <summary>
        /// Exchange Trade Summary Gets a Summary of Exchange Trade Data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of TradeSummaryDataResponse</returns>
        public async System.Threading.Tasks.Task<TradeSummaryDataResponse> V1userexchangetradesummaryAsync (string authorization, string accept = null)
        {
             ApiResponse<TradeSummaryDataResponse> localVarResponse = await V1userexchangetradesummaryAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Trade Summary Gets a Summary of Exchange Trade Data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (TradeSummaryDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradeSummaryDataResponse>> V1userexchangetradesummaryAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userexchangetradesummary");

            var localVarPath = "/v1/user/exchange/trade/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangetradesummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangetradesummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<TradeSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradeSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradeSummaryDataResponse)));
            
        }

        /// <summary>
        /// Login Token Email Retrieves details of a Login Token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userlogintokenToken (string token, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userlogintokenTokenWithHttpInfo(token, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login Token Email Retrieves details of a Login Token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userlogintokenTokenWithHttpInfo (string token, string accept = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AccountDataApi->V1userlogintokenToken");

            var localVarPath = "/v1/user/login/token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogintokenToken: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogintokenToken: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Login Token Email Retrieves details of a Login Token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userlogintokenTokenAsync (string token, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userlogintokenTokenAsyncWithHttpInfo(token, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login Token Email Retrieves details of a Login Token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userlogintokenTokenAsyncWithHttpInfo (string token, string accept = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling AccountDataApi->V1userlogintokenToken");

            var localVarPath = "/v1/user/login/token/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogintokenToken: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogintokenToken: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>UserSummaryDataResponse</returns>
        public UserSummaryDataResponse V1usersummary (string authorization, string accept = null)
        {
             ApiResponse<UserSummaryDataResponse> localVarResponse = V1usersummaryWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of UserSummaryDataResponse</returns>
        public ApiResponse< UserSummaryDataResponse > V1usersummaryWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1usersummary");

            var localVarPath = "/v1/user/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usersummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usersummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UserSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummaryDataResponse)));
            
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of UserSummaryDataResponse</returns>
        public async System.Threading.Tasks.Task<UserSummaryDataResponse> V1usersummaryAsync (string authorization, string accept = null)
        {
             ApiResponse<UserSummaryDataResponse> localVarResponse = await V1usersummaryAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (UserSummaryDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSummaryDataResponse>> V1usersummaryAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1usersummary");

            var localVarPath = "/v1/user/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usersummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usersummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<UserSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSummaryDataResponse)));
            
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletSummaryDataResponse</returns>
        public WalletSummaryDataResponse V1userwalletsummary (string authorization, string accept = null)
        {
             ApiResponse<WalletSummaryDataResponse> localVarResponse = V1userwalletsummaryWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletSummaryDataResponse</returns>
        public ApiResponse< WalletSummaryDataResponse > V1userwalletsummaryWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userwalletsummary");

            var localVarPath = "/v1/user/wallet/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletsummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletsummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSummaryDataResponse)));
            
        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletSummaryDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletSummaryDataResponse> V1userwalletsummaryAsync (string authorization, string accept = null)
        {
             ApiResponse<WalletSummaryDataResponse> localVarResponse = await V1userwalletsummaryAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange Bank Summary Gets a Summary of Exchange Bank Data and Balances.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletSummaryDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletSummaryDataResponse>> V1userwalletsummaryAsyncWithHttpInfo (string authorization, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AccountDataApi->V1userwalletsummary");

            var localVarPath = "/v1/user/wallet/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletsummary: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletsummary: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletSummaryDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletSummaryDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletSummaryDataResponse)));
            
        }

    }
}
