/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletActionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// New Bitcoin Address
        /// </summary>
        /// <remarks>
        /// Generates a New Bitcoin Address to store coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        WalletAddressDataResponse V1userwalletcoinaddressnew (NewAddress body, string authorization = null, string accept = null);

        /// <summary>
        /// New Bitcoin Address
        /// </summary>
        /// <remarks>
        /// Generates a New Bitcoin Address to store coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        ApiResponse<WalletAddressDataResponse> V1userwalletcoinaddressnewWithHttpInfo (NewAddress body, string authorization = null, string accept = null);
        /// <summary>
        /// Create New Wallet
        /// </summary>
        /// <remarks>
        /// Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        WalletAddressDataResponse V1userwalletcoinnew (NewWallet body, string authorization = null, string accept = null);

        /// <summary>
        /// Create New Wallet
        /// </summary>
        /// <remarks>
        /// Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        ApiResponse<WalletAddressDataResponse> V1userwalletcoinnewWithHttpInfo (NewWallet body, string authorization = null, string accept = null);
        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userwalletcoinwithdrawinitiate (SendCoinWallet body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userwalletcoinwithdrawinitiateWithHttpInfo (SendCoinWallet body, string authorization = null, string accept = null);
        /// <summary>
        /// Send to Exchange
        /// </summary>
        /// <remarks>
        /// This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userwalletcoinwithdrawsendToExchange (SendExchange body, string authorization = null, string accept = null);

        /// <summary>
        /// Send to Exchange
        /// </summary>
        /// <remarks>
        /// This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userwalletcoinwithdrawsendToExchangeWithHttpInfo (SendExchange body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userwalletcoinwithdrawunverifiedcancel (string authorization, WithdrawID body, string accept = null);

        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userwalletcoinwithdrawunverifiedcancelWithHttpInfo (string authorization, WithdrawID body, string accept = null);
        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userwalletcoinwithdrawverify (string authorization, Code body, string accept = null);

        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userwalletcoinwithdrawverifyWithHttpInfo (string authorization, Code body, string accept = null);
        /// <summary>
        /// Gets a Verification Code
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1walletcoinwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Verification Code
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1walletcoinwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// New Bitcoin Address
        /// </summary>
        /// <remarks>
        /// Generates a New Bitcoin Address to store coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinaddressnewAsync (NewAddress body, string authorization = null, string accept = null);

        /// <summary>
        /// New Bitcoin Address
        /// </summary>
        /// <remarks>
        /// Generates a New Bitcoin Address to store coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinaddressnewAsyncWithHttpInfo (NewAddress body, string authorization = null, string accept = null);
        /// <summary>
        /// Create New Wallet
        /// </summary>
        /// <remarks>
        /// Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinnewAsync (NewWallet body, string authorization = null, string accept = null);

        /// <summary>
        /// Create New Wallet
        /// </summary>
        /// <remarks>
        /// Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinnewAsyncWithHttpInfo (NewWallet body, string authorization = null, string accept = null);
        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawinitiateAsync (SendCoinWallet body, string authorization = null, string accept = null);

        /// <summary>
        /// Initiate Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawinitiateAsyncWithHttpInfo (SendCoinWallet body, string authorization = null, string accept = null);
        /// <summary>
        /// Send to Exchange
        /// </summary>
        /// <remarks>
        /// This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawsendToExchangeAsync (SendExchange body, string authorization = null, string accept = null);

        /// <summary>
        /// Send to Exchange
        /// </summary>
        /// <remarks>
        /// This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawsendToExchangeAsyncWithHttpInfo (SendExchange body, string authorization = null, string accept = null);
        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawunverifiedcancelAsync (string authorization, WithdrawID body, string accept = null);

        /// <summary>
        /// Cancel Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawunverifiedcancelAsyncWithHttpInfo (string authorization, WithdrawID body, string accept = null);
        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawverifyAsync (string authorization, Code body, string accept = null);

        /// <summary>
        /// Verify Bitcoin Withdrawal
        /// </summary>
        /// <remarks>
        /// Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawverifyAsyncWithHttpInfo (string authorization, Code body, string accept = null);
        /// <summary>
        /// Gets a Verification Code
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1walletcoinwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null);

        /// <summary>
        /// Gets a Verification Code
        /// </summary>
        /// <remarks>
        /// Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1walletcoinwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletActionsApi : IWalletActionsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletActionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletActionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// New Bitcoin Address Generates a New Bitcoin Address to store coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        public WalletAddressDataResponse V1userwalletcoinaddressnew (NewAddress body, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = V1userwalletcoinaddressnewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// New Bitcoin Address Generates a New Bitcoin Address to store coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        public ApiResponse< WalletAddressDataResponse > V1userwalletcoinaddressnewWithHttpInfo (NewAddress body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinaddressnew");

            var localVarPath = "/v1/user/wallet/coin/address/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinaddressnew: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinaddressnew: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// New Bitcoin Address Generates a New Bitcoin Address to store coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinaddressnewAsync (NewAddress body, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = await V1userwalletcoinaddressnewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// New Bitcoin Address Generates a New Bitcoin Address to store coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinaddressnewAsyncWithHttpInfo (NewAddress body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinaddressnew");

            var localVarPath = "/v1/user/wallet/coin/address/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinaddressnew: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinaddressnew: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Create New Wallet Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>WalletAddressDataResponse</returns>
        public WalletAddressDataResponse V1userwalletcoinnew (NewWallet body, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = V1userwalletcoinnewWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create New Wallet Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of WalletAddressDataResponse</returns>
        public ApiResponse< WalletAddressDataResponse > V1userwalletcoinnewWithHttpInfo (NewWallet body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinnew");

            var localVarPath = "/v1/user/wallet/coin/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinnew: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinnew: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Create New Wallet Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of WalletAddressDataResponse</returns>
        public async System.Threading.Tasks.Task<WalletAddressDataResponse> V1userwalletcoinnewAsync (NewWallet body, string authorization = null, string accept = null)
        {
             ApiResponse<WalletAddressDataResponse> localVarResponse = await V1userwalletcoinnewAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create New Wallet Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (WalletAddressDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletAddressDataResponse>> V1userwalletcoinnewAsyncWithHttpInfo (NewWallet body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinnew");

            var localVarPath = "/v1/user/wallet/coin/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinnew: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinnew: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<WalletAddressDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletAddressDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletAddressDataResponse)));
            
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userwalletcoinwithdrawinitiate (SendCoinWallet body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userwalletcoinwithdrawinitiateWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userwalletcoinwithdrawinitiateWithHttpInfo (SendCoinWallet body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawinitiate");

            var localVarPath = "/v1/user/wallet/coin/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawinitiate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawinitiate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawinitiateAsync (SendCoinWallet body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userwalletcoinwithdrawinitiateAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Bitcoin Withdrawal The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawinitiateAsyncWithHttpInfo (SendCoinWallet body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawinitiate");

            var localVarPath = "/v1/user/wallet/coin/withdraw/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawinitiate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawinitiate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send to Exchange This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userwalletcoinwithdrawsendToExchange (SendExchange body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userwalletcoinwithdrawsendToExchangeWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send to Exchange This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userwalletcoinwithdrawsendToExchangeWithHttpInfo (SendExchange body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawsendToExchange");

            var localVarPath = "/v1/user/wallet/coin/withdraw/sendToExchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawsendToExchange: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawsendToExchange: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send to Exchange This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawsendToExchangeAsync (SendExchange body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userwalletcoinwithdrawsendToExchangeAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send to Exchange This function transfers funds to yout Exchange Balance without the need for any confirmations.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawsendToExchangeAsyncWithHttpInfo (SendExchange body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawsendToExchange");

            var localVarPath = "/v1/user/wallet/coin/withdraw/sendToExchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawsendToExchange: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawsendToExchange: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userwalletcoinwithdrawunverifiedcancel (string authorization, WithdrawID body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userwalletcoinwithdrawunverifiedcancelWithHttpInfo(authorization, body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userwalletcoinwithdrawunverifiedcancelWithHttpInfo (string authorization, WithdrawID body, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletActionsApi->V1userwalletcoinwithdrawunverifiedcancel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawunverifiedcancel");

            var localVarPath = "/v1/user/wallet/coin/withdraw/unverified/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawunverifiedcancel: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawunverifiedcancel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawunverifiedcancelAsync (string authorization, WithdrawID body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userwalletcoinwithdrawunverifiedcancelAsyncWithHttpInfo(authorization, body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Bitcoin Withdrawal Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawunverifiedcancelAsyncWithHttpInfo (string authorization, WithdrawID body, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletActionsApi->V1userwalletcoinwithdrawunverifiedcancel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawunverifiedcancel");

            var localVarPath = "/v1/user/wallet/coin/withdraw/unverified/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawunverifiedcancel: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawunverifiedcancel: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userwalletcoinwithdrawverify (string authorization, Code body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userwalletcoinwithdrawverifyWithHttpInfo(authorization, body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userwalletcoinwithdrawverifyWithHttpInfo (string authorization, Code body, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletActionsApi->V1userwalletcoinwithdrawverify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawverify");

            var localVarPath = "/v1/user/wallet/coin/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawverify: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawverify: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userwalletcoinwithdrawverifyAsync (string authorization, Code body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userwalletcoinwithdrawverifyAsyncWithHttpInfo(authorization, body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Bitcoin Withdrawal Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key.</param>
        /// <param name="body"></param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userwalletcoinwithdrawverifyAsyncWithHttpInfo (string authorization, Code body, string accept = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling WalletActionsApi->V1userwalletcoinwithdrawverify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1userwalletcoinwithdrawverify");

            var localVarPath = "/v1/user/wallet/coin/withdraw/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawverify: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userwalletcoinwithdrawverify: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Verification Code Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1walletcoinwithdrawnewVerifycode (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1walletcoinwithdrawnewVerifycodeWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a Verification Code Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1walletcoinwithdrawnewVerifycodeWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1walletcoinwithdrawnewVerifycode");

            var localVarPath = "/v1/wallet/coin/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1walletcoinwithdrawnewVerifycode: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1walletcoinwithdrawnewVerifycode: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Gets a Verification Code Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1walletcoinwithdrawnewVerifycodeAsync (WithdrawID body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1walletcoinwithdrawnewVerifycodeAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a Verification Code Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode</param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1walletcoinwithdrawnewVerifycodeAsyncWithHttpInfo (WithdrawID body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WalletActionsApi->V1walletcoinwithdrawnewVerifycode");

            var localVarPath = "/v1/wallet/coin/withdraw/newVerifycode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1walletcoinwithdrawnewVerifycode: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1walletcoinwithdrawnewVerifycode: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

    }
}
