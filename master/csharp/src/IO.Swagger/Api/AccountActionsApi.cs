/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountActionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a Login Instance and returns an API Key.
        /// </summary>
        /// <remarks>
        /// Creates a Login Instance and returns an API Key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardLoginResultData</returns>
        StandardLoginResultData V1login (LoginFormNew body, string accept = null);

        /// <summary>
        /// Creates a Login Instance and returns an API Key.
        /// </summary>
        /// <remarks>
        /// Creates a Login Instance and returns an API Key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardLoginResultData</returns>
        ApiResponse<StandardLoginResultData> V1loginWithHttpInfo (LoginFormNew body, string accept = null);
        /// <summary>
        /// Initiate Login
        /// </summary>
        /// <remarks>
        /// Sends an Email with a Verification Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardInitiateLoginResultData</returns>
        StandardInitiateLoginResultData V1logininitiate (LoginId body, string accept = null);

        /// <summary>
        /// Initiate Login
        /// </summary>
        /// <remarks>
        /// Sends an Email with a Verification Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardInitiateLoginResultData</returns>
        ApiResponse<StandardInitiateLoginResultData> V1logininitiateWithHttpInfo (LoginId body, string accept = null);
        /// <summary>
        /// Sends an email with a password reset token
        /// </summary>
        /// <remarks>
        /// Sends an email with a password reset token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1loginpasswordforgot (Email body, string accept = null);

        /// <summary>
        /// Sends an email with a password reset token
        /// </summary>
        /// <remarks>
        /// Sends an email with a password reset token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1loginpasswordforgotWithHttpInfo (Email body, string accept = null);
        /// <summary>
        /// Creates a new Unverified Account.
        /// </summary>
        /// <remarks>
        /// Creates a new Unverified Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1signup (SignupForm body, string accept = null);

        /// <summary>
        /// Creates a new Unverified Account.
        /// </summary>
        /// <remarks>
        /// Creates a new Unverified Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1signupWithHttpInfo (SignupForm body, string accept = null);
        /// <summary>
        /// Send OTP for Bank Link
        /// </summary>
        /// <remarks>
        /// Send OTP for an additional Bank Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardInitiateLoginResultData</returns>
        StandardInitiateLoginResultData V1userbankotpNumber (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for Bank Link
        /// </summary>
        /// <remarks>
        /// Send OTP for an additional Bank Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardInitiateLoginResultData</returns>
        ApiResponse<StandardInitiateLoginResultData> V1userbankotpNumberWithHttpInfo (string number, string authorization = null, string accept = null);
        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userexchangekyc (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null);

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userexchangekycWithHttpInfo (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null);
        /// <summary>
        /// Delete GCM Code
        /// </summary>
        /// <remarks>
        /// Delete GCM Code and associated API Key.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1usergcmCode (string code, string authorization = null, string accept = null);

        /// <summary>
        /// Delete GCM Code
        /// </summary>
        /// <remarks>
        /// Delete GCM Code and associated API Key.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1usergcmCodeWithHttpInfo (string code, string authorization = null, string accept = null);
        /// <summary>
        /// Send OTP for KYC Link
        /// </summary>
        /// <remarks>
        /// Send OTP for KYC Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userkycotpNumber (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for KYC Link
        /// </summary>
        /// <remarks>
        /// Send OTP for KYC Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userkycotpNumberWithHttpInfo (string number, string authorization = null, string accept = null);
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Logs out user and Deletes the api key and associated session data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userlogout (string authorization = null, string accept = null);

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Logs out user and Deletes the api key and associated session data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userlogoutWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Create Neki Wallet Name
        /// </summary>
        /// <remarks>
        /// Creates a new Netki Wallet Name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1usernetkicreate (NetkiNameAddress body, string authorization = null, string accept = null);

        /// <summary>
        /// Create Neki Wallet Name
        /// </summary>
        /// <remarks>
        /// Creates a new Netki Wallet Name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1usernetkicreateWithHttpInfo (NetkiNameAddress body, string authorization = null, string accept = null);
        /// <summary>
        /// Update Netki Address
        /// </summary>
        /// <remarks>
        /// Updates the address on an existing wallet name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1usernetkiupdate (Address body, string authorization = null, string accept = null);

        /// <summary>
        /// Update Netki Address
        /// </summary>
        /// <remarks>
        /// Updates the address on an existing wallet name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1usernetkiupdateWithHttpInfo (Address body, string authorization = null, string accept = null);
        /// <summary>
        /// Delete Profile Image
        /// </summary>
        /// <remarks>
        /// Deletes a profile Image.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userprofileimagedelete (NetkiName body, string authorization = null, string accept = null);

        /// <summary>
        /// Delete Profile Image
        /// </summary>
        /// <remarks>
        /// Deletes a profile Image.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userprofileimagedeleteWithHttpInfo (NetkiName body, string authorization = null, string accept = null);
        /// <summary>
        /// Update Profile Image
        /// </summary>
        /// <remarks>
        /// Updates Profile Image and allows public or private options for netki profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userprofileimageupdate (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null);

        /// <summary>
        /// Update Profile Image
        /// </summary>
        /// <remarks>
        /// Updates Profile Image and allows public or private options for netki profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userprofileimageupdateWithHttpInfo (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null);
        /// <summary>
        /// New Profile Phone
        /// </summary>
        /// <remarks>
        /// Set a New Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userprofilephone (NumberOtp body, string authorization = null, string accept = null);

        /// <summary>
        /// New Profile Phone
        /// </summary>
        /// <remarks>
        /// Set a New Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userprofilephoneWithHttpInfo (NumberOtp body, string authorization = null, string accept = null);
        /// <summary>
        /// Delete Profile Phone Number
        /// </summary>
        /// <remarks>
        /// Delete Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userprofilephoneNumber (string authorization = null, string accept = null);

        /// <summary>
        /// Delete Profile Phone Number
        /// </summary>
        /// <remarks>
        /// Delete Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userprofilephoneNumberWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Send OTP for Profile Phone
        /// </summary>
        /// <remarks>
        /// Send OTP for Profile Phone addition or updation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        SuccessResult V1userprofilephoneotpNumber (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for Profile Phone
        /// </summary>
        /// <remarks>
        /// Send OTP for Profile Phone addition or updation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> V1userprofilephoneotpNumberWithHttpInfo (string number, string authorization = null, string accept = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a Login Instance and returns an API Key.
        /// </summary>
        /// <remarks>
        /// Creates a Login Instance and returns an API Key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardLoginResultData</returns>
        System.Threading.Tasks.Task<StandardLoginResultData> V1loginAsync (LoginFormNew body, string accept = null);

        /// <summary>
        /// Creates a Login Instance and returns an API Key.
        /// </summary>
        /// <remarks>
        /// Creates a Login Instance and returns an API Key
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardLoginResultData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardLoginResultData>> V1loginAsyncWithHttpInfo (LoginFormNew body, string accept = null);
        /// <summary>
        /// Initiate Login
        /// </summary>
        /// <remarks>
        /// Sends an Email with a Verification Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardInitiateLoginResultData</returns>
        System.Threading.Tasks.Task<StandardInitiateLoginResultData> V1logininitiateAsync (LoginId body, string accept = null);

        /// <summary>
        /// Initiate Login
        /// </summary>
        /// <remarks>
        /// Sends an Email with a Verification Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardInitiateLoginResultData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardInitiateLoginResultData>> V1logininitiateAsyncWithHttpInfo (LoginId body, string accept = null);
        /// <summary>
        /// Sends an email with a password reset token
        /// </summary>
        /// <remarks>
        /// Sends an email with a password reset token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1loginpasswordforgotAsync (Email body, string accept = null);

        /// <summary>
        /// Sends an email with a password reset token
        /// </summary>
        /// <remarks>
        /// Sends an email with a password reset token
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1loginpasswordforgotAsyncWithHttpInfo (Email body, string accept = null);
        /// <summary>
        /// Creates a new Unverified Account.
        /// </summary>
        /// <remarks>
        /// Creates a new Unverified Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1signupAsync (SignupForm body, string accept = null);

        /// <summary>
        /// Creates a new Unverified Account.
        /// </summary>
        /// <remarks>
        /// Creates a new Unverified Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1signupAsyncWithHttpInfo (SignupForm body, string accept = null);
        /// <summary>
        /// Send OTP for Bank Link
        /// </summary>
        /// <remarks>
        /// Send OTP for an additional Bank Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardInitiateLoginResultData</returns>
        System.Threading.Tasks.Task<StandardInitiateLoginResultData> V1userbankotpNumberAsync (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for Bank Link
        /// </summary>
        /// <remarks>
        /// Send OTP for an additional Bank Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardInitiateLoginResultData)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardInitiateLoginResultData>> V1userbankotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null);
        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userexchangekycAsync (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null);

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <remarks>
        /// Submits a New Bank Link and initial KYC Documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangekycAsyncWithHttpInfo (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null);
        /// <summary>
        /// Delete GCM Code
        /// </summary>
        /// <remarks>
        /// Delete GCM Code and associated API Key.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1usergcmCodeAsync (string code, string authorization = null, string accept = null);

        /// <summary>
        /// Delete GCM Code
        /// </summary>
        /// <remarks>
        /// Delete GCM Code and associated API Key.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usergcmCodeAsyncWithHttpInfo (string code, string authorization = null, string accept = null);
        /// <summary>
        /// Send OTP for KYC Link
        /// </summary>
        /// <remarks>
        /// Send OTP for KYC Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userkycotpNumberAsync (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for KYC Link
        /// </summary>
        /// <remarks>
        /// Send OTP for KYC Link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userkycotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null);
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Logs out user and Deletes the api key and associated session data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userlogoutAsync (string authorization = null, string accept = null);

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Logs out user and Deletes the api key and associated session data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userlogoutAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Create Neki Wallet Name
        /// </summary>
        /// <remarks>
        /// Creates a new Netki Wallet Name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1usernetkicreateAsync (NetkiNameAddress body, string authorization = null, string accept = null);

        /// <summary>
        /// Create Neki Wallet Name
        /// </summary>
        /// <remarks>
        /// Creates a new Netki Wallet Name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usernetkicreateAsyncWithHttpInfo (NetkiNameAddress body, string authorization = null, string accept = null);
        /// <summary>
        /// Update Netki Address
        /// </summary>
        /// <remarks>
        /// Updates the address on an existing wallet name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1usernetkiupdateAsync (Address body, string authorization = null, string accept = null);

        /// <summary>
        /// Update Netki Address
        /// </summary>
        /// <remarks>
        /// Updates the address on an existing wallet name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usernetkiupdateAsyncWithHttpInfo (Address body, string authorization = null, string accept = null);
        /// <summary>
        /// Delete Profile Image
        /// </summary>
        /// <remarks>
        /// Deletes a profile Image.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userprofileimagedeleteAsync (NetkiName body, string authorization = null, string accept = null);

        /// <summary>
        /// Delete Profile Image
        /// </summary>
        /// <remarks>
        /// Deletes a profile Image.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofileimagedeleteAsyncWithHttpInfo (NetkiName body, string authorization = null, string accept = null);
        /// <summary>
        /// Update Profile Image
        /// </summary>
        /// <remarks>
        /// Updates Profile Image and allows public or private options for netki profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userprofileimageupdateAsync (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null);

        /// <summary>
        /// Update Profile Image
        /// </summary>
        /// <remarks>
        /// Updates Profile Image and allows public or private options for netki profile page.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofileimageupdateAsyncWithHttpInfo (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null);
        /// <summary>
        /// New Profile Phone
        /// </summary>
        /// <remarks>
        /// Set a New Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneAsync (NumberOtp body, string authorization = null, string accept = null);

        /// <summary>
        /// New Profile Phone
        /// </summary>
        /// <remarks>
        /// Set a New Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneAsyncWithHttpInfo (NumberOtp body, string authorization = null, string accept = null);
        /// <summary>
        /// Delete Profile Phone Number
        /// </summary>
        /// <remarks>
        /// Delete Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneNumberAsync (string authorization = null, string accept = null);

        /// <summary>
        /// Delete Profile Phone Number
        /// </summary>
        /// <remarks>
        /// Delete Profile Phone Number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneNumberAsyncWithHttpInfo (string authorization = null, string accept = null);
        /// <summary>
        /// Send OTP for Profile Phone
        /// </summary>
        /// <remarks>
        /// Send OTP for Profile Phone addition or updation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneotpNumberAsync (string number, string authorization = null, string accept = null);

        /// <summary>
        /// Send OTP for Profile Phone
        /// </summary>
        /// <remarks>
        /// Send OTP for Profile Phone addition or updation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountActionsApi : IAccountActionsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountActionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountActionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a Login Instance and returns an API Key. Creates a Login Instance and returns an API Key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardLoginResultData</returns>
        public StandardLoginResultData V1login (LoginFormNew body, string accept = null)
        {
             ApiResponse<StandardLoginResultData> localVarResponse = V1loginWithHttpInfo(body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Login Instance and returns an API Key. Creates a Login Instance and returns an API Key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardLoginResultData</returns>
        public ApiResponse< StandardLoginResultData > V1loginWithHttpInfo (LoginFormNew body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1login");

            var localVarPath = "/v1/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1login: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1login: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardLoginResultData)));
            
        }

        /// <summary>
        /// Creates a Login Instance and returns an API Key. Creates a Login Instance and returns an API Key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardLoginResultData</returns>
        public async System.Threading.Tasks.Task<StandardLoginResultData> V1loginAsync (LoginFormNew body, string accept = null)
        {
             ApiResponse<StandardLoginResultData> localVarResponse = await V1loginAsyncWithHttpInfo(body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Login Instance and returns an API Key. Creates a Login Instance and returns an API Key
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardLoginResultData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardLoginResultData>> V1loginAsyncWithHttpInfo (LoginFormNew body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1login");

            var localVarPath = "/v1/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1login: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1login: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardLoginResultData)));
            
        }

        /// <summary>
        /// Initiate Login Sends an Email with a Verification Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardInitiateLoginResultData</returns>
        public StandardInitiateLoginResultData V1logininitiate (LoginId body, string accept = null)
        {
             ApiResponse<StandardInitiateLoginResultData> localVarResponse = V1logininitiateWithHttpInfo(body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Login Sends an Email with a Verification Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardInitiateLoginResultData</returns>
        public ApiResponse< StandardInitiateLoginResultData > V1logininitiateWithHttpInfo (LoginId body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1logininitiate");

            var localVarPath = "/v1/login/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1logininitiate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1logininitiate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardInitiateLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInitiateLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInitiateLoginResultData)));
            
        }

        /// <summary>
        /// Initiate Login Sends an Email with a Verification Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardInitiateLoginResultData</returns>
        public async System.Threading.Tasks.Task<StandardInitiateLoginResultData> V1logininitiateAsync (LoginId body, string accept = null)
        {
             ApiResponse<StandardInitiateLoginResultData> localVarResponse = await V1logininitiateAsyncWithHttpInfo(body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Login Sends an Email with a Verification Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Login ID. This method will send an email with a token to be used for login.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardInitiateLoginResultData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardInitiateLoginResultData>> V1logininitiateAsyncWithHttpInfo (LoginId body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1logininitiate");

            var localVarPath = "/v1/login/initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1logininitiate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1logininitiate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardInitiateLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInitiateLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInitiateLoginResultData)));
            
        }

        /// <summary>
        /// Sends an email with a password reset token Sends an email with a password reset token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1loginpasswordforgot (Email body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1loginpasswordforgotWithHttpInfo(body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sends an email with a password reset token Sends an email with a password reset token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1loginpasswordforgotWithHttpInfo (Email body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1loginpasswordforgot");

            var localVarPath = "/v1/login/password/forgot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1loginpasswordforgot: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1loginpasswordforgot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Sends an email with a password reset token Sends an email with a password reset token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1loginpasswordforgotAsync (Email body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1loginpasswordforgotAsyncWithHttpInfo(body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sends an email with a password reset token Sends an email with a password reset token
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid and registered Email ID.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1loginpasswordforgotAsyncWithHttpInfo (Email body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1loginpasswordforgot");

            var localVarPath = "/v1/login/password/forgot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1loginpasswordforgot: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1loginpasswordforgot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Creates a new Unverified Account. Creates a new Unverified Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1signup (SignupForm body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1signupWithHttpInfo(body, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Unverified Account. Creates a new Unverified Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1signupWithHttpInfo (SignupForm body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1signup");

            var localVarPath = "/v1/signup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1signup: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1signup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Creates a new Unverified Account. Creates a new Unverified Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1signupAsync (SignupForm body, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1signupAsyncWithHttpInfo(body, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Unverified Account. Creates a new Unverified Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please send the form with valid inputs.</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1signupAsyncWithHttpInfo (SignupForm body, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1signup");

            var localVarPath = "/v1/signup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1signup: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1signup: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send OTP for Bank Link Send OTP for an additional Bank Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>StandardInitiateLoginResultData</returns>
        public StandardInitiateLoginResultData V1userbankotpNumber (string number, string authorization = null, string accept = null)
        {
             ApiResponse<StandardInitiateLoginResultData> localVarResponse = V1userbankotpNumberWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send OTP for Bank Link Send OTP for an additional Bank Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of StandardInitiateLoginResultData</returns>
        public ApiResponse< StandardInitiateLoginResultData > V1userbankotpNumberWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userbankotpNumber");

            var localVarPath = "/v1/user/bank/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userbankotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userbankotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardInitiateLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInitiateLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInitiateLoginResultData)));
            
        }

        /// <summary>
        /// Send OTP for Bank Link Send OTP for an additional Bank Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of StandardInitiateLoginResultData</returns>
        public async System.Threading.Tasks.Task<StandardInitiateLoginResultData> V1userbankotpNumberAsync (string number, string authorization = null, string accept = null)
        {
             ApiResponse<StandardInitiateLoginResultData> localVarResponse = await V1userbankotpNumberAsyncWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send OTP for Bank Link Send OTP for an additional Bank Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (StandardInitiateLoginResultData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardInitiateLoginResultData>> V1userbankotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userbankotpNumber");

            var localVarPath = "/v1/user/bank/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userbankotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userbankotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<StandardInitiateLoginResultData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInitiateLoginResultData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInitiateLoginResultData)));
            
        }

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents. Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userexchangekyc (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userexchangekycWithHttpInfo(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents. Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userexchangekycWithHttpInfo (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null)
        {
            // verify the required parameter 'panNumber' is set
            if (panNumber == null)
                throw new ApiException(400, "Missing required parameter 'panNumber' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'acctNick' is set
            if (acctNick == null)
                throw new ApiException(400, "Missing required parameter 'acctNick' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'ban' is set
            if (ban == null)
                throw new ApiException(400, "Missing required parameter 'ban' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'ifsc' is set
            if (ifsc == null)
                throw new ApiException(400, "Missing required parameter 'ifsc' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'acctType' is set
            if (acctType == null)
                throw new ApiException(400, "Missing required parameter 'acctType' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'banType' is set
            if (banType == null)
                throw new ApiException(400, "Missing required parameter 'banType' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AccountActionsApi->V1userexchangekyc");

            var localVarPath = "/v1/user/exchange/kyc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (panNumber != null) localVarFormParams.Add("panNumber", Configuration.ApiClient.ParameterToString(panNumber)); // form parameter
            if (acctNick != null) localVarFormParams.Add("acctNick", Configuration.ApiClient.ParameterToString(acctNick)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (ban != null) localVarFormParams.Add("ban", Configuration.ApiClient.ParameterToString(ban)); // form parameter
            if (ifsc != null) localVarFormParams.Add("ifsc", Configuration.ApiClient.ParameterToString(ifsc)); // form parameter
            if (acctType != null) localVarFormParams.Add("acctType", Configuration.ApiClient.ParameterToString(acctType)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (banType != null) localVarFormParams.Add("banType", Configuration.ApiClient.ParameterToString(banType)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (otp != null) localVarFormParams.Add("otp", Configuration.ApiClient.ParameterToString(otp)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekyc: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekyc: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents. Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userexchangekycAsync (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userexchangekycAsyncWithHttpInfo(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submits a New Bank Link and initial KYC Documents. Submits a New Bank Link and initial KYC Documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="panNumber">Please enter your Pan Card Number</param>
        /// <param name="acctNick">Please enter an Account NickName</param>
        /// <param name="name">Please enter your Name as it appears on your Bank account.</param>
        /// <param name="ban">Please enter your Bank account number.</param>
        /// <param name="ifsc">Please enter your IFSC Code.</param>
        /// <param name="acctType">Please enter your Coinsecure account type. Allowable Values are Personal or Company.</param>
        /// <param name="banType">Please enter your Bank account type. Allowable Values are Savings or Current.</param>
        /// <param name="phone">Please enter your Valid Phone Number.</param>
        /// <param name="otp">Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="message">Please enter an optional message if needed. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userexchangekycAsyncWithHttpInfo (string panNumber, string acctNick, string name, string ban, string ifsc, string acctType, string banType, string phone, string otp, System.IO.Stream file, string authorization = null, string message = null, string accept = null)
        {
            // verify the required parameter 'panNumber' is set
            if (panNumber == null)
                throw new ApiException(400, "Missing required parameter 'panNumber' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'acctNick' is set
            if (acctNick == null)
                throw new ApiException(400, "Missing required parameter 'acctNick' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'ban' is set
            if (ban == null)
                throw new ApiException(400, "Missing required parameter 'ban' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'ifsc' is set
            if (ifsc == null)
                throw new ApiException(400, "Missing required parameter 'ifsc' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'acctType' is set
            if (acctType == null)
                throw new ApiException(400, "Missing required parameter 'acctType' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'banType' is set
            if (banType == null)
                throw new ApiException(400, "Missing required parameter 'banType' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling AccountActionsApi->V1userexchangekyc");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AccountActionsApi->V1userexchangekyc");

            var localVarPath = "/v1/user/exchange/kyc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (panNumber != null) localVarFormParams.Add("panNumber", Configuration.ApiClient.ParameterToString(panNumber)); // form parameter
            if (acctNick != null) localVarFormParams.Add("acctNick", Configuration.ApiClient.ParameterToString(acctNick)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (ban != null) localVarFormParams.Add("ban", Configuration.ApiClient.ParameterToString(ban)); // form parameter
            if (ifsc != null) localVarFormParams.Add("ifsc", Configuration.ApiClient.ParameterToString(ifsc)); // form parameter
            if (acctType != null) localVarFormParams.Add("acctType", Configuration.ApiClient.ParameterToString(acctType)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (banType != null) localVarFormParams.Add("banType", Configuration.ApiClient.ParameterToString(banType)); // form parameter
            if (phone != null) localVarFormParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter
            if (otp != null) localVarFormParams.Add("otp", Configuration.ApiClient.ParameterToString(otp)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekyc: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userexchangekyc: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete GCM Code Delete GCM Code and associated API Key.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1usergcmCode (string code, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1usergcmCodeWithHttpInfo(code, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete GCM Code Delete GCM Code and associated API Key.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1usergcmCodeWithHttpInfo (string code, string authorization = null, string accept = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccountActionsApi->V1usergcmCode");

            var localVarPath = "/v1/user/gcm/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usergcmCode: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usergcmCode: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete GCM Code Delete GCM Code and associated API Key.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1usergcmCodeAsync (string code, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1usergcmCodeAsyncWithHttpInfo(code, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete GCM Code Delete GCM Code and associated API Key.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usergcmCodeAsyncWithHttpInfo (string code, string authorization = null, string accept = null)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AccountActionsApi->V1usergcmCode");

            var localVarPath = "/v1/user/gcm/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usergcmCode: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usergcmCode: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send OTP for KYC Link Send OTP for KYC Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userkycotpNumber (string number, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userkycotpNumberWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send OTP for KYC Link Send OTP for KYC Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userkycotpNumberWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userkycotpNumber");

            var localVarPath = "/v1/user/kyc/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userkycotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userkycotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send OTP for KYC Link Send OTP for KYC Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userkycotpNumberAsync (string number, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userkycotpNumberAsyncWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send OTP for KYC Link Send OTP for KYC Link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userkycotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userkycotpNumber");

            var localVarPath = "/v1/user/kyc/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userkycotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userkycotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Logout User Logs out user and Deletes the api key and associated session data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userlogout (string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userlogoutWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Logs out user and Deletes the api key and associated session data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userlogoutWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogout: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogout: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Logout User Logs out user and Deletes the api key and associated session data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userlogoutAsync (string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userlogoutAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout User Logs out user and Deletes the api key and associated session data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userlogoutAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogout: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userlogout: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Create Neki Wallet Name Creates a new Netki Wallet Name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1usernetkicreate (NetkiNameAddress body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1usernetkicreateWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Neki Wallet Name Creates a new Netki Wallet Name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1usernetkicreateWithHttpInfo (NetkiNameAddress body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1usernetkicreate");

            var localVarPath = "/v1/user/netki/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkicreate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkicreate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Create Neki Wallet Name Creates a new Netki Wallet Name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1usernetkicreateAsync (NetkiNameAddress body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1usernetkicreateAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Neki Wallet Name Creates a new Netki Wallet Name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Netki name and Bitcoin address from Wallet or Exchange.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usernetkicreateAsyncWithHttpInfo (NetkiNameAddress body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1usernetkicreate");

            var localVarPath = "/v1/user/netki/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkicreate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkicreate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Update Netki Address Updates the address on an existing wallet name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1usernetkiupdate (Address body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1usernetkiupdateWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Netki Address Updates the address on an existing wallet name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1usernetkiupdateWithHttpInfo (Address body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1usernetkiupdate");

            var localVarPath = "/v1/user/netki/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkiupdate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkiupdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Update Netki Address Updates the address on an existing wallet name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1usernetkiupdateAsync (Address body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1usernetkiupdateAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Netki Address Updates the address on an existing wallet name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1usernetkiupdateAsyncWithHttpInfo (Address body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1usernetkiupdate");

            var localVarPath = "/v1/user/netki/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkiupdate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1usernetkiupdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete Profile Image Deletes a profile Image.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userprofileimagedelete (NetkiName body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userprofileimagedeleteWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Profile Image Deletes a profile Image.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userprofileimagedeleteWithHttpInfo (NetkiName body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1userprofileimagedelete");

            var localVarPath = "/v1/user/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimagedelete: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimagedelete: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete Profile Image Deletes a profile Image.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userprofileimagedeleteAsync (NetkiName body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userprofileimagedeleteAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Profile Image Deletes a profile Image.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Please enter a valid Netki name associated with your prfile Image.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofileimagedeleteAsyncWithHttpInfo (NetkiName body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1userprofileimagedelete");

            var localVarPath = "/v1/user/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimagedelete: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimagedelete: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Update Profile Image Updates Profile Image and allows public or private options for netki profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userprofileimageupdate (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userprofileimageupdateWithHttpInfo(netkiName, isPublic, file, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Profile Image Updates Profile Image and allows public or private options for netki profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userprofileimageupdateWithHttpInfo (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null)
        {
            // verify the required parameter 'netkiName' is set
            if (netkiName == null)
                throw new ApiException(400, "Missing required parameter 'netkiName' when calling AccountActionsApi->V1userprofileimageupdate");
            // verify the required parameter 'isPublic' is set
            if (isPublic == null)
                throw new ApiException(400, "Missing required parameter 'isPublic' when calling AccountActionsApi->V1userprofileimageupdate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AccountActionsApi->V1userprofileimageupdate");

            var localVarPath = "/v1/user/profile/image/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (netkiName != null) localVarFormParams.Add("netkiName", Configuration.ApiClient.ParameterToString(netkiName)); // form parameter
            if (isPublic != null) localVarFormParams.Add("isPublic", Configuration.ApiClient.ParameterToString(isPublic)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimageupdate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimageupdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Update Profile Image Updates Profile Image and allows public or private options for netki profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userprofileimageupdateAsync (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userprofileimageupdateAsyncWithHttpInfo(netkiName, isPublic, file, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Profile Image Updates Profile Image and allows public or private options for netki profile page.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="netkiName">Please enter your Netki Wallet Name.</param>
        /// <param name="isPublic">Please enter if this image can be public.</param>
        /// <param name="file">Enter a valid image, pdf or zip file under 5 MB in size.</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofileimageupdateAsyncWithHttpInfo (string netkiName, bool? isPublic, System.IO.Stream file, string authorization = null, string accept = null)
        {
            // verify the required parameter 'netkiName' is set
            if (netkiName == null)
                throw new ApiException(400, "Missing required parameter 'netkiName' when calling AccountActionsApi->V1userprofileimageupdate");
            // verify the required parameter 'isPublic' is set
            if (isPublic == null)
                throw new ApiException(400, "Missing required parameter 'isPublic' when calling AccountActionsApi->V1userprofileimageupdate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AccountActionsApi->V1userprofileimageupdate");

            var localVarPath = "/v1/user/profile/image/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (netkiName != null) localVarFormParams.Add("netkiName", Configuration.ApiClient.ParameterToString(netkiName)); // form parameter
            if (isPublic != null) localVarFormParams.Add("isPublic", Configuration.ApiClient.ParameterToString(isPublic)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimageupdate: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofileimageupdate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Profile Phone Set a New Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userprofilephone (NumberOtp body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userprofilephoneWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// New Profile Phone Set a New Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userprofilephoneWithHttpInfo (NumberOtp body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1userprofilephone");

            var localVarPath = "/v1/user/profile/phone/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephone: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephone: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// New Profile Phone Set a New Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneAsync (NumberOtp body, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userprofilephoneAsyncWithHttpInfo(body, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// New Profile Phone Set a New Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number</param>
        /// <param name="authorization">Enter a valid Api Key. (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneAsyncWithHttpInfo (NumberOtp body, string authorization = null, string accept = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountActionsApi->V1userprofilephone");

            var localVarPath = "/v1/user/profile/phone/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephone: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephone: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete Profile Phone Number Delete Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userprofilephoneNumber (string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userprofilephoneNumberWithHttpInfo(authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Profile Phone Number Delete Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userprofilephoneNumberWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/profile/phone/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Delete Profile Phone Number Delete Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneNumberAsync (string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userprofilephoneNumberAsyncWithHttpInfo(authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Profile Phone Number Delete Profile Phone Number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneNumberAsyncWithHttpInfo (string authorization = null, string accept = null)
        {

            var localVarPath = "/v1/user/profile/phone/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send OTP for Profile Phone Send OTP for Profile Phone addition or updation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult V1userprofilephoneotpNumber (string number, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = V1userprofilephoneotpNumberWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send OTP for Profile Phone Send OTP for Profile Phone addition or updation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse< SuccessResult > V1userprofilephoneotpNumberWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userprofilephoneotpNumber");

            var localVarPath = "/v1/user/profile/phone/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

        /// <summary>
        /// Send OTP for Profile Phone Send OTP for Profile Phone addition or updation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> V1userprofilephoneotpNumberAsync (string number, string authorization = null, string accept = null)
        {
             ApiResponse<SuccessResult> localVarResponse = await V1userprofilephoneotpNumberAsyncWithHttpInfo(number, authorization, accept);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send OTP for Profile Phone Send OTP for Profile Phone addition or updation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number"></param>
        /// <param name="authorization">API object to be added (optional)</param>
        /// <param name="accept">JSON, XML or CSV can be returned (Optional) (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> V1userprofilephoneotpNumberAsyncWithHttpInfo (string number, string authorization = null, string accept = null)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling AccountActionsApi->V1userprofilephoneotpNumber");

            var localVarPath = "/v1/user/profile/phone/otp/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "application/csv"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneotpNumber: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling V1userprofilephoneotpNumber: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<SuccessResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResult)));
            
        }

    }
}
