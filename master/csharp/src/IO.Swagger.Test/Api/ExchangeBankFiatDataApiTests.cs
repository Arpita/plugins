/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ExchangeBankFiatDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ExchangeBankFiatDataApiTests
    {
        private ExchangeBankFiatDataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExchangeBankFiatDataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExchangeBankFiatDataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ExchangeBankFiatDataApi
            //Assert.IsInstanceOfType(typeof(ExchangeBankFiatDataApi), instance, "instance is a ExchangeBankFiatDataApi");
        }

        
        /// <summary>
        /// Test V1userexchangebankfiataccounts
        /// </summary>
        [Test]
        public void V1userexchangebankfiataccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiataccounts(authorization, accept);
            //Assert.IsInstanceOf<FiatBankDataResponse> (response, "response is FiatBankDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatbalanceavailable
        /// </summary>
        [Test]
        public void V1userexchangebankfiatbalanceavailableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatbalanceavailable(authorization, accept);
            //Assert.IsInstanceOf<RateDataResponse> (response, "response is RateDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatbalancepending
        /// </summary>
        [Test]
        public void V1userexchangebankfiatbalancependingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatbalancepending(authorization, accept);
            //Assert.IsInstanceOf<RateDataResponse> (response, "response is RateDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatbalancetotal
        /// </summary>
        [Test]
        public void V1userexchangebankfiatbalancetotalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatbalancetotal(authorization, accept);
            //Assert.IsInstanceOf<RateDataResponse> (response, "response is RateDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatdepositcancelled
        /// </summary>
        [Test]
        public void V1userexchangebankfiatdepositcancelledTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatdepositcancelled(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatDepDataResponse> (response, "response is FiatDepDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatdepositunverified
        /// </summary>
        [Test]
        public void V1userexchangebankfiatdepositunverifiedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatdepositunverified(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatDepDataResponse> (response, "response is FiatDepDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatdepositverified
        /// </summary>
        [Test]
        public void V1userexchangebankfiatdepositverifiedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatdepositverified(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatDepDataResponse> (response, "response is FiatDepDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatwithdrawcancelled
        /// </summary>
        [Test]
        public void V1userexchangebankfiatwithdrawcancelledTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatwithdrawcancelled(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatWithDataResponse> (response, "response is FiatWithDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatwithdrawcompleted
        /// </summary>
        [Test]
        public void V1userexchangebankfiatwithdrawcompletedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatwithdrawcompleted(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatWithDataResponse> (response, "response is FiatWithDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatwithdrawunverified
        /// </summary>
        [Test]
        public void V1userexchangebankfiatwithdrawunverifiedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatwithdrawunverified(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatWithDataResponse> (response, "response is FiatWithDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebankfiatwithdrawverified
        /// </summary>
        [Test]
        public void V1userexchangebankfiatwithdrawverifiedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //long? from = null;
            //long? to = null;
            //int? max = null;
            //long? offset = null;
            //string accept = null;
            //var response = instance.V1userexchangebankfiatwithdrawverified(authorization, from, to, max, offset, accept);
            //Assert.IsInstanceOf<FiatWithDataResponse> (response, "response is FiatWithDataResponse");
        }
        
    }

}
