/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ExchangeTradeDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ExchangeTradeDataApiTests
    {
        private ExchangeTradeDataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExchangeTradeDataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExchangeTradeDataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<ExchangeTradeDataApi> (instance, "instance is a ExchangeTradeDataApi");
        }

        
        /// <summary>
        /// Test V1exchangeasklow
        /// </summary>
        [Test]
        public void V1exchangeasklowTest()
        {
            // TODO: add unit test for the method 'V1exchangeasklow'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangeasklow(accept);
            Assert.IsInstanceOf<RateDataResponse> (response, "response is RateDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangeaskorders
        /// </summary>
        [Test]
        public void V1exchangeaskordersTest()
        {
            // TODO: add unit test for the method 'V1exchangeaskorders'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangeaskorders(accept);
            Assert.IsInstanceOf<RateVolDataResponse> (response, "response is RateVolDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangebidhigh
        /// </summary>
        [Test]
        public void V1exchangebidhighTest()
        {
            // TODO: add unit test for the method 'V1exchangebidhigh'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangebidhigh(accept);
            Assert.IsInstanceOf<RateDataResponse> (response, "response is RateDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangebidorders
        /// </summary>
        [Test]
        public void V1exchangebidordersTest()
        {
            // TODO: add unit test for the method 'V1exchangebidorders'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangebidorders(accept);
            Assert.IsInstanceOf<RateVolDataResponse> (response, "response is RateVolDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangelastTrade
        /// </summary>
        [Test]
        public void V1exchangelastTradeTest()
        {
            // TODO: add unit test for the method 'V1exchangelastTrade'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangelastTrade(accept);
            Assert.IsInstanceOf<LastTradeDataResponse> (response, "response is LastTradeDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangemax24Hr
        /// </summary>
        [Test]
        public void V1exchangemax24HrTest()
        {
            // TODO: add unit test for the method 'V1exchangemax24Hr'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangemax24Hr(accept);
            Assert.IsInstanceOf<RateDiffDataResponse> (response, "response is RateDiffDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangemin24Hr
        /// </summary>
        [Test]
        public void V1exchangemin24HrTest()
        {
            // TODO: add unit test for the method 'V1exchangemin24Hr'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangemin24Hr(accept);
            Assert.IsInstanceOf<RateDiffDataResponse> (response, "response is RateDiffDataResponse");
        }
        
        /// <summary>
        /// Test V1exchangeticker
        /// </summary>
        [Test]
        public void V1exchangetickerTest()
        {
            // TODO: add unit test for the method 'V1exchangeticker'
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1exchangeticker(accept);
            Assert.IsInstanceOf<StandardTickerResultData> (response, "response is StandardTickerResultData");
        }
        
        /// <summary>
        /// Test V1userexchangeaskcancelled
        /// </summary>
        [Test]
        public void V1userexchangeaskcancelledTest()
        {
            // TODO: add unit test for the method 'V1userexchangeaskcancelled'
            string authorization = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangeaskcancelled(authorization, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangeaskcompleted
        /// </summary>
        [Test]
        public void V1userexchangeaskcompletedTest()
        {
            // TODO: add unit test for the method 'V1userexchangeaskcompleted'
            string authorization = null; // TODO: replace null with proper value
            long? from = null; // TODO: replace null with proper value
            long? to = null; // TODO: replace null with proper value
            int? max = null; // TODO: replace null with proper value
            long? offset = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangeaskcompleted(authorization, from, to, max, offset, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangeaskpending
        /// </summary>
        [Test]
        public void V1userexchangeaskpendingTest()
        {
            // TODO: add unit test for the method 'V1userexchangeaskpending'
            string authorization = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangeaskpending(authorization, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebidcancelled
        /// </summary>
        [Test]
        public void V1userexchangebidcancelledTest()
        {
            // TODO: add unit test for the method 'V1userexchangebidcancelled'
            string authorization = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangebidcancelled(authorization, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebidcompleted
        /// </summary>
        [Test]
        public void V1userexchangebidcompletedTest()
        {
            // TODO: add unit test for the method 'V1userexchangebidcompleted'
            string authorization = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangebidcompleted(authorization, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
        /// <summary>
        /// Test V1userexchangebidpending
        /// </summary>
        [Test]
        public void V1userexchangebidpendingTest()
        {
            // TODO: add unit test for the method 'V1userexchangebidpending'
            string authorization = null; // TODO: replace null with proper value
            string accept = null; // TODO: replace null with proper value
            var response = instance.V1userexchangebidpending(authorization, accept);
            Assert.IsInstanceOf<OrderDataResponse> (response, "response is OrderDataResponse");
        }
        
    }

}
