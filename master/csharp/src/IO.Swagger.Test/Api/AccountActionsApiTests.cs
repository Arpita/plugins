/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountActionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountActionsApiTests
    {
        private AccountActionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountActionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountActionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountActionsApi
            //Assert.IsInstanceOfType(typeof(AccountActionsApi), instance, "instance is a AccountActionsApi");
        }

        
        /// <summary>
        /// Test V1login
        /// </summary>
        [Test]
        public void V1loginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginFormNew body = null;
            //string accept = null;
            //var response = instance.V1login(body, accept);
            //Assert.IsInstanceOf<StandardLoginResultData> (response, "response is StandardLoginResultData");
        }
        
        /// <summary>
        /// Test V1logininitiate
        /// </summary>
        [Test]
        public void V1logininitiateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginId body = null;
            //string accept = null;
            //var response = instance.V1logininitiate(body, accept);
            //Assert.IsInstanceOf<StandardInitiateLoginResultData> (response, "response is StandardInitiateLoginResultData");
        }
        
        /// <summary>
        /// Test V1loginpasswordforgot
        /// </summary>
        [Test]
        public void V1loginpasswordforgotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Email body = null;
            //string accept = null;
            //var response = instance.V1loginpasswordforgot(body, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1signup
        /// </summary>
        [Test]
        public void V1signupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SignupForm body = null;
            //string accept = null;
            //var response = instance.V1signup(body, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userbankotpNumber
        /// </summary>
        [Test]
        public void V1userbankotpNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string number = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userbankotpNumber(number, authorization, accept);
            //Assert.IsInstanceOf<StandardInitiateLoginResultData> (response, "response is StandardInitiateLoginResultData");
        }
        
        /// <summary>
        /// Test V1userexchangekyc
        /// </summary>
        [Test]
        public void V1userexchangekycTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string panNumber = null;
            //string acctNick = null;
            //string name = null;
            //string ban = null;
            //string ifsc = null;
            //string acctType = null;
            //string banType = null;
            //string phone = null;
            //string otp = null;
            //System.IO.Stream file = null;
            //string authorization = null;
            //string message = null;
            //string accept = null;
            //var response = instance.V1userexchangekyc(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1usergcmCode
        /// </summary>
        [Test]
        public void V1usergcmCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1usergcmCode(code, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userkycotpNumber
        /// </summary>
        [Test]
        public void V1userkycotpNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string number = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userkycotpNumber(number, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userlogout
        /// </summary>
        [Test]
        public void V1userlogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userlogout(authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1usernetkicreate
        /// </summary>
        [Test]
        public void V1usernetkicreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NetkiNameAddress body = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1usernetkicreate(body, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1usernetkiupdate
        /// </summary>
        [Test]
        public void V1usernetkiupdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Address body = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1usernetkiupdate(body, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userprofileimagedeleteNetkiName
        /// </summary>
        [Test]
        public void V1userprofileimagedeleteNetkiNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string netkiName = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userprofileimagedeleteNetkiName(netkiName, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userprofileimageupdate
        /// </summary>
        [Test]
        public void V1userprofileimageupdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string netkiName = null;
            //bool? isPublic = null;
            //System.IO.Stream file = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userprofileimageupdate(netkiName, isPublic, file, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userprofilephone
        /// </summary>
        [Test]
        public void V1userprofilephoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NumberOtp body = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userprofilephone(body, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userprofilephoneNumber
        /// </summary>
        [Test]
        public void V1userprofilephoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userprofilephoneNumber(authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
        /// <summary>
        /// Test V1userprofilephoneotpNumber
        /// </summary>
        [Test]
        public void V1userprofilephoneotpNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string number = null;
            //string authorization = null;
            //string accept = null;
            //var response = instance.V1userprofilephoneotpNumber(number, authorization, accept);
            //Assert.IsInstanceOf<SuccessResult> (response, "response is SuccessResult");
        }
        
    }

}
