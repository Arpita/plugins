/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.SuccessCancelDataResponse;
import io.swagger.client.model.SuccessOrderDataResponse;
import io.swagger.client.model.RateVolData;
import io.swagger.client.model.MinFiat;
import io.swagger.client.model.MaxVol;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExchangeTradeActionsApi
 */
public class ExchangeTradeActionsApiTest {

    private final ExchangeTradeActionsApi api = new ExchangeTradeActionsApi();

    
    /**
     * Cancel Open Sell Order
     *
     * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangeaskcancelOrderIDTest() throws ApiException {
        String orderID = null;
        String authorization = null;
        // SuccessCancelDataResponse response = api.v1userexchangeaskcancelOrderID(orderID, authorization);

        // TODO: test validations
    }
    
    /**
     * BTC Sell Order
     *
     * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangeasknewTest() throws ApiException {
        RateVolData body = null;
        String authorization = null;
        String accept = null;
        // SuccessOrderDataResponse response = api.v1userexchangeasknew(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Cancel Open Buy Order
     *
     * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangebidcancelOrderIDTest() throws ApiException {
        String orderID = null;
        String authorization = null;
        // SuccessCancelDataResponse response = api.v1userexchangebidcancelOrderID(orderID, authorization);

        // TODO: test validations
    }
    
    /**
     * BTC Buy Order
     *
     * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangebidnewTest() throws ApiException {
        RateVolData body = null;
        String authorization = null;
        String accept = null;
        // SuccessOrderDataResponse response = api.v1userexchangebidnew(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Instantly Buy BTC
     *
     * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangeinstantbuyTest() throws ApiException {
        MinFiat body = null;
        String authorization = null;
        String accept = null;
        // SuccessOrderDataResponse response = api.v1userexchangeinstantbuy(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Instantly Sell BTC
     *
     * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userexchangeinstantsellTest() throws ApiException {
        MaxVol body = null;
        String authorization = null;
        String accept = null;
        // SuccessOrderDataResponse response = api.v1userexchangeinstantsell(body, authorization, accept);

        // TODO: test validations
    }
    
}
