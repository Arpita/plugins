/*
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.WalletAddressDataResponse;
import io.swagger.client.model.NewAddress;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.NewWallet;
import io.swagger.client.model.SendCoinWallet;
import io.swagger.client.model.SuccessResult;
import io.swagger.client.model.SendExchange;
import io.swagger.client.model.Code;
import io.swagger.client.model.WithdrawID;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletActionsApi
 */
public class WalletActionsApiTest {

    private final WalletActionsApi api = new WalletActionsApi();

    
    /**
     * New Bitcoin Address
     *
     * Generates a New Bitcoin Address to store coins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinaddressnewTest() throws ApiException {
        NewAddress body = null;
        String authorization = null;
        String accept = null;
        // WalletAddressDataResponse response = api.v1userwalletcoinaddressnew(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Create New Wallet
     *
     * Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinnewTest() throws ApiException {
        NewWallet body = null;
        String authorization = null;
        String accept = null;
        // WalletAddressDataResponse response = api.v1userwalletcoinnew(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Initiate Bitcoin Withdrawal
     *
     * The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinwithdrawinitiateTest() throws ApiException {
        SendCoinWallet body = null;
        String authorization = null;
        String accept = null;
        // SuccessResult response = api.v1userwalletcoinwithdrawinitiate(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Send to Exchange
     *
     * This function transfers funds to yout Exchange Balance without the need for any confirmations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinwithdrawsendToExchangeTest() throws ApiException {
        SendExchange body = null;
        String authorization = null;
        String accept = null;
        // SuccessResult response = api.v1userwalletcoinwithdrawsendToExchange(body, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Cancel Bitcoin Withdrawal
     *
     * Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinwithdrawunverifiedcancelWithdrawIDTest() throws ApiException {
        String withdrawID = null;
        String authorization = null;
        String accept = null;
        // SuccessResult response = api.v1userwalletcoinwithdrawunverifiedcancelWithdrawID(withdrawID, authorization, accept);

        // TODO: test validations
    }
    
    /**
     * Verify Bitcoin Withdrawal
     *
     * Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1userwalletcoinwithdrawverifyTest() throws ApiException {
        String authorization = null;
        Code body = null;
        String accept = null;
        // SuccessResult response = api.v1userwalletcoinwithdrawverify(authorization, body, accept);

        // TODO: test validations
    }
    
    /**
     * Gets a Verification Code
     *
     * Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1walletcoinwithdrawnewVerifycodeTest() throws ApiException {
        WithdrawID body = null;
        String authorization = null;
        String accept = null;
        // SuccessResult response = api.v1walletcoinwithdrawnewVerifycode(body, authorization, accept);

        // TODO: test validations
    }
    
}
