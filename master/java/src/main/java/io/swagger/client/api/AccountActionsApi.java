/*
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.FailResult;
import io.swagger.client.model.LoginFormNew;
import io.swagger.client.model.StandardLoginResultData;
import io.swagger.client.model.LoginId;
import io.swagger.client.model.StandardInitiateLoginResultData;
import io.swagger.client.model.Email;
import io.swagger.client.model.SuccessResult;
import io.swagger.client.model.SignupForm;
import io.swagger.client.model.StandardVerifySignupResultData;
import java.io.File;
import io.swagger.client.model.NetkiNameAddress;
import io.swagger.client.model.Address;
import io.swagger.client.model.NumberOtp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountActionsApi {
    private ApiClient apiClient;

    public AccountActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountActionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1login */
    private com.squareup.okhttp.Call v1loginCall(LoginFormNew body, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1login(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/login".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a Login Instance and returns an API Key.
     * Creates a Login Instance and returns an API Key
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return StandardLoginResultData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardLoginResultData v1login(LoginFormNew body, String accept) throws ApiException {
        ApiResponse<StandardLoginResultData> resp = v1loginWithHttpInfo(body, accept);
        return resp.getData();
    }

    /**
     * Creates a Login Instance and returns an API Key.
     * Creates a Login Instance and returns an API Key
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;StandardLoginResultData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardLoginResultData> v1loginWithHttpInfo(LoginFormNew body, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1loginCall(body, accept, null, null);
        Type localVarReturnType = new TypeToken<StandardLoginResultData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Login Instance and returns an API Key. (asynchronously)
     * Creates a Login Instance and returns an API Key
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1loginAsync(LoginFormNew body, String accept, final ApiCallback<StandardLoginResultData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1loginCall(body, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardLoginResultData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1logininitiate */
    private com.squareup.okhttp.Call v1logininitiateCall(LoginId body, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1logininitiate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/login/initiate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Initiate Login
     * Sends an Email with a Verification Link.
     * @param body Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return StandardInitiateLoginResultData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardInitiateLoginResultData v1logininitiate(LoginId body, String accept) throws ApiException {
        ApiResponse<StandardInitiateLoginResultData> resp = v1logininitiateWithHttpInfo(body, accept);
        return resp.getData();
    }

    /**
     * Initiate Login
     * Sends an Email with a Verification Link.
     * @param body Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;StandardInitiateLoginResultData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardInitiateLoginResultData> v1logininitiateWithHttpInfo(LoginId body, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1logininitiateCall(body, accept, null, null);
        Type localVarReturnType = new TypeToken<StandardInitiateLoginResultData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate Login (asynchronously)
     * Sends an Email with a Verification Link.
     * @param body Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1logininitiateAsync(LoginId body, String accept, final ApiCallback<StandardInitiateLoginResultData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1logininitiateCall(body, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardInitiateLoginResultData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1loginpasswordforgot */
    private com.squareup.okhttp.Call v1loginpasswordforgotCall(Email body, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1loginpasswordforgot(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/login/password/forgot".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Sends an email with a password reset token
     * Sends an email with a password reset token
     * @param body Enter a valid and registered Email ID. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1loginpasswordforgot(Email body, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1loginpasswordforgotWithHttpInfo(body, accept);
        return resp.getData();
    }

    /**
     * Sends an email with a password reset token
     * Sends an email with a password reset token
     * @param body Enter a valid and registered Email ID. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1loginpasswordforgotWithHttpInfo(Email body, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1loginpasswordforgotCall(body, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sends an email with a password reset token (asynchronously)
     * Sends an email with a password reset token
     * @param body Enter a valid and registered Email ID. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1loginpasswordforgotAsync(Email body, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1loginpasswordforgotCall(body, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1signup */
    private com.squareup.okhttp.Call v1signupCall(SignupForm body, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1signup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/signup".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a new Unverified Account.
     * Creates a new Unverified Account.
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1signup(SignupForm body, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1signupWithHttpInfo(body, accept);
        return resp.getData();
    }

    /**
     * Creates a new Unverified Account.
     * Creates a new Unverified Account.
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1signupWithHttpInfo(SignupForm body, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1signupCall(body, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Unverified Account. (asynchronously)
     * Creates a new Unverified Account.
     * @param body Please send the form with valid inputs. (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1signupAsync(SignupForm body, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1signupCall(body, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1signupverifyToken */
    private com.squareup.okhttp.Call v1signupverifyTokenCall(String token, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling v1signupverifyToken(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/signup/verify/{token}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verifies an Email token for Signup .
     * Creates a new Coinsecure Account.
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return StandardVerifySignupResultData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardVerifySignupResultData v1signupverifyToken(String token, String accept) throws ApiException {
        ApiResponse<StandardVerifySignupResultData> resp = v1signupverifyTokenWithHttpInfo(token, accept);
        return resp.getData();
    }

    /**
     * Verifies an Email token for Signup .
     * Creates a new Coinsecure Account.
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;StandardVerifySignupResultData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardVerifySignupResultData> v1signupverifyTokenWithHttpInfo(String token, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1signupverifyTokenCall(token, accept, null, null);
        Type localVarReturnType = new TypeToken<StandardVerifySignupResultData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verifies an Email token for Signup . (asynchronously)
     * Creates a new Coinsecure Account.
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1signupverifyTokenAsync(String token, String accept, final ApiCallback<StandardVerifySignupResultData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1signupverifyTokenCall(token, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardVerifySignupResultData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userbankotpNumber */
    private com.squareup.okhttp.Call v1userbankotpNumberCall(String number, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling v1userbankotpNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/bank/otp/{number}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Send OTP for Bank Link
     * Send OTP for an additional Bank Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return StandardInitiateLoginResultData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardInitiateLoginResultData v1userbankotpNumber(String number, String authorization, String accept) throws ApiException {
        ApiResponse<StandardInitiateLoginResultData> resp = v1userbankotpNumberWithHttpInfo(number, authorization, accept);
        return resp.getData();
    }

    /**
     * Send OTP for Bank Link
     * Send OTP for an additional Bank Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;StandardInitiateLoginResultData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardInitiateLoginResultData> v1userbankotpNumberWithHttpInfo(String number, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userbankotpNumberCall(number, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<StandardInitiateLoginResultData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send OTP for Bank Link (asynchronously)
     * Send OTP for an additional Bank Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userbankotpNumberAsync(String number, String authorization, String accept, final ApiCallback<StandardInitiateLoginResultData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userbankotpNumberCall(number, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardInitiateLoginResultData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangekyc */
    private com.squareup.okhttp.Call v1userexchangekycCall(String panNumber, String acctNick, String name, String ban, String ifsc, String acctType, String banType, String phone, String otp, File file, String authorization, String message, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'panNumber' is set
        if (panNumber == null) {
            throw new ApiException("Missing the required parameter 'panNumber' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'acctNick' is set
        if (acctNick == null) {
            throw new ApiException("Missing the required parameter 'acctNick' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'ban' is set
        if (ban == null) {
            throw new ApiException("Missing the required parameter 'ban' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'ifsc' is set
        if (ifsc == null) {
            throw new ApiException("Missing the required parameter 'ifsc' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'acctType' is set
        if (acctType == null) {
            throw new ApiException("Missing the required parameter 'acctType' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'banType' is set
        if (banType == null) {
            throw new ApiException("Missing the required parameter 'banType' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'otp' is set
        if (otp == null) {
            throw new ApiException("Missing the required parameter 'otp' when calling v1userexchangekyc(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling v1userexchangekyc(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/kyc".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (panNumber != null)
        localVarFormParams.put("panNumber", panNumber);
        if (acctNick != null)
        localVarFormParams.put("acctNick", acctNick);
        if (name != null)
        localVarFormParams.put("name", name);
        if (ban != null)
        localVarFormParams.put("ban", ban);
        if (ifsc != null)
        localVarFormParams.put("ifsc", ifsc);
        if (acctType != null)
        localVarFormParams.put("acctType", acctType);
        if (message != null)
        localVarFormParams.put("message", message);
        if (banType != null)
        localVarFormParams.put("banType", banType);
        if (phone != null)
        localVarFormParams.put("phone", phone);
        if (otp != null)
        localVarFormParams.put("otp", otp);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Submits a New Bank Link and initial KYC Documents.
     * Submits a New Bank Link and initial KYC Documents.
     * @param panNumber Please enter your Pan Card Number (required)
     * @param acctNick Please enter an Account NickName (required)
     * @param name Please enter your Name as it appears on your Bank account. (required)
     * @param ban Please enter your Bank account number. (required)
     * @param ifsc Please enter your IFSC Code. (required)
     * @param acctType Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
     * @param banType Please enter your Bank account type. Allowable Values are Savings or Current. (required)
     * @param phone Please enter your Valid Phone Number. (required)
     * @param otp Please enter your OTP from SMS. The code can be requested from /v1/user/kyc/otp/:number. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param message Please enter an optional message if needed. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangekyc(String panNumber, String acctNick, String name, String ban, String ifsc, String acctType, String banType, String phone, String otp, File file, String authorization, String message, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangekycWithHttpInfo(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept);
        return resp.getData();
    }

    /**
     * Submits a New Bank Link and initial KYC Documents.
     * Submits a New Bank Link and initial KYC Documents.
     * @param panNumber Please enter your Pan Card Number (required)
     * @param acctNick Please enter an Account NickName (required)
     * @param name Please enter your Name as it appears on your Bank account. (required)
     * @param ban Please enter your Bank account number. (required)
     * @param ifsc Please enter your IFSC Code. (required)
     * @param acctType Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
     * @param banType Please enter your Bank account type. Allowable Values are Savings or Current. (required)
     * @param phone Please enter your Valid Phone Number. (required)
     * @param otp Please enter your OTP from SMS. The code can be requested from /v1/user/kyc/otp/:number. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param message Please enter an optional message if needed. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangekycWithHttpInfo(String panNumber, String acctNick, String name, String ban, String ifsc, String acctType, String banType, String phone, String otp, File file, String authorization, String message, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangekycCall(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submits a New Bank Link and initial KYC Documents. (asynchronously)
     * Submits a New Bank Link and initial KYC Documents.
     * @param panNumber Please enter your Pan Card Number (required)
     * @param acctNick Please enter an Account NickName (required)
     * @param name Please enter your Name as it appears on your Bank account. (required)
     * @param ban Please enter your Bank account number. (required)
     * @param ifsc Please enter your IFSC Code. (required)
     * @param acctType Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
     * @param banType Please enter your Bank account type. Allowable Values are Savings or Current. (required)
     * @param phone Please enter your Valid Phone Number. (required)
     * @param otp Please enter your OTP from SMS. The code can be requested from /v1/user/kyc/otp/:number. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param message Please enter an optional message if needed. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangekycAsync(String panNumber, String acctNick, String name, String ban, String ifsc, String acctType, String banType, String phone, String otp, File file, String authorization, String message, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangekycCall(panNumber, acctNick, name, ban, ifsc, acctType, banType, phone, otp, file, authorization, message, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1usergcmCode */
    private com.squareup.okhttp.Call v1usergcmCodeCall(String code, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling v1usergcmCode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/gcm/{code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete GCM Code
     * Delete GCM Code and associated API Key.
     * @param code  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1usergcmCode(String code, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1usergcmCodeWithHttpInfo(code, authorization, accept);
        return resp.getData();
    }

    /**
     * Delete GCM Code
     * Delete GCM Code and associated API Key.
     * @param code  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1usergcmCodeWithHttpInfo(String code, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1usergcmCodeCall(code, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete GCM Code (asynchronously)
     * Delete GCM Code and associated API Key.
     * @param code  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1usergcmCodeAsync(String code, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1usergcmCodeCall(code, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userkycotpNumber */
    private com.squareup.okhttp.Call v1userkycotpNumberCall(String number, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling v1userkycotpNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/kyc/otp/{number}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Send OTP for KYC Link
     * Send OTP for KYC Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userkycotpNumber(String number, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userkycotpNumberWithHttpInfo(number, authorization, accept);
        return resp.getData();
    }

    /**
     * Send OTP for KYC Link
     * Send OTP for KYC Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userkycotpNumberWithHttpInfo(String number, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userkycotpNumberCall(number, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send OTP for KYC Link (asynchronously)
     * Send OTP for KYC Link.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userkycotpNumberAsync(String number, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userkycotpNumberCall(number, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userlogout */
    private com.squareup.okhttp.Call v1userlogoutCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Logout User
     * Logs out user and Deletes the api key and associated session data.
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userlogout(String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userlogoutWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Logout User
     * Logs out user and Deletes the api key and associated session data.
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userlogoutWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userlogoutCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Logout User (asynchronously)
     * Logs out user and Deletes the api key and associated session data.
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userlogoutAsync(String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userlogoutCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1usernetkicreate */
    private com.squareup.okhttp.Call v1usernetkicreateCall(NetkiNameAddress body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1usernetkicreate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/netki/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create Neki Wallet Name
     * Creates a new Netki Wallet Name.
     * @param body Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1usernetkicreate(NetkiNameAddress body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1usernetkicreateWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Create Neki Wallet Name
     * Creates a new Netki Wallet Name.
     * @param body Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1usernetkicreateWithHttpInfo(NetkiNameAddress body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1usernetkicreateCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Neki Wallet Name (asynchronously)
     * Creates a new Netki Wallet Name.
     * @param body Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1usernetkicreateAsync(NetkiNameAddress body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1usernetkicreateCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1usernetkiupdate */
    private com.squareup.okhttp.Call v1usernetkiupdateCall(Address body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1usernetkiupdate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/netki/update".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Netki Address
     * Updates the address on an existing wallet name.
     * @param body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1usernetkiupdate(Address body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1usernetkiupdateWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Update Netki Address
     * Updates the address on an existing wallet name.
     * @param body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1usernetkiupdateWithHttpInfo(Address body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1usernetkiupdateCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Netki Address (asynchronously)
     * Updates the address on an existing wallet name.
     * @param body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1usernetkiupdateAsync(Address body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1usernetkiupdateCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userprofileimagedeleteNetkiName */
    private com.squareup.okhttp.Call v1userprofileimagedeleteNetkiNameCall(String netkiName, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'netkiName' is set
        if (netkiName == null) {
            throw new ApiException("Missing the required parameter 'netkiName' when calling v1userprofileimagedeleteNetkiName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/profile/image/delete/{netkiName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "netkiName" + "\\}", apiClient.escapeString(netkiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete Profile Image
     * Deletes a profile Image.
     * @param netkiName  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userprofileimagedeleteNetkiName(String netkiName, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userprofileimagedeleteNetkiNameWithHttpInfo(netkiName, authorization, accept);
        return resp.getData();
    }

    /**
     * Delete Profile Image
     * Deletes a profile Image.
     * @param netkiName  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userprofileimagedeleteNetkiNameWithHttpInfo(String netkiName, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userprofileimagedeleteNetkiNameCall(netkiName, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Profile Image (asynchronously)
     * Deletes a profile Image.
     * @param netkiName  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userprofileimagedeleteNetkiNameAsync(String netkiName, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userprofileimagedeleteNetkiNameCall(netkiName, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userprofileimageupdate */
    private com.squareup.okhttp.Call v1userprofileimageupdateCall(String netkiName, Boolean isPublic, File file, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'netkiName' is set
        if (netkiName == null) {
            throw new ApiException("Missing the required parameter 'netkiName' when calling v1userprofileimageupdate(Async)");
        }
        
        // verify the required parameter 'isPublic' is set
        if (isPublic == null) {
            throw new ApiException("Missing the required parameter 'isPublic' when calling v1userprofileimageupdate(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling v1userprofileimageupdate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/profile/image/update".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (netkiName != null)
        localVarFormParams.put("netkiName", netkiName);
        if (isPublic != null)
        localVarFormParams.put("isPublic", isPublic);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Profile Image
     * Updates Profile Image and allows public or private options for netki profile page.
     * @param netkiName Please enter your Netki Wallet Name. (required)
     * @param isPublic Please enter if this image can be public. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userprofileimageupdate(String netkiName, Boolean isPublic, File file, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userprofileimageupdateWithHttpInfo(netkiName, isPublic, file, authorization, accept);
        return resp.getData();
    }

    /**
     * Update Profile Image
     * Updates Profile Image and allows public or private options for netki profile page.
     * @param netkiName Please enter your Netki Wallet Name. (required)
     * @param isPublic Please enter if this image can be public. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userprofileimageupdateWithHttpInfo(String netkiName, Boolean isPublic, File file, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userprofileimageupdateCall(netkiName, isPublic, file, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Profile Image (asynchronously)
     * Updates Profile Image and allows public or private options for netki profile page.
     * @param netkiName Please enter your Netki Wallet Name. (required)
     * @param isPublic Please enter if this image can be public. (required)
     * @param file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userprofileimageupdateAsync(String netkiName, Boolean isPublic, File file, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userprofileimageupdateCall(netkiName, isPublic, file, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userprofilephone */
    private com.squareup.okhttp.Call v1userprofilephoneCall(NumberOtp body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userprofilephone(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/profile/phone/new".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * New Profile Phone
     * Set a New Profile Phone Number.
     * @param body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userprofilephone(NumberOtp body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userprofilephoneWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * New Profile Phone
     * Set a New Profile Phone Number.
     * @param body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userprofilephoneWithHttpInfo(NumberOtp body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userprofilephoneCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * New Profile Phone (asynchronously)
     * Set a New Profile Phone Number.
     * @param body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userprofilephoneAsync(NumberOtp body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userprofilephoneCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userprofilephoneNumber */
    private com.squareup.okhttp.Call v1userprofilephoneNumberCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/profile/phone/delete".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete Profile Phone Number
     * Delete Profile Phone Number.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userprofilephoneNumber(String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userprofilephoneNumberWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Delete Profile Phone Number
     * Delete Profile Phone Number.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userprofilephoneNumberWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userprofilephoneNumberCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Profile Phone Number (asynchronously)
     * Delete Profile Phone Number.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userprofilephoneNumberAsync(String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userprofilephoneNumberCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userprofilephoneotpNumber */
    private com.squareup.okhttp.Call v1userprofilephoneotpNumberCall(String number, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling v1userprofilephoneotpNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/profile/phone/otp/{number}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Send OTP for Profile Phone
     * Send OTP for Profile Phone addition or updation.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userprofilephoneotpNumber(String number, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userprofilephoneotpNumberWithHttpInfo(number, authorization, accept);
        return resp.getData();
    }

    /**
     * Send OTP for Profile Phone
     * Send OTP for Profile Phone addition or updation.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userprofilephoneotpNumberWithHttpInfo(String number, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userprofilephoneotpNumberCall(number, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send OTP for Profile Phone (asynchronously)
     * Send OTP for Profile Phone addition or updation.
     * @param number  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userprofilephoneotpNumberAsync(String number, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userprofilephoneotpNumberCall(number, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
