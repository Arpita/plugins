/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.RateDataResponse;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.RateVolDataResponse;
import io.swagger.client.model.LastTradeDataResponse;
import io.swagger.client.model.RateDiffDataResponse;
import io.swagger.client.model.StandardTickerResultData;
import io.swagger.client.model.OrderDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeTradeDataApi {
    private ApiClient apiClient;

    public ExchangeTradeDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeTradeDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1exchangeasklow */
    private com.squareup.okhttp.Call v1exchangeasklowCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/ask/low".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lowest Ask
     * Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDataResponse v1exchangeasklow(String accept) throws ApiException {
        ApiResponse<RateDataResponse> resp = v1exchangeasklowWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Lowest Ask
     * Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDataResponse> v1exchangeasklowWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangeasklowCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lowest Ask (asynchronously)
     * Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangeasklowAsync(String accept, final ApiCallback<RateDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangeasklowCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangeaskorders */
    private com.squareup.okhttp.Call v1exchangeaskordersCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/ask/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * All Sell Orders
     * Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateVolDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateVolDataResponse v1exchangeaskorders(String accept) throws ApiException {
        ApiResponse<RateVolDataResponse> resp = v1exchangeaskordersWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * All Sell Orders
     * Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateVolDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateVolDataResponse> v1exchangeaskordersWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangeaskordersCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateVolDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All Sell Orders (asynchronously)
     * Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangeaskordersAsync(String accept, final ApiCallback<RateVolDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangeaskordersCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateVolDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangebidhigh */
    private com.squareup.okhttp.Call v1exchangebidhighCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/bid/high".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns the Highest Bid in the Order Book
     * Highest Bid.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDataResponse v1exchangebidhigh(String accept) throws ApiException {
        ApiResponse<RateDataResponse> resp = v1exchangebidhighWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Returns the Highest Bid in the Order Book
     * Highest Bid.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDataResponse> v1exchangebidhighWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangebidhighCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the Highest Bid in the Order Book (asynchronously)
     * Highest Bid.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangebidhighAsync(String accept, final ApiCallback<RateDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangebidhighCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangebidorders */
    private com.squareup.okhttp.Call v1exchangebidordersCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/bid/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * All Buy Orders
     * Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateVolDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateVolDataResponse v1exchangebidorders(String accept) throws ApiException {
        ApiResponse<RateVolDataResponse> resp = v1exchangebidordersWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * All Buy Orders
     * Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateVolDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateVolDataResponse> v1exchangebidordersWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangebidordersCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateVolDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All Buy Orders (asynchronously)
     * Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangebidordersAsync(String accept, final ApiCallback<RateVolDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangebidordersCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateVolDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangelastTrade */
    private com.squareup.okhttp.Call v1exchangelastTradeCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/lastTrade".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Last Trade
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return LastTradeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LastTradeDataResponse v1exchangelastTrade(String accept) throws ApiException {
        ApiResponse<LastTradeDataResponse> resp = v1exchangelastTradeWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Last Trade
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;LastTradeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LastTradeDataResponse> v1exchangelastTradeWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangelastTradeCall(accept, null, null);
        Type localVarReturnType = new TypeToken<LastTradeDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Last Trade (asynchronously)
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangelastTradeAsync(String accept, final ApiCallback<LastTradeDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangelastTradeCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LastTradeDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangemax24Hr */
    private com.squareup.okhttp.Call v1exchangemax24HrCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/max24Hr".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Max 24 Hour Rate
     * Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDiffDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDiffDataResponse v1exchangemax24Hr(String accept) throws ApiException {
        ApiResponse<RateDiffDataResponse> resp = v1exchangemax24HrWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Max 24 Hour Rate
     * Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDiffDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDiffDataResponse> v1exchangemax24HrWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangemax24HrCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateDiffDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Max 24 Hour Rate (asynchronously)
     * Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangemax24HrAsync(String accept, final ApiCallback<RateDiffDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangemax24HrCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDiffDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangemin24Hr */
    private com.squareup.okhttp.Call v1exchangemin24HrCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/min24Hr".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Min 24 Hour Rate
     * Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDiffDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDiffDataResponse v1exchangemin24Hr(String accept) throws ApiException {
        ApiResponse<RateDiffDataResponse> resp = v1exchangemin24HrWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Min 24 Hour Rate
     * Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDiffDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDiffDataResponse> v1exchangemin24HrWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangemin24HrCall(accept, null, null);
        Type localVarReturnType = new TypeToken<RateDiffDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Min 24 Hour Rate (asynchronously)
     * Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangemin24HrAsync(String accept, final ApiCallback<RateDiffDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangemin24HrCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDiffDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangeticker */
    private com.squareup.okhttp.Call v1exchangetickerCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/exchange/ticker".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Ticker
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return StandardTickerResultData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardTickerResultData v1exchangeticker(String accept) throws ApiException {
        ApiResponse<StandardTickerResultData> resp = v1exchangetickerWithHttpInfo(accept);
        return resp.getData();
    }

    /**
     * Exchange Ticker
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;StandardTickerResultData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardTickerResultData> v1exchangetickerWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangetickerCall(accept, null, null);
        Type localVarReturnType = new TypeToken<StandardTickerResultData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Ticker (asynchronously)
     * Returns a summary of data from the Exchange.
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangetickerAsync(String accept, final ApiCallback<StandardTickerResultData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangetickerCall(accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardTickerResultData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeaskcancelled */
    private com.squareup.okhttp.Call v1userexchangeaskcancelledCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangeaskcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/ask/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled User Sell Orders
     * Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangeaskcancelled(String authorization, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangeaskcancelledWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Cancelled User Sell Orders
     * Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangeaskcancelledWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeaskcancelledCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled User Sell Orders (asynchronously)
     * Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeaskcancelledAsync(String authorization, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeaskcancelledCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeaskcompleted */
    private com.squareup.okhttp.Call v1userexchangeaskcompletedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangeaskcompleted(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/ask/completed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completed User Sell Orders
     * Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangeaskcompleted(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangeaskcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Completed User Sell Orders
     * Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangeaskcompletedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeaskcompletedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completed User Sell Orders (asynchronously)
     * Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeaskcompletedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeaskcompletedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeaskpending */
    private com.squareup.okhttp.Call v1userexchangeaskpendingCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangeaskpending(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/ask/pending".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Pending User Sell Orders
     * Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangeaskpending(String authorization, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangeaskpendingWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Pending User Sell Orders
     * Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangeaskpendingWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeaskpendingCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pending User Sell Orders (asynchronously)
     * Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeaskpendingAsync(String authorization, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeaskpendingCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebidcancelled */
    private com.squareup.okhttp.Call v1userexchangebidcancelledCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebidcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bid/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled User Buy Orders
     * Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangebidcancelled(String authorization, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangebidcancelledWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Cancelled User Buy Orders
     * Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangebidcancelledWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebidcancelledCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled User Buy Orders (asynchronously)
     * Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebidcancelledAsync(String authorization, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebidcancelledCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebidcompleted */
    private com.squareup.okhttp.Call v1userexchangebidcompletedCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebidcompleted(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bid/completed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completed User Buy Orders
     * Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangebidcompleted(String authorization, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangebidcompletedWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Completed User Buy Orders
     * Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangebidcompletedWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebidcompletedCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completed User Buy Orders (asynchronously)
     * Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebidcompletedAsync(String authorization, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebidcompletedCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebidpending */
    private com.squareup.okhttp.Call v1userexchangebidpendingCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebidpending(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bid/pending".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Pending User Buy Orders
     * Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return OrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDataResponse v1userexchangebidpending(String authorization, String accept) throws ApiException {
        ApiResponse<OrderDataResponse> resp = v1userexchangebidpendingWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Pending User Buy Orders
     * Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;OrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDataResponse> v1userexchangebidpendingWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebidpendingCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pending User Buy Orders (asynchronously)
     * Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebidpendingAsync(String authorization, String accept, final ApiCallback<OrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebidpendingCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
