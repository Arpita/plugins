/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.TradeAddressDataResponse;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.VolDataResponse;
import io.swagger.client.model.CoinDepDataResponse;
import io.swagger.client.model.TradeCoinWithdrawDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeBankCoinDataApi {
    private ApiClient apiClient;

    public ExchangeBankCoinDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeBankCoinDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1userexchangebankcoinaddresses */
    private com.squareup.okhttp.Call v1userexchangebankcoinaddressesCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinaddresses(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/addresses".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Coin Addresses
     * Gets a List of Users Exchange Bitcoin Deposit Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeAddressDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeAddressDataResponse v1userexchangebankcoinaddresses(String authorization, String accept) throws ApiException {
        ApiResponse<TradeAddressDataResponse> resp = v1userexchangebankcoinaddressesWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Coin Addresses
     * Gets a List of Users Exchange Bitcoin Deposit Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeAddressDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeAddressDataResponse> v1userexchangebankcoinaddressesWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinaddressesCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeAddressDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Coin Addresses (asynchronously)
     * Gets a List of Users Exchange Bitcoin Deposit Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinaddressesAsync(String authorization, String accept, final ApiCallback<TradeAddressDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinaddressesCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeAddressDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinbalanceavailable */
    private com.squareup.okhttp.Call v1userexchangebankcoinbalanceavailableCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinbalanceavailable(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/balance/total".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Available Exchange Coin Balance
     * Returns balance which is in Available for Trades. The response is in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return VolDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolDataResponse v1userexchangebankcoinbalanceavailable(String authorization, String accept) throws ApiException {
        ApiResponse<VolDataResponse> resp = v1userexchangebankcoinbalanceavailableWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Available Exchange Coin Balance
     * Returns balance which is in Available for Trades. The response is in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;VolDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolDataResponse> v1userexchangebankcoinbalanceavailableWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinbalanceavailableCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Available Exchange Coin Balance (asynchronously)
     * Returns balance which is in Available for Trades. The response is in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinbalanceavailableAsync(String authorization, String accept, final ApiCallback<VolDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinbalanceavailableCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinbalancepending */
    private com.squareup.okhttp.Call v1userexchangebankcoinbalancependingCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinbalancepending(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/balance/pending".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * In Trade Coin Balance
     * Returns in-trade or pending coin balance in satoshi.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return VolDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolDataResponse v1userexchangebankcoinbalancepending(String authorization, String accept) throws ApiException {
        ApiResponse<VolDataResponse> resp = v1userexchangebankcoinbalancependingWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * In Trade Coin Balance
     * Returns in-trade or pending coin balance in satoshi.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;VolDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolDataResponse> v1userexchangebankcoinbalancependingWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinbalancependingCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * In Trade Coin Balance (asynchronously)
     * Returns in-trade or pending coin balance in satoshi.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinbalancependingAsync(String authorization, String accept, final ApiCallback<VolDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinbalancependingCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinbalancetotal */
    private com.squareup.okhttp.Call v1userexchangebankcoinbalancetotalCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinbalancetotal(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/balance/available".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Total Exchange Coin Balance
     * Returns users total coin balance in satoshis. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return VolDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VolDataResponse v1userexchangebankcoinbalancetotal(String authorization, String accept) throws ApiException {
        ApiResponse<VolDataResponse> resp = v1userexchangebankcoinbalancetotalWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Total Exchange Coin Balance
     * Returns users total coin balance in satoshis. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;VolDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VolDataResponse> v1userexchangebankcoinbalancetotalWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinbalancetotalCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Total Exchange Coin Balance (asynchronously)
     * Returns users total coin balance in satoshis. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinbalancetotalAsync(String authorization, String accept, final ApiCallback<VolDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinbalancetotalCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VolDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoindepositcancelled */
    private com.squareup.okhttp.Call v1userexchangebankcoindepositcancelledCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoindepositcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/deposit/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled Exchange Coin Deposits
     * Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return CoinDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinDepDataResponse v1userexchangebankcoindepositcancelled(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<CoinDepDataResponse> resp = v1userexchangebankcoindepositcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Cancelled Exchange Coin Deposits
     * Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;CoinDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinDepDataResponse> v1userexchangebankcoindepositcancelledWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoindepositcancelledCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled Exchange Coin Deposits (asynchronously)
     * Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoindepositcancelledAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<CoinDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoindepositcancelledCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoindepositunverified */
    private com.squareup.okhttp.Call v1userexchangebankcoindepositunverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoindepositunverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/deposit/unverified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unverified Exchange Coin Deposits
     * Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return CoinDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinDepDataResponse v1userexchangebankcoindepositunverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<CoinDepDataResponse> resp = v1userexchangebankcoindepositunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Unverified Exchange Coin Deposits
     * Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;CoinDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinDepDataResponse> v1userexchangebankcoindepositunverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoindepositunverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unverified Exchange Coin Deposits (asynchronously)
     * Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoindepositunverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<CoinDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoindepositunverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoindepositverified */
    private com.squareup.okhttp.Call v1userexchangebankcoindepositverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoindepositverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/deposit/verified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verified Exchange Coin Deposits
     * Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return CoinDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CoinDepDataResponse v1userexchangebankcoindepositverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<CoinDepDataResponse> resp = v1userexchangebankcoindepositverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Verified Exchange Coin Deposits
     * Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;CoinDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CoinDepDataResponse> v1userexchangebankcoindepositverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoindepositverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verified Exchange Coin Deposits (asynchronously)
     * Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoindepositverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<CoinDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoindepositverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CoinDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawcancelled */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawcancelledCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinwithdrawcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled Exchange Coin Withdrawals
     * Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeCoinWithdrawDataResponse v1userexchangebankcoinwithdrawcancelled(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<TradeCoinWithdrawDataResponse> resp = v1userexchangebankcoinwithdrawcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Cancelled Exchange Coin Withdrawals
     * Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeCoinWithdrawDataResponse> v1userexchangebankcoinwithdrawcancelledWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawcancelledCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled Exchange Coin Withdrawals (asynchronously)
     * Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawcancelledAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<TradeCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawcancelledCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawcompleted */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawcompletedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinwithdrawcompleted(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/completed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completed Exchange Coin Withdrawals
     * Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeCoinWithdrawDataResponse v1userexchangebankcoinwithdrawcompleted(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<TradeCoinWithdrawDataResponse> resp = v1userexchangebankcoinwithdrawcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Completed Exchange Coin Withdrawals
     * Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeCoinWithdrawDataResponse> v1userexchangebankcoinwithdrawcompletedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawcompletedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completed Exchange Coin Withdrawals (asynchronously)
     * Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawcompletedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<TradeCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawcompletedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawunverified */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawunverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinwithdrawunverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unverified Exchange Coin Withdrawals
     * Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeCoinWithdrawDataResponse v1userexchangebankcoinwithdrawunverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<TradeCoinWithdrawDataResponse> resp = v1userexchangebankcoinwithdrawunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Unverified Exchange Coin Withdrawals
     * Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeCoinWithdrawDataResponse> v1userexchangebankcoinwithdrawunverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawunverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unverified Exchange Coin Withdrawals (asynchronously)
     * Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawunverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<TradeCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawunverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawverified */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankcoinwithdrawverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/verified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verified Exchange Coin Withdrawals
     * Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeCoinWithdrawDataResponse v1userexchangebankcoinwithdrawverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<TradeCoinWithdrawDataResponse> resp = v1userexchangebankcoinwithdrawverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Verified Exchange Coin Withdrawals
     * Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeCoinWithdrawDataResponse> v1userexchangebankcoinwithdrawverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verified Exchange Coin Withdrawals (asynchronously)
     * Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<TradeCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
