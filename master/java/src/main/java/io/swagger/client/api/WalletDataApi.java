/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.WalletAddressDataResponse;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.WalletsDataResponse;
import io.swagger.client.model.WalletCoinWithdrawDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletDataApi {
    private ApiClient apiClient;

    public WalletDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1userwalletcoinaddressWalletID */
    private com.squareup.okhttp.Call v1userwalletcoinaddressWalletIDCall(String walletID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'walletID' is set
        if (walletID == null) {
            throw new ApiException("Missing the required parameter 'walletID' when calling v1userwalletcoinaddressWalletID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/address/{walletID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "walletID" + "\\}", apiClient.escapeString(walletID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Wallet Bitcoin Addresses
     * Gets a List of Users Bitcoin Deposit Addresses.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletAddressDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletAddressDataResponse v1userwalletcoinaddressWalletID(String walletID, String authorization, String accept) throws ApiException {
        ApiResponse<WalletAddressDataResponse> resp = v1userwalletcoinaddressWalletIDWithHttpInfo(walletID, authorization, accept);
        return resp.getData();
    }

    /**
     * Wallet Bitcoin Addresses
     * Gets a List of Users Bitcoin Deposit Addresses.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletAddressDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletAddressDataResponse> v1userwalletcoinaddressWalletIDWithHttpInfo(String walletID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoinaddressWalletIDCall(walletID, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wallet Bitcoin Addresses (asynchronously)
     * Gets a List of Users Bitcoin Deposit Addresses.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoinaddressWalletIDAsync(String walletID, String authorization, String accept, final ApiCallback<WalletAddressDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoinaddressWalletIDCall(walletID, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userwalletcoindepositconfirmedWalletID */
    private com.squareup.okhttp.Call v1userwalletcoindepositconfirmedWalletIDCall(String walletID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'walletID' is set
        if (walletID == null) {
            throw new ApiException("Missing the required parameter 'walletID' when calling v1userwalletcoindepositconfirmedWalletID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/deposit/confirmed/{walletID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "walletID" + "\\}", apiClient.escapeString(walletID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Confirmed Wallet Transactions
     * Gets your Confirmed Wallet Bitcoin Transactions.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletAddressDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletAddressDataResponse v1userwalletcoindepositconfirmedWalletID(String walletID, String authorization, String accept) throws ApiException {
        ApiResponse<WalletAddressDataResponse> resp = v1userwalletcoindepositconfirmedWalletIDWithHttpInfo(walletID, authorization, accept);
        return resp.getData();
    }

    /**
     * Confirmed Wallet Transactions
     * Gets your Confirmed Wallet Bitcoin Transactions.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletAddressDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletAddressDataResponse> v1userwalletcoindepositconfirmedWalletIDWithHttpInfo(String walletID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoindepositconfirmedWalletIDCall(walletID, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Confirmed Wallet Transactions (asynchronously)
     * Gets your Confirmed Wallet Bitcoin Transactions.
     * @param walletID  (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoindepositconfirmedWalletIDAsync(String walletID, String authorization, String accept, final ApiCallback<WalletAddressDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoindepositconfirmedWalletIDCall(walletID, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userwalletcoindepositconfirmedall */
    private com.squareup.okhttp.Call v1userwalletcoindepositconfirmedallCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/deposit/confirmed/all".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Confirmed Wallet Deposit
     * Gets the total confirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletAddressDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletAddressDataResponse v1userwalletcoindepositconfirmedall(String authorization, String accept) throws ApiException {
        ApiResponse<WalletAddressDataResponse> resp = v1userwalletcoindepositconfirmedallWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Confirmed Wallet Deposit
     * Gets the total confirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletAddressDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletAddressDataResponse> v1userwalletcoindepositconfirmedallWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoindepositconfirmedallCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Confirmed Wallet Deposit (asynchronously)
     * Gets the total confirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoindepositconfirmedallAsync(String authorization, String accept, final ApiCallback<WalletAddressDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoindepositconfirmedallCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletAddressDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userwalletcoindepositunconfirmedWalletID */
    private com.squareup.okhttp.Call v1userwalletcoindepositunconfirmedWalletIDCall(String walletID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'walletID' is set
        if (walletID == null) {
            throw new ApiException("Missing the required parameter 'walletID' when calling v1userwalletcoindepositunconfirmedWalletID(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userwalletcoindepositunconfirmedWalletID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/{walletID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "walletID" + "\\}", apiClient.escapeString(walletID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unconfirmed Transactions in Wallet
     * Gets the unconfirmed transactions on an account/ wallet.
     * @param walletID  (required)
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1userwalletcoindepositunconfirmedWalletID(String walletID, String authorization, String accept) throws ApiException {
        v1userwalletcoindepositunconfirmedWalletIDWithHttpInfo(walletID, authorization, accept);
    }

    /**
     * Unconfirmed Transactions in Wallet
     * Gets the unconfirmed transactions on an account/ wallet.
     * @param walletID  (required)
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1userwalletcoindepositunconfirmedWalletIDWithHttpInfo(String walletID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoindepositunconfirmedWalletIDCall(walletID, authorization, accept, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unconfirmed Transactions in Wallet (asynchronously)
     * Gets the unconfirmed transactions on an account/ wallet.
     * @param walletID  (required)
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoindepositunconfirmedWalletIDAsync(String walletID, String authorization, String accept, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoindepositunconfirmedWalletIDCall(walletID, authorization, accept, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v1userwalletcoindepositunconfirmedall */
    private com.squareup.okhttp.Call v1userwalletcoindepositunconfirmedallCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/deposit/unconfirmed/all".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * All Unconfirmed Deposits
     * Gets the total unconfirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1userwalletcoindepositunconfirmedall(String authorization, String accept) throws ApiException {
        v1userwalletcoindepositunconfirmedallWithHttpInfo(authorization, accept);
    }

    /**
     * All Unconfirmed Deposits
     * Gets the total unconfirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1userwalletcoindepositunconfirmedallWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoindepositunconfirmedallCall(authorization, accept, null, null);
        return apiClient.execute(call);
    }

    /**
     * All Unconfirmed Deposits (asynchronously)
     * Gets the total unconfirmed transactions across all accounts and addresses
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoindepositunconfirmedallAsync(String authorization, String accept, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoindepositunconfirmedallCall(authorization, accept, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v1userwalletcoinwallets */
    private com.squareup.okhttp.Call v1userwalletcoinwalletsCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/coin/wallets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Wallet Details
     * Gets a List of Users Wallets.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletsDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletsDataResponse v1userwalletcoinwallets(String authorization, String accept) throws ApiException {
        ApiResponse<WalletsDataResponse> resp = v1userwalletcoinwalletsWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Wallet Details
     * Gets a List of Users Wallets.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletsDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletsDataResponse> v1userwalletcoinwalletsWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletcoinwalletsCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletsDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wallet Details (asynchronously)
     * Gets a List of Users Wallets.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletcoinwalletsAsync(String authorization, String accept, final ApiCallback<WalletsDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletcoinwalletsCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletsDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1walletwithdrawcancelled */
    private com.squareup.okhttp.Call v1walletwithdrawcancelledCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1walletwithdrawcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/wallet/coin/withdraw/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletCoinWithdrawDataResponse v1walletwithdrawcancelled(String authorization, String accept) throws ApiException {
        ApiResponse<WalletCoinWithdrawDataResponse> resp = v1walletwithdrawcancelledWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Cancelled Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletCoinWithdrawDataResponse> v1walletwithdrawcancelledWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1walletwithdrawcancelledCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled Coin Withdrawals (asynchronously)
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1walletwithdrawcancelledAsync(String authorization, String accept, final ApiCallback<WalletCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1walletwithdrawcancelledCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1walletwithdrawcompleted */
    private com.squareup.okhttp.Call v1walletwithdrawcompletedCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1walletwithdrawcompleted(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/wallet/coin/withdraw/completed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completed Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletCoinWithdrawDataResponse v1walletwithdrawcompleted(String authorization, String accept) throws ApiException {
        ApiResponse<WalletCoinWithdrawDataResponse> resp = v1walletwithdrawcompletedWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Completed Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletCoinWithdrawDataResponse> v1walletwithdrawcompletedWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1walletwithdrawcompletedCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completed Coin Withdrawals (asynchronously)
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1walletwithdrawcompletedAsync(String authorization, String accept, final ApiCallback<WalletCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1walletwithdrawcompletedCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1walletwithdrawunverified */
    private com.squareup.okhttp.Call v1walletwithdrawunverifiedCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1walletwithdrawunverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/wallet/coin/withdraw/unverified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unverified Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletCoinWithdrawDataResponse v1walletwithdrawunverified(String authorization, String accept) throws ApiException {
        ApiResponse<WalletCoinWithdrawDataResponse> resp = v1walletwithdrawunverifiedWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Unverified Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletCoinWithdrawDataResponse> v1walletwithdrawunverifiedWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1walletwithdrawunverifiedCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unverified Coin Withdrawals (asynchronously)
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1walletwithdrawunverifiedAsync(String authorization, String accept, final ApiCallback<WalletCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1walletwithdrawunverifiedCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1walletwithdrawverified */
    private com.squareup.okhttp.Call v1walletwithdrawverifiedCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1walletwithdrawverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/wallet/coin/withdraw/verified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verified Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletCoinWithdrawDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletCoinWithdrawDataResponse v1walletwithdrawverified(String authorization, String accept) throws ApiException {
        ApiResponse<WalletCoinWithdrawDataResponse> resp = v1walletwithdrawverifiedWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Verified Coin Withdrawals
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletCoinWithdrawDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletCoinWithdrawDataResponse> v1walletwithdrawverifiedWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1walletwithdrawverifiedCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verified Coin Withdrawals (asynchronously)
     * Gets a List of Unverified Coin Withdrawals. The value and fees are in satoshis.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1walletwithdrawverifiedAsync(String authorization, String accept, final ApiCallback<WalletCoinWithdrawDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1walletwithdrawverifiedCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletCoinWithdrawDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
