/*
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.FailResult;
import io.swagger.client.model.BankSummaryDataResponse;
import io.swagger.client.model.DoubleDataResponse;
import io.swagger.client.model.KYCDataResponse;
import io.swagger.client.model.SuccCoinRefDataResponse;
import io.swagger.client.model.SuccRefDataResponse;
import io.swagger.client.model.AllRefDataResponse;
import io.swagger.client.model.TradeSummaryDataResponse;
import io.swagger.client.model.SuccessResult;
import io.swagger.client.model.UserSummaryDataResponse;
import io.swagger.client.model.WalletSummaryDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountDataApi {
    private ApiClient apiClient;

    public AccountDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1exchangebanksummary */
    private com.squareup.okhttp.Call v1exchangebanksummaryCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1exchangebanksummary(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/summary".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return BankSummaryDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BankSummaryDataResponse v1exchangebanksummary(String authorization, String accept) throws ApiException {
        ApiResponse<BankSummaryDataResponse> resp = v1exchangebanksummaryWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;BankSummaryDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BankSummaryDataResponse> v1exchangebanksummaryWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangebanksummaryCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<BankSummaryDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Bank Summary (asynchronously)
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangebanksummaryAsync(String authorization, String accept, final ApiCallback<BankSummaryDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangebanksummaryCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BankSummaryDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangeusercoinfee */
    private com.squareup.okhttp.Call v1exchangeusercoinfeeCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/coin/fee".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Users Coin Fee Percentage
     * Returns the users coin fee percentage. The response is in percentage.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return DoubleDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DoubleDataResponse v1exchangeusercoinfee(String authorization, String accept) throws ApiException {
        ApiResponse<DoubleDataResponse> resp = v1exchangeusercoinfeeWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Users Coin Fee Percentage
     * Returns the users coin fee percentage. The response is in percentage.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;DoubleDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DoubleDataResponse> v1exchangeusercoinfeeWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangeusercoinfeeCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Users Coin Fee Percentage (asynchronously)
     * Returns the users coin fee percentage. The response is in percentage.
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangeusercoinfeeAsync(String authorization, String accept, final ApiCallback<DoubleDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangeusercoinfeeCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1exchangeuserfiatfee */
    private com.squareup.okhttp.Call v1exchangeuserfiatfeeCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1exchangeuserfiatfee(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/fiat/fee".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Users Fiat Fee Percentage
     * Returns the users fiat fee percentage. The response is in percentage.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return DoubleDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DoubleDataResponse v1exchangeuserfiatfee(String authorization, String accept) throws ApiException {
        ApiResponse<DoubleDataResponse> resp = v1exchangeuserfiatfeeWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Users Fiat Fee Percentage
     * Returns the users fiat fee percentage. The response is in percentage.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;DoubleDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DoubleDataResponse> v1exchangeuserfiatfeeWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1exchangeuserfiatfeeCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Users Fiat Fee Percentage (asynchronously)
     * Returns the users fiat fee percentage. The response is in percentage.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1exchangeuserfiatfeeAsync(String authorization, String accept, final ApiCallback<DoubleDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1exchangeuserfiatfeeCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1netkisearchNetkiName */
    private com.squareup.okhttp.Call v1netkisearchNetkiNameCall(String netkiName, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'netkiName' is set
        if (netkiName == null) {
            throw new ApiException("Missing the required parameter 'netkiName' when calling v1netkisearchNetkiName(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/netki/search/{netkiName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "netkiName" + "\\}", apiClient.escapeString(netkiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Coinsecure.me Netki Lookup
     * Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
     * @param netkiName  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return DoubleDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DoubleDataResponse v1netkisearchNetkiName(String netkiName, String accept) throws ApiException {
        ApiResponse<DoubleDataResponse> resp = v1netkisearchNetkiNameWithHttpInfo(netkiName, accept);
        return resp.getData();
    }

    /**
     * Coinsecure.me Netki Lookup
     * Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
     * @param netkiName  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;DoubleDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DoubleDataResponse> v1netkisearchNetkiNameWithHttpInfo(String netkiName, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1netkisearchNetkiNameCall(netkiName, accept, null, null);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Coinsecure.me Netki Lookup (asynchronously)
     * Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
     * @param netkiName  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1netkisearchNetkiNameAsync(String netkiName, String accept, final ApiCallback<DoubleDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1netkisearchNetkiNameCall(netkiName, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DoubleDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangekycs */
    private com.squareup.okhttp.Call v1userexchangekycsCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangekycs(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/kycs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets KYC Status Details
     * Gets Users KYC Status Details.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return KYCDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KYCDataResponse v1userexchangekycs(String authorization, String accept) throws ApiException {
        ApiResponse<KYCDataResponse> resp = v1userexchangekycsWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Gets KYC Status Details
     * Gets Users KYC Status Details.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;KYCDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KYCDataResponse> v1userexchangekycsWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangekycsCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<KYCDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets KYC Status Details (asynchronously)
     * Gets Users KYC Status Details.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangekycsAsync(String authorization, String accept, final ApiCallback<KYCDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangekycsCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KYCDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangereferralcoinpaid */
    private com.squareup.okhttp.Call v1userexchangereferralcoinpaidCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangereferralcoinpaid(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/referral/coin/paid".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Users Paid Fiat Referrals
     * Returns the Users Paid Coin Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccCoinRefDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccCoinRefDataResponse v1userexchangereferralcoinpaid(String authorization, String accept) throws ApiException {
        ApiResponse<SuccCoinRefDataResponse> resp = v1userexchangereferralcoinpaidWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Users Paid Fiat Referrals
     * Returns the Users Paid Coin Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccCoinRefDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccCoinRefDataResponse> v1userexchangereferralcoinpaidWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangereferralcoinpaidCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccCoinRefDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Users Paid Fiat Referrals (asynchronously)
     * Returns the Users Paid Coin Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangereferralcoinpaidAsync(String authorization, String accept, final ApiCallback<SuccCoinRefDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangereferralcoinpaidCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccCoinRefDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangereferralcoinsuccessful */
    private com.squareup.okhttp.Call v1userexchangereferralcoinsuccessfulCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangereferralcoinsuccessful(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/referral/coin/successful".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets Users Successful Referral Links
     * Gets Users Successful Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccRefDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccRefDataResponse v1userexchangereferralcoinsuccessful(String authorization, String accept) throws ApiException {
        ApiResponse<SuccRefDataResponse> resp = v1userexchangereferralcoinsuccessfulWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Gets Users Successful Referral Links
     * Gets Users Successful Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccRefDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccRefDataResponse> v1userexchangereferralcoinsuccessfulWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangereferralcoinsuccessfulCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccRefDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Users Successful Referral Links (asynchronously)
     * Gets Users Successful Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangereferralcoinsuccessfulAsync(String authorization, String accept, final ApiCallback<SuccRefDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangereferralcoinsuccessfulCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccRefDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangereferralfiatpaid */
    private com.squareup.okhttp.Call v1userexchangereferralfiatpaidCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangereferralfiatpaid(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/referral/fiat/paid".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Users Paid Fiat Referrals
     * Returns the Users Paid Fiat Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccCoinRefDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccCoinRefDataResponse v1userexchangereferralfiatpaid(String authorization, String accept) throws ApiException {
        ApiResponse<SuccCoinRefDataResponse> resp = v1userexchangereferralfiatpaidWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Users Paid Fiat Referrals
     * Returns the Users Paid Fiat Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccCoinRefDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccCoinRefDataResponse> v1userexchangereferralfiatpaidWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangereferralfiatpaidCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccCoinRefDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Users Paid Fiat Referrals (asynchronously)
     * Returns the Users Paid Fiat Referrals.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangereferralfiatpaidAsync(String authorization, String accept, final ApiCallback<SuccCoinRefDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangereferralfiatpaidCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccCoinRefDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangereferrals */
    private com.squareup.okhttp.Call v1userexchangereferralsCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangereferrals(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/referrals".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets Users Referral Links
     * Gets Users Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return AllRefDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllRefDataResponse v1userexchangereferrals(String authorization, String accept) throws ApiException {
        ApiResponse<AllRefDataResponse> resp = v1userexchangereferralsWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Gets Users Referral Links
     * Gets Users Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;AllRefDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllRefDataResponse> v1userexchangereferralsWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangereferralsCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<AllRefDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Users Referral Links (asynchronously)
     * Gets Users Referral Links that can be used during signup.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangereferralsAsync(String authorization, String accept, final ApiCallback<AllRefDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangereferralsCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllRefDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangetradesummary */
    private com.squareup.okhttp.Call v1userexchangetradesummaryCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangetradesummary(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/trade/summary".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Trade Summary
     * Gets a Summary of Exchange Trade Data.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return TradeSummaryDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TradeSummaryDataResponse v1userexchangetradesummary(String authorization, String accept) throws ApiException {
        ApiResponse<TradeSummaryDataResponse> resp = v1userexchangetradesummaryWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Trade Summary
     * Gets a Summary of Exchange Trade Data.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;TradeSummaryDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TradeSummaryDataResponse> v1userexchangetradesummaryWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangetradesummaryCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<TradeSummaryDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Trade Summary (asynchronously)
     * Gets a Summary of Exchange Trade Data.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangetradesummaryAsync(String authorization, String accept, final ApiCallback<TradeSummaryDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangetradesummaryCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TradeSummaryDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userlogintokenToken */
    private com.squareup.okhttp.Call v1userlogintokenTokenCall(String token, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling v1userlogintokenToken(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/login/token/{token}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Login Token Email
     * Retrieves details of a Login Token
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userlogintokenToken(String token, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userlogintokenTokenWithHttpInfo(token, accept);
        return resp.getData();
    }

    /**
     * Login Token Email
     * Retrieves details of a Login Token
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userlogintokenTokenWithHttpInfo(String token, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userlogintokenTokenCall(token, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Login Token Email (asynchronously)
     * Retrieves details of a Login Token
     * @param token  (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userlogintokenTokenAsync(String token, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userlogintokenTokenCall(token, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1usersummary */
    private com.squareup.okhttp.Call v1usersummaryCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1usersummary(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/summary".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return UserSummaryDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserSummaryDataResponse v1usersummary(String authorization, String accept) throws ApiException {
        ApiResponse<UserSummaryDataResponse> resp = v1usersummaryWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;UserSummaryDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserSummaryDataResponse> v1usersummaryWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1usersummaryCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<UserSummaryDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Bank Summary (asynchronously)
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1usersummaryAsync(String authorization, String accept, final ApiCallback<UserSummaryDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1usersummaryCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserSummaryDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userwalletsummary */
    private com.squareup.okhttp.Call v1userwalletsummaryCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userwalletsummary(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/wallet/summary".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return WalletSummaryDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletSummaryDataResponse v1userwalletsummary(String authorization, String accept) throws ApiException {
        ApiResponse<WalletSummaryDataResponse> resp = v1userwalletsummaryWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Bank Summary
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;WalletSummaryDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletSummaryDataResponse> v1userwalletsummaryWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userwalletsummaryCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<WalletSummaryDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Bank Summary (asynchronously)
     * Gets a Summary of Exchange Bank Data and Balances.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userwalletsummaryAsync(String authorization, String accept, final ApiCallback<WalletSummaryDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userwalletsummaryCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletSummaryDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
