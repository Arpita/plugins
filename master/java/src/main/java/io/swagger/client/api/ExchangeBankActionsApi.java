/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.SendCoin;
import io.swagger.client.model.SuccessResult;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.WithdrawID;
import io.swagger.client.model.Code;
import io.swagger.client.model.NewBankForm;
import io.swagger.client.model.NewFiatBankDeposit;
import io.swagger.client.model.WithdrawFiat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeBankActionsApi {
    private ApiClient apiClient;

    public ExchangeBankActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeBankActionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1userexchangebankcoinwithdrawinitiate */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawinitiateCall(SendCoin body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankcoinwithdrawinitiate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/initiate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Initiate Bitcoin Withdrawal
     * The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankcoinwithdrawinitiate(SendCoin body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankcoinwithdrawinitiateWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Initiate Bitcoin Withdrawal
     * The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankcoinwithdrawinitiateWithHttpInfo(SendCoin body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawinitiateCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate Bitcoin Withdrawal (asynchronously)
     * The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawinitiateAsync(SendCoin body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawinitiateCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawnewVerifycode */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawnewVerifycodeCall(WithdrawID body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankcoinwithdrawnewVerifycode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/newVerifycode".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a Verification Code.
     * Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankcoinwithdrawnewVerifycode(WithdrawID body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Gets a Verification Code.
     * Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo(WithdrawID body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawnewVerifycodeCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Verification Code. (asynchronously)
     * Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawnewVerifycodeAsync(WithdrawID body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawnewVerifycodeCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawunverifiedcancelWithdrawID */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDCall(String withdrawID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'withdrawID' is set
        if (withdrawID == null) {
            throw new ApiException("Missing the required parameter 'withdrawID' when calling v1userexchangebankcoinwithdrawunverifiedcancelWithdrawID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "withdrawID" + "\\}", apiClient.escapeString(withdrawID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Bitcoin Withdrawal
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankcoinwithdrawunverifiedcancelWithdrawID(String withdrawID, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDWithHttpInfo(withdrawID, authorization, accept);
        return resp.getData();
    }

    /**
     * Cancel Bitcoin Withdrawal
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDWithHttpInfo(String withdrawID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDCall(withdrawID, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Bitcoin Withdrawal (asynchronously)
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDAsync(String withdrawID, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawunverifiedcancelWithdrawIDCall(withdrawID, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankcoinwithdrawverify */
    private com.squareup.okhttp.Call v1userexchangebankcoinwithdrawverifyCall(Code body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankcoinwithdrawverify(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/coin/withdraw/verify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verify Bitcoin Withdrawal
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankcoinwithdrawverify(Code body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankcoinwithdrawverifyWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Verify Bitcoin Withdrawal
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankcoinwithdrawverifyWithHttpInfo(Code body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawverifyCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify Bitcoin Withdrawal (asynchronously)
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankcoinwithdrawverifyAsync(Code body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankcoinwithdrawverifyCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiataccountnew */
    private com.squareup.okhttp.Call v1userexchangebankfiataccountnewCall(NewBankForm body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankfiataccountnew(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/account/new".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * New Bank Link
     * Submits a New Bank Link on KYC Verified Accounts.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiataccountnew(NewBankForm body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiataccountnewWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * New Bank Link
     * Submits a New Bank Link on KYC Verified Accounts.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiataccountnewWithHttpInfo(NewBankForm body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiataccountnewCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * New Bank Link (asynchronously)
     * Submits a New Bank Link on KYC Verified Accounts.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiataccountnewAsync(NewBankForm body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiataccountnewCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatdepositcancelDepositID */
    private com.squareup.okhttp.Call v1userexchangebankfiatdepositcancelDepositIDCall(String depositID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'depositID' is set
        if (depositID == null) {
            throw new ApiException("Missing the required parameter 'depositID' when calling v1userexchangebankfiatdepositcancelDepositID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancel/{depositID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "depositID" + "\\}", apiClient.escapeString(depositID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Unverified Exchange Fiat Deposit
     * Cancels an unverified Exchange Fiat Deposit.
     * @param depositID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatdepositcancelDepositID(String depositID, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatdepositcancelDepositIDWithHttpInfo(depositID, authorization, accept);
        return resp.getData();
    }

    /**
     * Cancel Unverified Exchange Fiat Deposit
     * Cancels an unverified Exchange Fiat Deposit.
     * @param depositID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatdepositcancelDepositIDWithHttpInfo(String depositID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositcancelDepositIDCall(depositID, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Unverified Exchange Fiat Deposit (asynchronously)
     * Cancels an unverified Exchange Fiat Deposit.
     * @param depositID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatdepositcancelDepositIDAsync(String depositID, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositcancelDepositIDCall(depositID, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatdepositnew */
    private com.squareup.okhttp.Call v1userexchangebankfiatdepositnewCall(NewFiatBankDeposit body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankfiatdepositnew(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/deposit/new".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * New Exchange Fiat Deposit
     * Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatdepositnew(NewFiatBankDeposit body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatdepositnewWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * New Exchange Fiat Deposit
     * Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatdepositnewWithHttpInfo(NewFiatBankDeposit body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositnewCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * New Exchange Fiat Deposit (asynchronously)
     * Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatdepositnewAsync(NewFiatBankDeposit body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositnewCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawinitiate */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawinitiateCall(WithdrawFiat body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankfiatwithdrawinitiate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/initiate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Initiate Fiat Withdrawal
     * The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatwithdrawinitiate(WithdrawFiat body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatwithdrawinitiateWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Initiate Fiat Withdrawal
     * The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatwithdrawinitiateWithHttpInfo(WithdrawFiat body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawinitiateCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initiate Fiat Withdrawal (asynchronously)
     * The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawinitiateAsync(WithdrawFiat body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawinitiateCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawnewVerifycode */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawnewVerifycodeCall(WithdrawID body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankfiatwithdrawnewVerifycode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/newVerifycode".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a Fiat Verification Code.
     * Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatwithdrawnewVerifycode(WithdrawID body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Gets a Fiat Verification Code.
     * Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo(WithdrawID body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawnewVerifycodeCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Fiat Verification Code. (asynchronously)
     * Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
     * @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified (required)
     * @param authorization API object to be added (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawnewVerifycodeAsync(WithdrawID body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawnewVerifycodeCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawunverifiedcancelWithdrawID */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDCall(String withdrawID, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'withdrawID' is set
        if (withdrawID == null) {
            throw new ApiException("Missing the required parameter 'withdrawID' when calling v1userexchangebankfiatwithdrawunverifiedcancelWithdrawID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "withdrawID" + "\\}", apiClient.escapeString(withdrawID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Fiat Withdrawal
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatwithdrawunverifiedcancelWithdrawID(String withdrawID, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDWithHttpInfo(withdrawID, authorization, accept);
        return resp.getData();
    }

    /**
     * Cancel Fiat Withdrawal
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDWithHttpInfo(String withdrawID, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDCall(withdrawID, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Fiat Withdrawal (asynchronously)
     * Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
     * @param withdrawID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDAsync(String withdrawID, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawunverifiedcancelWithdrawIDCall(withdrawID, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawverify */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawverifyCall(Code body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebankfiatwithdrawverify(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verify Fiat Withdrawal
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult v1userexchangebankfiatwithdrawverify(Code body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessResult> resp = v1userexchangebankfiatwithdrawverifyWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Verify Fiat Withdrawal
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> v1userexchangebankfiatwithdrawverifyWithHttpInfo(Code body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawverifyCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify Fiat Withdrawal (asynchronously)
     * Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
     * @param body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawverifyAsync(Code body, String authorization, String accept, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawverifyCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
