/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.FailResult;
import io.swagger.client.model.SuccessCancelDataResponse;
import io.swagger.client.model.SuccessOrderDataResponse;
import io.swagger.client.model.RateVolData;
import io.swagger.client.model.MinFiat;
import io.swagger.client.model.MaxVol;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeTradeActionsApi {
    private ApiClient apiClient;

    public ExchangeTradeActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeTradeActionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1userexchangeaskcancelOrderID */
    private com.squareup.okhttp.Call v1userexchangeaskcancelOrderIDCall(String orderID, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling v1userexchangeaskcancelOrderID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/ask/cancel/{orderID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Open Sell Order
     * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @return SuccessCancelDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessCancelDataResponse v1userexchangeaskcancelOrderID(String orderID, String authorization) throws ApiException {
        ApiResponse<SuccessCancelDataResponse> resp = v1userexchangeaskcancelOrderIDWithHttpInfo(orderID, authorization);
        return resp.getData();
    }

    /**
     * Cancel Open Sell Order
     * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @return ApiResponse&lt;SuccessCancelDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessCancelDataResponse> v1userexchangeaskcancelOrderIDWithHttpInfo(String orderID, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeaskcancelOrderIDCall(orderID, authorization, null, null);
        Type localVarReturnType = new TypeToken<SuccessCancelDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Open Sell Order (asynchronously)
     * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeaskcancelOrderIDAsync(String orderID, String authorization, final ApiCallback<SuccessCancelDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeaskcancelOrderIDCall(orderID, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessCancelDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeasknew */
    private com.squareup.okhttp.Call v1userexchangeasknewCall(RateVolData body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangeasknew(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/ask/new".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * BTC Sell Order
     * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessOrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessOrderDataResponse v1userexchangeasknew(RateVolData body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessOrderDataResponse> resp = v1userexchangeasknewWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * BTC Sell Order
     * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessOrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessOrderDataResponse> v1userexchangeasknewWithHttpInfo(RateVolData body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeasknewCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * BTC Sell Order (asynchronously)
     * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeasknewAsync(RateVolData body, String authorization, String accept, final ApiCallback<SuccessOrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeasknewCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebidcancelOrderID */
    private com.squareup.okhttp.Call v1userexchangebidcancelOrderIDCall(String orderID, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderID' is set
        if (orderID == null) {
            throw new ApiException("Missing the required parameter 'orderID' when calling v1userexchangebidcancelOrderID(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bid/cancel/{orderID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "orderID" + "\\}", apiClient.escapeString(orderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel Open Buy Order
     * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @return SuccessCancelDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessCancelDataResponse v1userexchangebidcancelOrderID(String orderID, String authorization) throws ApiException {
        ApiResponse<SuccessCancelDataResponse> resp = v1userexchangebidcancelOrderIDWithHttpInfo(orderID, authorization);
        return resp.getData();
    }

    /**
     * Cancel Open Buy Order
     * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @return ApiResponse&lt;SuccessCancelDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessCancelDataResponse> v1userexchangebidcancelOrderIDWithHttpInfo(String orderID, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebidcancelOrderIDCall(orderID, authorization, null, null);
        Type localVarReturnType = new TypeToken<SuccessCancelDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Open Buy Order (asynchronously)
     * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
     * @param orderID  (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebidcancelOrderIDAsync(String orderID, String authorization, final ApiCallback<SuccessCancelDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebidcancelOrderIDCall(orderID, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessCancelDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebidnew */
    private com.squareup.okhttp.Call v1userexchangebidnewCall(RateVolData body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangebidnew(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bid/new".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * BTC Buy Order
     * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessOrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessOrderDataResponse v1userexchangebidnew(RateVolData body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessOrderDataResponse> resp = v1userexchangebidnewWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * BTC Buy Order
     * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessOrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessOrderDataResponse> v1userexchangebidnewWithHttpInfo(RateVolData body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebidnewCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * BTC Buy Order (asynchronously)
     * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebidnewAsync(RateVolData body, String authorization, String accept, final ApiCallback<SuccessOrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebidnewCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeinstantbuy */
    private com.squareup.okhttp.Call v1userexchangeinstantbuyCall(MinFiat body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangeinstantbuy(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/instant/buy".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Instantly Buy BTC
     * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessOrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessOrderDataResponse v1userexchangeinstantbuy(MinFiat body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessOrderDataResponse> resp = v1userexchangeinstantbuyWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Instantly Buy BTC
     * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessOrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessOrderDataResponse> v1userexchangeinstantbuyWithHttpInfo(MinFiat body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeinstantbuyCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantly Buy BTC (asynchronously)
     * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeinstantbuyAsync(MinFiat body, String authorization, String accept, final ApiCallback<SuccessOrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeinstantbuyCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangeinstantsell */
    private com.squareup.okhttp.Call v1userexchangeinstantsellCall(MaxVol body, String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1userexchangeinstantsell(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/instant/sell".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Instantly Sell BTC
     * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return SuccessOrderDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessOrderDataResponse v1userexchangeinstantsell(MaxVol body, String authorization, String accept) throws ApiException {
        ApiResponse<SuccessOrderDataResponse> resp = v1userexchangeinstantsellWithHttpInfo(body, authorization, accept);
        return resp.getData();
    }

    /**
     * Instantly Sell BTC
     * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;SuccessOrderDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessOrderDataResponse> v1userexchangeinstantsellWithHttpInfo(MaxVol body, String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangeinstantsellCall(body, authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantly Sell BTC (asynchronously)
     * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param body Please send the form with valid inputs. (required)
     * @param authorization Enter a valid Api Key. (optional)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangeinstantsellAsync(MaxVol body, String authorization, String accept, final ApiCallback<SuccessOrderDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangeinstantsellCall(body, authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessOrderDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
