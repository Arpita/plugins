/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.FiatBankDataResponse;
import io.swagger.client.model.FailResult;
import io.swagger.client.model.RateDataResponse;
import io.swagger.client.model.FiatDepDataResponse;
import io.swagger.client.model.FiatWithDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeBankFiatDataApi {
    private ApiClient apiClient;

    public ExchangeBankFiatDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeBankFiatDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1userexchangebankfiataccounts */
    private com.squareup.okhttp.Call v1userexchangebankfiataccountsCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiataccounts(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/accounts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Exchange Bitcoin Deposit Addresses
     * Gets a List of Users Exchange Bitcoin Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatBankDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatBankDataResponse v1userexchangebankfiataccounts(String authorization, String accept) throws ApiException {
        ApiResponse<FiatBankDataResponse> resp = v1userexchangebankfiataccountsWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Exchange Bitcoin Deposit Addresses
     * Gets a List of Users Exchange Bitcoin Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatBankDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatBankDataResponse> v1userexchangebankfiataccountsWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiataccountsCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatBankDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange Bitcoin Deposit Addresses (asynchronously)
     * Gets a List of Users Exchange Bitcoin Addresses.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiataccountsAsync(String authorization, String accept, final ApiCallback<FiatBankDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiataccountsCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatBankDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatbalanceavailable */
    private com.squareup.okhttp.Call v1userexchangebankfiatbalanceavailableCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatbalanceavailable(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/balance/total".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Available Exchange Fiat Balance
     * Returns balance which is in Available for Trades. The response is in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDataResponse v1userexchangebankfiatbalanceavailable(String authorization, String accept) throws ApiException {
        ApiResponse<RateDataResponse> resp = v1userexchangebankfiatbalanceavailableWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Available Exchange Fiat Balance
     * Returns balance which is in Available for Trades. The response is in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDataResponse> v1userexchangebankfiatbalanceavailableWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatbalanceavailableCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Available Exchange Fiat Balance (asynchronously)
     * Returns balance which is in Available for Trades. The response is in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatbalanceavailableAsync(String authorization, String accept, final ApiCallback<RateDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatbalanceavailableCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatbalancepending */
    private com.squareup.okhttp.Call v1userexchangebankfiatbalancependingCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatbalancepending(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/balance/pending".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * In Trade Coin Balance
     * Returns in-trade or pending fiat balance in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDataResponse v1userexchangebankfiatbalancepending(String authorization, String accept) throws ApiException {
        ApiResponse<RateDataResponse> resp = v1userexchangebankfiatbalancependingWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * In Trade Coin Balance
     * Returns in-trade or pending fiat balance in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDataResponse> v1userexchangebankfiatbalancependingWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatbalancependingCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * In Trade Coin Balance (asynchronously)
     * Returns in-trade or pending fiat balance in paisa.
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatbalancependingAsync(String authorization, String accept, final ApiCallback<RateDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatbalancependingCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatbalancetotal */
    private com.squareup.okhttp.Call v1userexchangebankfiatbalancetotalCall(String authorization, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatbalancetotal(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/balance/available".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Total Exchange Fiat Balance
     * Returns users total fiat balance in paisa. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return RateDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RateDataResponse v1userexchangebankfiatbalancetotal(String authorization, String accept) throws ApiException {
        ApiResponse<RateDataResponse> resp = v1userexchangebankfiatbalancetotalWithHttpInfo(authorization, accept);
        return resp.getData();
    }

    /**
     * Total Exchange Fiat Balance
     * Returns users total fiat balance in paisa. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;RateDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RateDataResponse> v1userexchangebankfiatbalancetotalWithHttpInfo(String authorization, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatbalancetotalCall(authorization, accept, null, null);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Total Exchange Fiat Balance (asynchronously)
     * Returns users total fiat balance in paisa. Pending + Available
     * @param authorization API object to be added (required)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatbalancetotalAsync(String authorization, String accept, final ApiCallback<RateDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatbalancetotalCall(authorization, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RateDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatdepositcancelled */
    private com.squareup.okhttp.Call v1userexchangebankfiatdepositcancelledCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatdepositcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/deposit/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled Exchange Fiat Deposits
     * Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatDepDataResponse v1userexchangebankfiatdepositcancelled(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatDepDataResponse> resp = v1userexchangebankfiatdepositcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Cancelled Exchange Fiat Deposits
     * Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatDepDataResponse> v1userexchangebankfiatdepositcancelledWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositcancelledCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled Exchange Fiat Deposits (asynchronously)
     * Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatdepositcancelledAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositcancelledCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatdepositunverified */
    private com.squareup.okhttp.Call v1userexchangebankfiatdepositunverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatdepositunverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/deposit/unverified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unverified Exchange Fiat Deposits
     * Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatDepDataResponse v1userexchangebankfiatdepositunverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatDepDataResponse> resp = v1userexchangebankfiatdepositunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Unverified Exchange Fiat Deposits
     * Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatDepDataResponse> v1userexchangebankfiatdepositunverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositunverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unverified Exchange Fiat Deposits (asynchronously)
     * Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatdepositunverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositunverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatdepositverified */
    private com.squareup.okhttp.Call v1userexchangebankfiatdepositverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatdepositverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/deposit/verified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verified Exchange Fiat Deposits
     * Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatDepDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatDepDataResponse v1userexchangebankfiatdepositverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatDepDataResponse> resp = v1userexchangebankfiatdepositverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Verified Exchange Fiat Deposits
     * Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatDepDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatDepDataResponse> v1userexchangebankfiatdepositverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verified Exchange Fiat Deposits (asynchronously)
     * Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatdepositverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatDepDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatdepositverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatDepDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawcancelled */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawcancelledCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatwithdrawcancelled(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/cancelled".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancelled Exchange Fiat Withdrawals
     * Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatWithDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatWithDataResponse v1userexchangebankfiatwithdrawcancelled(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatWithDataResponse> resp = v1userexchangebankfiatwithdrawcancelledWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Cancelled Exchange Fiat Withdrawals
     * Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatWithDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatWithDataResponse> v1userexchangebankfiatwithdrawcancelledWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawcancelledCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancelled Exchange Fiat Withdrawals (asynchronously)
     * Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawcancelledAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatWithDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawcancelledCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawcompleted */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawcompletedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatwithdrawcompleted(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/completed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completed Exchange Fiat Withdrawals
     * Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatWithDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatWithDataResponse v1userexchangebankfiatwithdrawcompleted(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatWithDataResponse> resp = v1userexchangebankfiatwithdrawcompletedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Completed Exchange Fiat Withdrawals
     * Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatWithDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatWithDataResponse> v1userexchangebankfiatwithdrawcompletedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawcompletedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completed Exchange Fiat Withdrawals (asynchronously)
     * Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawcompletedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatWithDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawcompletedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawunverified */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawunverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatwithdrawunverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/unverified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unverified Exchange Fiat Withdrawals
     * Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatWithDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatWithDataResponse v1userexchangebankfiatwithdrawunverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatWithDataResponse> resp = v1userexchangebankfiatwithdrawunverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Unverified Exchange Fiat Withdrawals
     * Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatWithDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatWithDataResponse> v1userexchangebankfiatwithdrawunverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawunverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unverified Exchange Fiat Withdrawals (asynchronously)
     * Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawunverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatWithDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawunverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v1userexchangebankfiatwithdrawverified */
    private com.squareup.okhttp.Call v1userexchangebankfiatwithdrawverifiedCall(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1userexchangebankfiatwithdrawverified(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/user/exchange/bank/fiat/withdraw/verified".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verified Exchange Fiat Withdrawals
     * Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return FiatWithDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FiatWithDataResponse v1userexchangebankfiatwithdrawverified(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        ApiResponse<FiatWithDataResponse> resp = v1userexchangebankfiatwithdrawverifiedWithHttpInfo(authorization, from, to, max, offset, accept);
        return resp.getData();
    }

    /**
     * Verified Exchange Fiat Withdrawals
     * Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return ApiResponse&lt;FiatWithDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FiatWithDataResponse> v1userexchangebankfiatwithdrawverifiedWithHttpInfo(String authorization, Long from, Long to, Integer max, Long offset, String accept) throws ApiException {
        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawverifiedCall(authorization, from, to, max, offset, accept, null, null);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verified Exchange Fiat Withdrawals (asynchronously)
     * Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
     * @param authorization API object to be added (required)
     * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param accept JSON, XML or CSV can be returned (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1userexchangebankfiatwithdrawverifiedAsync(String authorization, Long from, Long to, Integer max, Long offset, String accept, final ApiCallback<FiatWithDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1userexchangebankfiatwithdrawverifiedCall(authorization, from, to, max, offset, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FiatWithDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
