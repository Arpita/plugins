/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGWalletSummaryData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGWalletSummaryData::SWGWalletSummaryData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGWalletSummaryData::SWGWalletSummaryData() {
    init();
}

SWGWalletSummaryData::~SWGWalletSummaryData() {
    this->cleanup();
}

void
SWGWalletSummaryData::init() {
    wallet_confirmed_balance = 0L;
    wallet_uncofirmed_balance = 0L;
    has_wallet_netki = false;
    wallet_netki = new QString("");
    wallet_netki_address = new QString("");
    wallet_netki_wallet_id = new QString("");
}

void
SWGWalletSummaryData::cleanup() {
    



    if(wallet_netki != nullptr) {
        delete wallet_netki;
    }

    if(wallet_netki_address != nullptr) {
        delete wallet_netki_address;
    }

    if(wallet_netki_wallet_id != nullptr) {
        delete wallet_netki_wallet_id;
    }
}

SWGWalletSummaryData*
SWGWalletSummaryData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGWalletSummaryData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&wallet_confirmed_balance, pJson["wallet_confirmed_balance"], "qint64", "");
    ::Swagger::setValue(&wallet_uncofirmed_balance, pJson["wallet_uncofirmed_balance"], "qint64", "");
    ::Swagger::setValue(&has_wallet_netki, pJson["has_wallet_netki"], "bool", "");
    ::Swagger::setValue(&wallet_netki, pJson["wallet_netki"], "QString", "QString");
    ::Swagger::setValue(&wallet_netki_address, pJson["wallet_netki_address"], "QString", "QString");
    ::Swagger::setValue(&wallet_netki_wallet_id, pJson["wallet_netki_wallet_id"], "QString", "QString");
}

QString
SWGWalletSummaryData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGWalletSummaryData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("wallet_confirmed_balance", QJsonValue(wallet_confirmed_balance));

    obj->insert("wallet_uncofirmed_balance", QJsonValue(wallet_uncofirmed_balance));

    obj->insert("has_wallet_netki", QJsonValue(has_wallet_netki));

    toJsonValue(QString("wallet_netki"), wallet_netki, obj, QString("QString"));

    toJsonValue(QString("wallet_netki_address"), wallet_netki_address, obj, QString("QString"));

    toJsonValue(QString("wallet_netki_wallet_id"), wallet_netki_wallet_id, obj, QString("QString"));

    return obj;
}

qint64
SWGWalletSummaryData::getWalletConfirmedBalance() {
    return wallet_confirmed_balance;
}
void
SWGWalletSummaryData::setWalletConfirmedBalance(qint64 wallet_confirmed_balance) {
    this->wallet_confirmed_balance = wallet_confirmed_balance;
}

qint64
SWGWalletSummaryData::getWalletUncofirmedBalance() {
    return wallet_uncofirmed_balance;
}
void
SWGWalletSummaryData::setWalletUncofirmedBalance(qint64 wallet_uncofirmed_balance) {
    this->wallet_uncofirmed_balance = wallet_uncofirmed_balance;
}

bool
SWGWalletSummaryData::getHasWalletNetki() {
    return has_wallet_netki;
}
void
SWGWalletSummaryData::setHasWalletNetki(bool has_wallet_netki) {
    this->has_wallet_netki = has_wallet_netki;
}

QString*
SWGWalletSummaryData::getWalletNetki() {
    return wallet_netki;
}
void
SWGWalletSummaryData::setWalletNetki(QString* wallet_netki) {
    this->wallet_netki = wallet_netki;
}

QString*
SWGWalletSummaryData::getWalletNetkiAddress() {
    return wallet_netki_address;
}
void
SWGWalletSummaryData::setWalletNetkiAddress(QString* wallet_netki_address) {
    this->wallet_netki_address = wallet_netki_address;
}

QString*
SWGWalletSummaryData::getWalletNetkiWalletId() {
    return wallet_netki_wallet_id;
}
void
SWGWalletSummaryData::setWalletNetkiWalletId(QString* wallet_netki_wallet_id) {
    this->wallet_netki_wallet_id = wallet_netki_wallet_id;
}



} /* namespace Swagger */

