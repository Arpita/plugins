/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGTradeSummaryData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGTradeSummaryData::SWGTradeSummaryData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGTradeSummaryData::SWGTradeSummaryData() {
    init();
}

SWGTradeSummaryData::~SWGTradeSummaryData() {
    this->cleanup();
}

void
SWGTradeSummaryData::init() {
    completed_asks_sum = 0L;
    completed_bids_sum = 0L;
    completed_asks_count = 0L;
    completed_bids_count = 0L;
    pending_asks_count = 0L;
    pending_bids_count = 0L;
}

void
SWGTradeSummaryData::cleanup() {
    





}

SWGTradeSummaryData*
SWGTradeSummaryData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTradeSummaryData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&completed_asks_sum, pJson["completed_asks_sum"], "qint64", "");
    ::Swagger::setValue(&completed_bids_sum, pJson["completed_bids_sum"], "qint64", "");
    ::Swagger::setValue(&completed_asks_count, pJson["completed_asks_count"], "qint64", "");
    ::Swagger::setValue(&completed_bids_count, pJson["completed_bids_count"], "qint64", "");
    ::Swagger::setValue(&pending_asks_count, pJson["pending_asks_count"], "qint64", "");
    ::Swagger::setValue(&pending_bids_count, pJson["pending_bids_count"], "qint64", "");
}

QString
SWGTradeSummaryData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGTradeSummaryData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("completed_asks_sum", QJsonValue(completed_asks_sum));

    obj->insert("completed_bids_sum", QJsonValue(completed_bids_sum));

    obj->insert("completed_asks_count", QJsonValue(completed_asks_count));

    obj->insert("completed_bids_count", QJsonValue(completed_bids_count));

    obj->insert("pending_asks_count", QJsonValue(pending_asks_count));

    obj->insert("pending_bids_count", QJsonValue(pending_bids_count));

    return obj;
}

qint64
SWGTradeSummaryData::getCompletedAsksSum() {
    return completed_asks_sum;
}
void
SWGTradeSummaryData::setCompletedAsksSum(qint64 completed_asks_sum) {
    this->completed_asks_sum = completed_asks_sum;
}

qint64
SWGTradeSummaryData::getCompletedBidsSum() {
    return completed_bids_sum;
}
void
SWGTradeSummaryData::setCompletedBidsSum(qint64 completed_bids_sum) {
    this->completed_bids_sum = completed_bids_sum;
}

qint64
SWGTradeSummaryData::getCompletedAsksCount() {
    return completed_asks_count;
}
void
SWGTradeSummaryData::setCompletedAsksCount(qint64 completed_asks_count) {
    this->completed_asks_count = completed_asks_count;
}

qint64
SWGTradeSummaryData::getCompletedBidsCount() {
    return completed_bids_count;
}
void
SWGTradeSummaryData::setCompletedBidsCount(qint64 completed_bids_count) {
    this->completed_bids_count = completed_bids_count;
}

qint64
SWGTradeSummaryData::getPendingAsksCount() {
    return pending_asks_count;
}
void
SWGTradeSummaryData::setPendingAsksCount(qint64 pending_asks_count) {
    this->pending_asks_count = pending_asks_count;
}

qint64
SWGTradeSummaryData::getPendingBidsCount() {
    return pending_bids_count;
}
void
SWGTradeSummaryData::setPendingBidsCount(qint64 pending_bids_count) {
    this->pending_bids_count = pending_bids_count;
}



} /* namespace Swagger */

