/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * SWGBankSummaryData.h
 * 
 * 
 */

#ifndef SWGBankSummaryData_H_
#define SWGBankSummaryData_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"


namespace Swagger {

class SWGBankSummaryData: public SWGObject {
public:
    SWGBankSummaryData();
    SWGBankSummaryData(QString* json);
    virtual ~SWGBankSummaryData();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGBankSummaryData* fromJson(QString &jsonString);

    qint64 getPendingCoinBalance();
    void setPendingCoinBalance(qint64 pending_coin_balance);

    qint64 getPendingFiatBalance();
    void setPendingFiatBalance(qint64 pending_fiat_balance);

    qint64 getAvailableCoinBalance();
    void setAvailableCoinBalance(qint64 available_coin_balance);

    qint64 getAvailableFiatBalance();
    void setAvailableFiatBalance(qint64 available_fiat_balance);

    qint64 getTotalCoinBalance();
    void setTotalCoinBalance(qint64 total_coin_balance);

    qint64 getTotalFiatBalance();
    void setTotalFiatBalance(qint64 total_fiat_balance);

    double getCoinFeePercentage();
    void setCoinFeePercentage(double coin_fee_percentage);

    double getFiatFeePercentage();
    void setFiatFeePercentage(double fiat_fee_percentage);

    QString* getBankLinkStatus();
    void setBankLinkStatus(QString* bank_link_status);

    bool getHasTradeNetki();
    void setHasTradeNetki(bool has_trade_netki);

    QString* getTradeNetkiName();
    void setTradeNetkiName(QString* trade_netki_name);

    QString* getTradeNetkiAddress();
    void setTradeNetkiAddress(QString* trade_netki_address);


private:
    qint64 pending_coin_balance;
    qint64 pending_fiat_balance;
    qint64 available_coin_balance;
    qint64 available_fiat_balance;
    qint64 total_coin_balance;
    qint64 total_fiat_balance;
    double coin_fee_percentage;
    double fiat_fee_percentage;
    QString* bank_link_status;
    bool has_trade_netki;
    QString* trade_netki_name;
    QString* trade_netki_address;
};

} /* namespace Swagger */

#endif /* SWGBankSummaryData_H_ */
