/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGUserSummaryData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGUserSummaryData::SWGUserSummaryData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGUserSummaryData::SWGUserSummaryData() {
    init();
}

SWGUserSummaryData::~SWGUserSummaryData() {
    this->cleanup();
}

void
SWGUserSummaryData::init() {
    kyc_status = new QString("");
    bank_link_status = new QString("");
    trade_ready = new QString("");
    is_disabled_account = false;
    fa_secure = new QString("");
    has_phone = new QString("");
}

void
SWGUserSummaryData::cleanup() {
    
    if(kyc_status != nullptr) {
        delete kyc_status;
    }

    if(bank_link_status != nullptr) {
        delete bank_link_status;
    }

    if(trade_ready != nullptr) {
        delete trade_ready;
    }


    if(fa_secure != nullptr) {
        delete fa_secure;
    }

    if(has_phone != nullptr) {
        delete has_phone;
    }
}

SWGUserSummaryData*
SWGUserSummaryData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUserSummaryData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&kyc_status, pJson["kyc_status"], "QString", "QString");
    ::Swagger::setValue(&bank_link_status, pJson["bank_link_status"], "QString", "QString");
    ::Swagger::setValue(&trade_ready, pJson["trade_ready"], "QString", "QString");
    ::Swagger::setValue(&is_disabled_account, pJson["is_disabled_account"], "bool", "");
    ::Swagger::setValue(&fa_secure, pJson["fa_secure"], "QString", "QString");
    ::Swagger::setValue(&has_phone, pJson["has_phone"], "QString", "QString");
}

QString
SWGUserSummaryData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGUserSummaryData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("kyc_status"), kyc_status, obj, QString("QString"));

    toJsonValue(QString("bank_link_status"), bank_link_status, obj, QString("QString"));

    toJsonValue(QString("trade_ready"), trade_ready, obj, QString("QString"));

    obj->insert("is_disabled_account", QJsonValue(is_disabled_account));

    toJsonValue(QString("fa_secure"), fa_secure, obj, QString("QString"));

    toJsonValue(QString("has_phone"), has_phone, obj, QString("QString"));

    return obj;
}

QString*
SWGUserSummaryData::getKycStatus() {
    return kyc_status;
}
void
SWGUserSummaryData::setKycStatus(QString* kyc_status) {
    this->kyc_status = kyc_status;
}

QString*
SWGUserSummaryData::getBankLinkStatus() {
    return bank_link_status;
}
void
SWGUserSummaryData::setBankLinkStatus(QString* bank_link_status) {
    this->bank_link_status = bank_link_status;
}

QString*
SWGUserSummaryData::getTradeReady() {
    return trade_ready;
}
void
SWGUserSummaryData::setTradeReady(QString* trade_ready) {
    this->trade_ready = trade_ready;
}

bool
SWGUserSummaryData::getIsDisabledAccount() {
    return is_disabled_account;
}
void
SWGUserSummaryData::setIsDisabledAccount(bool is_disabled_account) {
    this->is_disabled_account = is_disabled_account;
}

QString*
SWGUserSummaryData::getFaSecure() {
    return fa_secure;
}
void
SWGUserSummaryData::setFaSecure(QString* fa_secure) {
    this->fa_secure = fa_secure;
}

QString*
SWGUserSummaryData::getHasPhone() {
    return has_phone;
}
void
SWGUserSummaryData::setHasPhone(QString* has_phone) {
    this->has_phone = has_phone;
}



} /* namespace Swagger */

