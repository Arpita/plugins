/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGBankSummaryData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBankSummaryData::SWGBankSummaryData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBankSummaryData::SWGBankSummaryData() {
    init();
}

SWGBankSummaryData::~SWGBankSummaryData() {
    this->cleanup();
}

void
SWGBankSummaryData::init() {
    pending_coin_balance = 0L;
    pending_fiat_balance = 0L;
    available_coin_balance = 0L;
    available_fiat_balance = 0L;
    total_coin_balance = 0L;
    total_fiat_balance = 0L;
    coin_fee_percentage = 0.0;
    fiat_fee_percentage = 0.0;
    bank_link_status = new QString("");
    has_trade_netki = false;
    trade_netki_name = new QString("");
    trade_netki_address = new QString("");
}

void
SWGBankSummaryData::cleanup() {
    








    if(bank_link_status != nullptr) {
        delete bank_link_status;
    }


    if(trade_netki_name != nullptr) {
        delete trade_netki_name;
    }

    if(trade_netki_address != nullptr) {
        delete trade_netki_address;
    }
}

SWGBankSummaryData*
SWGBankSummaryData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBankSummaryData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&pending_coin_balance, pJson["pending_coin_balance"], "qint64", "");
    ::Swagger::setValue(&pending_fiat_balance, pJson["pending_fiat_balance"], "qint64", "");
    ::Swagger::setValue(&available_coin_balance, pJson["available_coin_balance"], "qint64", "");
    ::Swagger::setValue(&available_fiat_balance, pJson["available_fiat_balance"], "qint64", "");
    ::Swagger::setValue(&total_coin_balance, pJson["total_coin_balance"], "qint64", "");
    ::Swagger::setValue(&total_fiat_balance, pJson["total_fiat_balance"], "qint64", "");
    ::Swagger::setValue(&coin_fee_percentage, pJson["coin_fee_percentage"], "double", "");
    ::Swagger::setValue(&fiat_fee_percentage, pJson["fiat_fee_percentage"], "double", "");
    ::Swagger::setValue(&bank_link_status, pJson["bank_link_status"], "QString", "QString");
    ::Swagger::setValue(&has_trade_netki, pJson["has_trade_netki"], "bool", "");
    ::Swagger::setValue(&trade_netki_name, pJson["trade_netki_name"], "QString", "QString");
    ::Swagger::setValue(&trade_netki_address, pJson["trade_netki_address"], "QString", "QString");
}

QString
SWGBankSummaryData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBankSummaryData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("pending_coin_balance", QJsonValue(pending_coin_balance));

    obj->insert("pending_fiat_balance", QJsonValue(pending_fiat_balance));

    obj->insert("available_coin_balance", QJsonValue(available_coin_balance));

    obj->insert("available_fiat_balance", QJsonValue(available_fiat_balance));

    obj->insert("total_coin_balance", QJsonValue(total_coin_balance));

    obj->insert("total_fiat_balance", QJsonValue(total_fiat_balance));

    obj->insert("coin_fee_percentage", QJsonValue(coin_fee_percentage));

    obj->insert("fiat_fee_percentage", QJsonValue(fiat_fee_percentage));

    toJsonValue(QString("bank_link_status"), bank_link_status, obj, QString("QString"));

    obj->insert("has_trade_netki", QJsonValue(has_trade_netki));

    toJsonValue(QString("trade_netki_name"), trade_netki_name, obj, QString("QString"));

    toJsonValue(QString("trade_netki_address"), trade_netki_address, obj, QString("QString"));

    return obj;
}

qint64
SWGBankSummaryData::getPendingCoinBalance() {
    return pending_coin_balance;
}
void
SWGBankSummaryData::setPendingCoinBalance(qint64 pending_coin_balance) {
    this->pending_coin_balance = pending_coin_balance;
}

qint64
SWGBankSummaryData::getPendingFiatBalance() {
    return pending_fiat_balance;
}
void
SWGBankSummaryData::setPendingFiatBalance(qint64 pending_fiat_balance) {
    this->pending_fiat_balance = pending_fiat_balance;
}

qint64
SWGBankSummaryData::getAvailableCoinBalance() {
    return available_coin_balance;
}
void
SWGBankSummaryData::setAvailableCoinBalance(qint64 available_coin_balance) {
    this->available_coin_balance = available_coin_balance;
}

qint64
SWGBankSummaryData::getAvailableFiatBalance() {
    return available_fiat_balance;
}
void
SWGBankSummaryData::setAvailableFiatBalance(qint64 available_fiat_balance) {
    this->available_fiat_balance = available_fiat_balance;
}

qint64
SWGBankSummaryData::getTotalCoinBalance() {
    return total_coin_balance;
}
void
SWGBankSummaryData::setTotalCoinBalance(qint64 total_coin_balance) {
    this->total_coin_balance = total_coin_balance;
}

qint64
SWGBankSummaryData::getTotalFiatBalance() {
    return total_fiat_balance;
}
void
SWGBankSummaryData::setTotalFiatBalance(qint64 total_fiat_balance) {
    this->total_fiat_balance = total_fiat_balance;
}

double
SWGBankSummaryData::getCoinFeePercentage() {
    return coin_fee_percentage;
}
void
SWGBankSummaryData::setCoinFeePercentage(double coin_fee_percentage) {
    this->coin_fee_percentage = coin_fee_percentage;
}

double
SWGBankSummaryData::getFiatFeePercentage() {
    return fiat_fee_percentage;
}
void
SWGBankSummaryData::setFiatFeePercentage(double fiat_fee_percentage) {
    this->fiat_fee_percentage = fiat_fee_percentage;
}

QString*
SWGBankSummaryData::getBankLinkStatus() {
    return bank_link_status;
}
void
SWGBankSummaryData::setBankLinkStatus(QString* bank_link_status) {
    this->bank_link_status = bank_link_status;
}

bool
SWGBankSummaryData::getHasTradeNetki() {
    return has_trade_netki;
}
void
SWGBankSummaryData::setHasTradeNetki(bool has_trade_netki) {
    this->has_trade_netki = has_trade_netki;
}

QString*
SWGBankSummaryData::getTradeNetkiName() {
    return trade_netki_name;
}
void
SWGBankSummaryData::setTradeNetkiName(QString* trade_netki_name) {
    this->trade_netki_name = trade_netki_name;
}

QString*
SWGBankSummaryData::getTradeNetkiAddress() {
    return trade_netki_address;
}
void
SWGBankSummaryData::setTradeNetkiAddress(QString* trade_netki_address) {
    this->trade_netki_address = trade_netki_address;
}



} /* namespace Swagger */

