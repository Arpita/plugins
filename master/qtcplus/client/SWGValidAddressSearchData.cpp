/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGValidAddressSearchData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGValidAddressSearchData::SWGValidAddressSearchData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGValidAddressSearchData::SWGValidAddressSearchData() {
    init();
}

SWGValidAddressSearchData::~SWGValidAddressSearchData() {
    this->cleanup();
}

void
SWGValidAddressSearchData::init() {
    address = new QString("");
    balance = 0L;
    total_received = 0L;
    unconfirmed_balance = 0L;
    unconfirmed_tx_apperances = 0;
    tx_apperances = 0;
    transactions = new QList<QString*>();
}

void
SWGValidAddressSearchData::cleanup() {
    
    if(address != nullptr) {
        delete address;
    }






    if(transactions != nullptr) {
        QList<QString*>* arr = transactions;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete transactions;
    }
}

SWGValidAddressSearchData*
SWGValidAddressSearchData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGValidAddressSearchData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&address, pJson["address"], "QString", "QString");
    ::Swagger::setValue(&balance, pJson["balance"], "qint64", "");
    ::Swagger::setValue(&total_received, pJson["total_received"], "qint64", "");
    ::Swagger::setValue(&unconfirmed_balance, pJson["unconfirmed_balance"], "qint64", "");
    ::Swagger::setValue(&unconfirmed_tx_apperances, pJson["unconfirmed_tx_apperances"], "qint32", "");
    ::Swagger::setValue(&tx_apperances, pJson["tx_apperances"], "qint32", "");
    
    ::Swagger::setValue(&transactions, pJson["transactions"], "QList", "QString");
    
}

QString
SWGValidAddressSearchData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGValidAddressSearchData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("address"), address, obj, QString("QString"));

    obj->insert("balance", QJsonValue(balance));

    obj->insert("total_received", QJsonValue(total_received));

    obj->insert("unconfirmed_balance", QJsonValue(unconfirmed_balance));

    obj->insert("unconfirmed_tx_apperances", QJsonValue(unconfirmed_tx_apperances));

    obj->insert("tx_apperances", QJsonValue(tx_apperances));

    QJsonArray transactionsJsonArray;
    toJsonArray((QList<void*>*)transactions, &transactionsJsonArray, "transactions", "QString");
    obj->insert("transactions", transactionsJsonArray);

    return obj;
}

QString*
SWGValidAddressSearchData::getAddress() {
    return address;
}
void
SWGValidAddressSearchData::setAddress(QString* address) {
    this->address = address;
}

qint64
SWGValidAddressSearchData::getBalance() {
    return balance;
}
void
SWGValidAddressSearchData::setBalance(qint64 balance) {
    this->balance = balance;
}

qint64
SWGValidAddressSearchData::getTotalReceived() {
    return total_received;
}
void
SWGValidAddressSearchData::setTotalReceived(qint64 total_received) {
    this->total_received = total_received;
}

qint64
SWGValidAddressSearchData::getUnconfirmedBalance() {
    return unconfirmed_balance;
}
void
SWGValidAddressSearchData::setUnconfirmedBalance(qint64 unconfirmed_balance) {
    this->unconfirmed_balance = unconfirmed_balance;
}

qint32
SWGValidAddressSearchData::getUnconfirmedTxApperances() {
    return unconfirmed_tx_apperances;
}
void
SWGValidAddressSearchData::setUnconfirmedTxApperances(qint32 unconfirmed_tx_apperances) {
    this->unconfirmed_tx_apperances = unconfirmed_tx_apperances;
}

qint32
SWGValidAddressSearchData::getTxApperances() {
    return tx_apperances;
}
void
SWGValidAddressSearchData::setTxApperances(qint32 tx_apperances) {
    this->tx_apperances = tx_apperances;
}

QList<QString*>*
SWGValidAddressSearchData::getTransactions() {
    return transactions;
}
void
SWGValidAddressSearchData::setTransactions(QList<QString*>* transactions) {
    this->transactions = transactions;
}



} /* namespace Swagger */

