/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _SWG_SWGExchangeTradeActionsApi_H_
#define _SWG_SWGExchangeTradeActionsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGFailResult.h"
#include "SWGSuccessCancelDataResponse.h"
#include "SWGSuccessOrderDataResponse.h"
#include "SWGRateVolData.h"
#include "SWGMinFiat.h"
#include "SWGMaxVol.h"

#include <QObject>

namespace Swagger {

class SWGExchangeTradeActionsApi: public QObject {
    Q_OBJECT

public:
    SWGExchangeTradeActionsApi();
    SWGExchangeTradeActionsApi(QString host, QString basePath);
    ~SWGExchangeTradeActionsApi();

    QString host;
    QString basePath;

    void /v1/user/exchange/ask/cancel/OrderID(QString* order_id, QString* authorization);
    void /v1/user/exchange/ask/new(SWGRateVolData body, QString* authorization, QString* accept);
    void /v1/user/exchange/bid/cancel/OrderID(QString* order_id, QString* authorization);
    void /v1/user/exchange/bid/new(SWGRateVolData body, QString* authorization, QString* accept);
    void /v1/user/exchange/instant/buy(SWGMinFiat body, QString* authorization, QString* accept);
    void /v1/user/exchange/instant/sell(SWGMaxVol body, QString* authorization, QString* accept);
    
private:
    void /v1/user/exchange/ask/cancel/OrderIDCallback (HttpRequestWorker * worker);
    void /v1/user/exchange/ask/newCallback (HttpRequestWorker * worker);
    void /v1/user/exchange/bid/cancel/OrderIDCallback (HttpRequestWorker * worker);
    void /v1/user/exchange/bid/newCallback (HttpRequestWorker * worker);
    void /v1/user/exchange/instant/buyCallback (HttpRequestWorker * worker);
    void /v1/user/exchange/instant/sellCallback (HttpRequestWorker * worker);
    
signals:
    void /v1/user/exchange/ask/cancel/OrderIDSignal(SWGSuccessCancelDataResponse* summary);
    void /v1/user/exchange/ask/newSignal(SWGSuccessOrderDataResponse* summary);
    void /v1/user/exchange/bid/cancel/OrderIDSignal(SWGSuccessCancelDataResponse* summary);
    void /v1/user/exchange/bid/newSignal(SWGSuccessOrderDataResponse* summary);
    void /v1/user/exchange/instant/buySignal(SWGSuccessOrderDataResponse* summary);
    void /v1/user/exchange/instant/sellSignal(SWGSuccessOrderDataResponse* summary);
    
};
}
#endif
