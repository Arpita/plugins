/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGSuccRefData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSuccRefData::SWGSuccRefData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSuccRefData::SWGSuccRefData() {
    init();
}

SWGSuccRefData::~SWGSuccRefData() {
    this->cleanup();
}

void
SWGSuccRefData::init() {
    ref_percent = 0.0;
    time = 0L;
    ref_id = new QString("");
    email_verified = false;
    kyc_complete = false;
    btc_earned = 0L;
    fiat_earned = 0L;
}

void
SWGSuccRefData::cleanup() {
    


    if(ref_id != nullptr) {
        delete ref_id;
    }




}

SWGSuccRefData*
SWGSuccRefData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSuccRefData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&ref_percent, pJson["ref_percent"], "double", "");
    ::Swagger::setValue(&time, pJson["time"], "qint64", "");
    ::Swagger::setValue(&ref_id, pJson["ref_id"], "QString", "QString");
    ::Swagger::setValue(&email_verified, pJson["email_verified"], "bool", "");
    ::Swagger::setValue(&kyc_complete, pJson["kyc_complete"], "bool", "");
    ::Swagger::setValue(&btc_earned, pJson["btc_earned"], "qint64", "");
    ::Swagger::setValue(&fiat_earned, pJson["fiat_earned"], "qint64", "");
}

QString
SWGSuccRefData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSuccRefData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("ref_percent", QJsonValue(ref_percent));

    obj->insert("time", QJsonValue(time));

    toJsonValue(QString("ref_id"), ref_id, obj, QString("QString"));

    obj->insert("email_verified", QJsonValue(email_verified));

    obj->insert("kyc_complete", QJsonValue(kyc_complete));

    obj->insert("btc_earned", QJsonValue(btc_earned));

    obj->insert("fiat_earned", QJsonValue(fiat_earned));

    return obj;
}

double
SWGSuccRefData::getRefPercent() {
    return ref_percent;
}
void
SWGSuccRefData::setRefPercent(double ref_percent) {
    this->ref_percent = ref_percent;
}

qint64
SWGSuccRefData::getTime() {
    return time;
}
void
SWGSuccRefData::setTime(qint64 time) {
    this->time = time;
}

QString*
SWGSuccRefData::getRefId() {
    return ref_id;
}
void
SWGSuccRefData::setRefId(QString* ref_id) {
    this->ref_id = ref_id;
}

bool
SWGSuccRefData::getEmailVerified() {
    return email_verified;
}
void
SWGSuccRefData::setEmailVerified(bool email_verified) {
    this->email_verified = email_verified;
}

bool
SWGSuccRefData::getKycComplete() {
    return kyc_complete;
}
void
SWGSuccRefData::setKycComplete(bool kyc_complete) {
    this->kyc_complete = kyc_complete;
}

qint64
SWGSuccRefData::getBtcEarned() {
    return btc_earned;
}
void
SWGSuccRefData::setBtcEarned(qint64 btc_earned) {
    this->btc_earned = btc_earned;
}

qint64
SWGSuccRefData::getFiatEarned() {
    return fiat_earned;
}
void
SWGSuccRefData::setFiatEarned(qint64 fiat_earned) {
    this->fiat_earned = fiat_earned;
}



} /* namespace Swagger */

