/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGSuccCoinRefData.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSuccCoinRefData::SWGSuccCoinRefData(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSuccCoinRefData::SWGSuccCoinRefData() {
    init();
}

SWGSuccCoinRefData::~SWGSuccCoinRefData() {
    this->cleanup();
}

void
SWGSuccCoinRefData::init() {
    ref_percent = 0.0;
    time = 0L;
    order_id = new QString("");
    ref_id = new QString("");
    trade_id = new QString("");
    new_user_id_masked = new QString("");
    deposit_id = new QString("");
    amt_paid = 0L;
}

void
SWGSuccCoinRefData::cleanup() {
    


    if(order_id != nullptr) {
        delete order_id;
    }

    if(ref_id != nullptr) {
        delete ref_id;
    }

    if(trade_id != nullptr) {
        delete trade_id;
    }

    if(new_user_id_masked != nullptr) {
        delete new_user_id_masked;
    }

    if(deposit_id != nullptr) {
        delete deposit_id;
    }

}

SWGSuccCoinRefData*
SWGSuccCoinRefData::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSuccCoinRefData::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&ref_percent, pJson["ref_percent"], "double", "");
    ::Swagger::setValue(&time, pJson["time"], "qint64", "");
    ::Swagger::setValue(&order_id, pJson["order_id"], "QString", "QString");
    ::Swagger::setValue(&ref_id, pJson["ref_id"], "QString", "QString");
    ::Swagger::setValue(&trade_id, pJson["trade_id"], "QString", "QString");
    ::Swagger::setValue(&new_user_id_masked, pJson["new_user_id_masked"], "QString", "QString");
    ::Swagger::setValue(&deposit_id, pJson["deposit_id"], "QString", "QString");
    ::Swagger::setValue(&amt_paid, pJson["amt_paid"], "qint64", "");
}

QString
SWGSuccCoinRefData::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSuccCoinRefData::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("ref_percent", QJsonValue(ref_percent));

    obj->insert("time", QJsonValue(time));

    toJsonValue(QString("order_id"), order_id, obj, QString("QString"));

    toJsonValue(QString("ref_id"), ref_id, obj, QString("QString"));

    toJsonValue(QString("trade_id"), trade_id, obj, QString("QString"));

    toJsonValue(QString("new_user_id_masked"), new_user_id_masked, obj, QString("QString"));

    toJsonValue(QString("deposit_id"), deposit_id, obj, QString("QString"));

    obj->insert("amt_paid", QJsonValue(amt_paid));

    return obj;
}

double
SWGSuccCoinRefData::getRefPercent() {
    return ref_percent;
}
void
SWGSuccCoinRefData::setRefPercent(double ref_percent) {
    this->ref_percent = ref_percent;
}

qint64
SWGSuccCoinRefData::getTime() {
    return time;
}
void
SWGSuccCoinRefData::setTime(qint64 time) {
    this->time = time;
}

QString*
SWGSuccCoinRefData::getOrderId() {
    return order_id;
}
void
SWGSuccCoinRefData::setOrderId(QString* order_id) {
    this->order_id = order_id;
}

QString*
SWGSuccCoinRefData::getRefId() {
    return ref_id;
}
void
SWGSuccCoinRefData::setRefId(QString* ref_id) {
    this->ref_id = ref_id;
}

QString*
SWGSuccCoinRefData::getTradeId() {
    return trade_id;
}
void
SWGSuccCoinRefData::setTradeId(QString* trade_id) {
    this->trade_id = trade_id;
}

QString*
SWGSuccCoinRefData::getNewUserIdMasked() {
    return new_user_id_masked;
}
void
SWGSuccCoinRefData::setNewUserIdMasked(QString* new_user_id_masked) {
    this->new_user_id_masked = new_user_id_masked;
}

QString*
SWGSuccCoinRefData::getDepositId() {
    return deposit_id;
}
void
SWGSuccCoinRefData::setDepositId(QString* deposit_id) {
    this->deposit_id = deposit_id;
}

qint64
SWGSuccCoinRefData::getAmtPaid() {
    return amt_paid;
}
void
SWGSuccCoinRefData::setAmtPaid(qint64 amt_paid) {
    this->amt_paid = amt_paid;
}



} /* namespace Swagger */

