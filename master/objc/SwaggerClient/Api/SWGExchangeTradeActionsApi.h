#import <Foundation/Foundation.h>
#import "SWGAskID.h"
#import "SWGSuccessResult.h"
#import "SWGFailResult.h"
#import "SWGRateVolData.h"
#import "SWGSuccessResultList.h"
#import "SWGBidID.h"
#import "SWGMinFiat.h"
#import "SWGMaxVol.h"
#import "SWGApi.h"

/**
* Coinsecure Api Documentation
* To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
*
* OpenAPI spec version: 1.0b
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGExchangeTradeActionsApi: NSObject <SWGApi>

extern NSString* kSWGExchangeTradeActionsApiErrorDomain;
extern NSInteger kSWGExchangeTradeActionsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Cancel Open Sell Order
/// Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResult*
-(NSNumber*) v1userexchangeaskcancelWithBody: (SWGAskID*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResult* output, NSError* error)) handler;


/// BTC Sell Order
/// Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResultList*
-(NSNumber*) v1userexchangeasknewWithBody: (SWGRateVolData*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResultList* output, NSError* error)) handler;


/// Cancel Open Buy Order
/// Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResult*
-(NSNumber*) v1userexchangebidcancelWithBody: (SWGBidID*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResult* output, NSError* error)) handler;


/// BTC Buy Order
/// Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResultList*
-(NSNumber*) v1userexchangebidnewWithBody: (SWGRateVolData*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResultList* output, NSError* error)) handler;


/// Instantly Buy BTC
/// Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResultList*
-(NSNumber*) v1userexchangeinstantbuyWithBody: (SWGMinFiat*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResultList* output, NSError* error)) handler;


/// Instantly Sell BTC
/// Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
///
/// @param body Please send the form with valid inputs.
/// @param authorization Enter a valid Api Key. (optional)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGSuccessResultList*
-(NSNumber*) v1userexchangeinstantsellWithBody: (SWGMaxVol*) body
    authorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGSuccessResultList* output, NSError* error)) handler;



@end
