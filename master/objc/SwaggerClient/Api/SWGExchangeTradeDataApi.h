#import <Foundation/Foundation.h>
#import "SWGRateDataResponse.h"
#import "SWGFailResult.h"
#import "SWGRateVolDataResponse.h"
#import "SWGLastTradeDataResponse.h"
#import "SWGRateDiffDataResponse.h"
#import "SWGStandardTickerResultData.h"
#import "SWGOrderDataResponse.h"
#import "SWGRateVolTimeTypeDataResponse.h"
#import "SWGApi.h"

/**
* Coinsecure Api Documentation
* To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
*
* OpenAPI spec version: beta
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGExchangeTradeDataApi: NSObject <SWGApi>

extern NSString* kSWGExchangeTradeDataApiErrorDomain;
extern NSInteger kSWGExchangeTradeDataApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Lowest Ask
/// Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateDataResponse*
-(NSNumber*) v1exchangeasklowWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateDataResponse* output, NSError* error)) handler;


/// All Sell Orders
/// Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateVolDataResponse*
-(NSNumber*) v1exchangeaskordersWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateVolDataResponse* output, NSError* error)) handler;


/// Returns the Highest Bid in the Order Book
/// Highest Bid.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateDataResponse*
-(NSNumber*) v1exchangebidhighWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateDataResponse* output, NSError* error)) handler;


/// All Buy Orders
/// Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateVolDataResponse*
-(NSNumber*) v1exchangebidordersWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateVolDataResponse* output, NSError* error)) handler;


/// Last Trade
/// Returns a summary of data from the Exchange.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGLastTradeDataResponse*
-(NSNumber*) v1exchangelastTradeWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGLastTradeDataResponse* output, NSError* error)) handler;


/// Max 24 Hour Rate
/// Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateDiffDataResponse*
-(NSNumber*) v1exchangemax24HrWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateDiffDataResponse* output, NSError* error)) handler;


/// Min 24 Hour Rate
/// Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateDiffDataResponse*
-(NSNumber*) v1exchangemin24HrWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGRateDiffDataResponse* output, NSError* error)) handler;


/// Exchange Ticker
/// Returns a summary of data from the Exchange.
///
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGStandardTickerResultData*
-(NSNumber*) v1exchangetickerWithAccept: (NSString*) accept
    completionHandler: (void (^)(SWGStandardTickerResultData* output, NSError* error)) handler;


/// Cancelled User Sell Orders
/// Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangeaskcancelledWithAuthorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Completed User Sell Orders
/// Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional) (default to 0)
/// @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional) (default to 9223372036854776000)
/// @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional) (default to 10)
/// @param offset Offset defaults to 0 if input is invalid. (Optional) (optional) (default to 0)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangeaskcompletedWithAuthorization: (NSString*) authorization
    from: (NSNumber*) from
    to: (NSNumber*) to
    max: (NSNumber*) max
    offset: (NSNumber*) offset
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Pending User Sell Orders
/// Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangeaskpendingWithAuthorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Cancelled User Buy Orders
/// Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangebidcancelledWithAuthorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Completed User Buy Orders
/// Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangebidcompletedWithAuthorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Pending User Buy Orders
/// Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param authorization API object to be added
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGOrderDataResponse*
-(NSNumber*) v1userexchangebidpendingWithAuthorization: (NSString*) authorization
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGOrderDataResponse* output, NSError* error)) handler;


/// Completed Exchange Trades
/// Returns all completed Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
///
/// @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional) (default to 0)
/// @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional) (default to 9223372036854776000)
/// @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional) (default to 10)
/// @param offset Offset defaults to 0 if input is invalid. (Optional) (optional) (default to 0)
/// @param accept JSON, XML or CSV can be returned (Optional) (optional)
/// 
///  code:200 message:"Successful Request",
///  code:400 message:"Bad Request"
///
/// @return SWGRateVolTimeTypeDataResponse*
-(NSNumber*) v1userexchangetradesWithFrom: (NSNumber*) from
    to: (NSNumber*) to
    max: (NSNumber*) max
    offset: (NSNumber*) offset
    accept: (NSString*) accept
    completionHandler: (void (^)(SWGRateVolTimeTypeDataResponse* output, NSError* error)) handler;



@end
