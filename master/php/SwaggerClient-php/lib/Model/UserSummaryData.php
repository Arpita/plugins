<?php
/**
 * UserSummaryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UserSummaryData Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserSummaryData implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserSummaryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'kyc_status' => 'string',
        'bank_link_status' => 'string',
        'trade_ready' => 'string',
        'is_disabled_account' => 'bool',
        'fa_secure' => 'string',
        'has_phone' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'kyc_status' => 'kycStatus',
        'bank_link_status' => 'bankLinkStatus',
        'trade_ready' => 'tradeReady',
        'is_disabled_account' => 'isDisabledAccount',
        'fa_secure' => 'faSecure',
        'has_phone' => 'hasPhone'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'kyc_status' => 'setKycStatus',
        'bank_link_status' => 'setBankLinkStatus',
        'trade_ready' => 'setTradeReady',
        'is_disabled_account' => 'setIsDisabledAccount',
        'fa_secure' => 'setFaSecure',
        'has_phone' => 'setHasPhone'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'kyc_status' => 'getKycStatus',
        'bank_link_status' => 'getBankLinkStatus',
        'trade_ready' => 'getTradeReady',
        'is_disabled_account' => 'getIsDisabledAccount',
        'fa_secure' => 'getFaSecure',
        'has_phone' => 'getHasPhone'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kyc_status'] = isset($data['kyc_status']) ? $data['kyc_status'] : null;
        $this->container['bank_link_status'] = isset($data['bank_link_status']) ? $data['bank_link_status'] : null;
        $this->container['trade_ready'] = isset($data['trade_ready']) ? $data['trade_ready'] : null;
        $this->container['is_disabled_account'] = isset($data['is_disabled_account']) ? $data['is_disabled_account'] : false;
        $this->container['fa_secure'] = isset($data['fa_secure']) ? $data['fa_secure'] : null;
        $this->container['has_phone'] = isset($data['has_phone']) ? $data['has_phone'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['kyc_status'] === null) {
            $invalid_properties[] = "'kyc_status' can't be null";
        }
        if ($this->container['bank_link_status'] === null) {
            $invalid_properties[] = "'bank_link_status' can't be null";
        }
        if ($this->container['trade_ready'] === null) {
            $invalid_properties[] = "'trade_ready' can't be null";
        }
        if ($this->container['is_disabled_account'] === null) {
            $invalid_properties[] = "'is_disabled_account' can't be null";
        }
        if ($this->container['fa_secure'] === null) {
            $invalid_properties[] = "'fa_secure' can't be null";
        }
        if ($this->container['has_phone'] === null) {
            $invalid_properties[] = "'has_phone' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['kyc_status'] === null) {
            return false;
        }
        if ($this->container['bank_link_status'] === null) {
            return false;
        }
        if ($this->container['trade_ready'] === null) {
            return false;
        }
        if ($this->container['is_disabled_account'] === null) {
            return false;
        }
        if ($this->container['fa_secure'] === null) {
            return false;
        }
        if ($this->container['has_phone'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets kyc_status
     * @return string
     */
    public function getKycStatus()
    {
        return $this->container['kyc_status'];
    }

    /**
     * Sets kyc_status
     * @param string $kyc_status
     * @return $this
     */
    public function setKycStatus($kyc_status)
    {
        $this->container['kyc_status'] = $kyc_status;

        return $this;
    }

    /**
     * Gets bank_link_status
     * @return string
     */
    public function getBankLinkStatus()
    {
        return $this->container['bank_link_status'];
    }

    /**
     * Sets bank_link_status
     * @param string $bank_link_status
     * @return $this
     */
    public function setBankLinkStatus($bank_link_status)
    {
        $this->container['bank_link_status'] = $bank_link_status;

        return $this;
    }

    /**
     * Gets trade_ready
     * @return string
     */
    public function getTradeReady()
    {
        return $this->container['trade_ready'];
    }

    /**
     * Sets trade_ready
     * @param string $trade_ready
     * @return $this
     */
    public function setTradeReady($trade_ready)
    {
        $this->container['trade_ready'] = $trade_ready;

        return $this;
    }

    /**
     * Gets is_disabled_account
     * @return bool
     */
    public function getIsDisabledAccount()
    {
        return $this->container['is_disabled_account'];
    }

    /**
     * Sets is_disabled_account
     * @param bool $is_disabled_account
     * @return $this
     */
    public function setIsDisabledAccount($is_disabled_account)
    {
        $this->container['is_disabled_account'] = $is_disabled_account;

        return $this;
    }

    /**
     * Gets fa_secure
     * @return string
     */
    public function getFaSecure()
    {
        return $this->container['fa_secure'];
    }

    /**
     * Sets fa_secure
     * @param string $fa_secure
     * @return $this
     */
    public function setFaSecure($fa_secure)
    {
        $this->container['fa_secure'] = $fa_secure;

        return $this;
    }

    /**
     * Gets has_phone
     * @return string
     */
    public function getHasPhone()
    {
        return $this->container['has_phone'];
    }

    /**
     * Sets has_phone
     * @param string $has_phone
     * @return $this
     */
    public function setHasPhone($has_phone)
    {
        $this->container['has_phone'] = $has_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


