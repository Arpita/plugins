<?php
/**
 * NewBankForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NewBankForm Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewBankForm implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NewBankForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acct_nick' => 'string',
        'name' => 'string',
        'ban' => 'string',
        'ifsc' => 'string',
        'message' => 'string',
        'ban_type' => 'string',
        'phone' => 'string',
        'otp' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'acct_nick' => 'acct_nick',
        'name' => 'name',
        'ban' => 'ban',
        'ifsc' => 'ifsc',
        'message' => 'message',
        'ban_type' => 'banType',
        'phone' => 'phone',
        'otp' => 'otp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'acct_nick' => 'setAcctNick',
        'name' => 'setName',
        'ban' => 'setBan',
        'ifsc' => 'setIfsc',
        'message' => 'setMessage',
        'ban_type' => 'setBanType',
        'phone' => 'setPhone',
        'otp' => 'setOtp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'acct_nick' => 'getAcctNick',
        'name' => 'getName',
        'ban' => 'getBan',
        'ifsc' => 'getIfsc',
        'message' => 'getMessage',
        'ban_type' => 'getBanType',
        'phone' => 'getPhone',
        'otp' => 'getOtp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acct_nick'] = isset($data['acct_nick']) ? $data['acct_nick'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ban'] = isset($data['ban']) ? $data['ban'] : null;
        $this->container['ifsc'] = isset($data['ifsc']) ? $data['ifsc'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['ban_type'] = isset($data['ban_type']) ? $data['ban_type'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['otp'] = isset($data['otp']) ? $data['otp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['acct_nick'] === null) {
            $invalid_properties[] = "'acct_nick' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['ban'] === null) {
            $invalid_properties[] = "'ban' can't be null";
        }
        if ($this->container['ifsc'] === null) {
            $invalid_properties[] = "'ifsc' can't be null";
        }
        if ($this->container['ban_type'] === null) {
            $invalid_properties[] = "'ban_type' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalid_properties[] = "'phone' can't be null";
        }
        if ($this->container['otp'] === null) {
            $invalid_properties[] = "'otp' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['acct_nick'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ban'] === null) {
            return false;
        }
        if ($this->container['ifsc'] === null) {
            return false;
        }
        if ($this->container['ban_type'] === null) {
            return false;
        }
        if ($this->container['phone'] === null) {
            return false;
        }
        if ($this->container['otp'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets acct_nick
     * @return string
     */
    public function getAcctNick()
    {
        return $this->container['acct_nick'];
    }

    /**
     * Sets acct_nick
     * @param string $acct_nick
     * @return $this
     */
    public function setAcctNick($acct_nick)
    {
        $this->container['acct_nick'] = $acct_nick;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ban
     * @return string
     */
    public function getBan()
    {
        return $this->container['ban'];
    }

    /**
     * Sets ban
     * @param string $ban
     * @return $this
     */
    public function setBan($ban)
    {
        $this->container['ban'] = $ban;

        return $this;
    }

    /**
     * Gets ifsc
     * @return string
     */
    public function getIfsc()
    {
        return $this->container['ifsc'];
    }

    /**
     * Sets ifsc
     * @param string $ifsc
     * @return $this
     */
    public function setIfsc($ifsc)
    {
        $this->container['ifsc'] = $ifsc;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets ban_type
     * @return string
     */
    public function getBanType()
    {
        return $this->container['ban_type'];
    }

    /**
     * Sets ban_type
     * @param string $ban_type
     * @return $this
     */
    public function setBanType($ban_type)
    {
        $this->container['ban_type'] = $ban_type;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets otp
     * @return string
     */
    public function getOtp()
    {
        return $this->container['otp'];
    }

    /**
     * Sets otp
     * @param string $otp
     * @return $this
     */
    public function setOtp($otp)
    {
        $this->container['otp'] = $otp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
