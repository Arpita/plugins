<?php
/**
 * SuccessTickerResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SuccessTickerResponse Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SuccessTickerResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SuccessTickerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_price' => 'int',
        'timestamp' => 'int',
        'bid' => 'int',
        'ask' => 'int',
        'fiat_volume' => 'int',
        'coin_volume' => 'int',
        'open' => 'int',
        'high' => 'int',
        'low' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'last_price' => 'lastPrice',
        'timestamp' => 'timestamp',
        'bid' => 'bid',
        'ask' => 'ask',
        'fiat_volume' => 'fiatVolume',
        'coin_volume' => 'coinVolume',
        'open' => 'open',
        'high' => 'high',
        'low' => 'low'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'last_price' => 'setLastPrice',
        'timestamp' => 'setTimestamp',
        'bid' => 'setBid',
        'ask' => 'setAsk',
        'fiat_volume' => 'setFiatVolume',
        'coin_volume' => 'setCoinVolume',
        'open' => 'setOpen',
        'high' => 'setHigh',
        'low' => 'setLow'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'last_price' => 'getLastPrice',
        'timestamp' => 'getTimestamp',
        'bid' => 'getBid',
        'ask' => 'getAsk',
        'fiat_volume' => 'getFiatVolume',
        'coin_volume' => 'getCoinVolume',
        'open' => 'getOpen',
        'high' => 'getHigh',
        'low' => 'getLow'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['bid'] = isset($data['bid']) ? $data['bid'] : null;
        $this->container['ask'] = isset($data['ask']) ? $data['ask'] : null;
        $this->container['fiat_volume'] = isset($data['fiat_volume']) ? $data['fiat_volume'] : null;
        $this->container['coin_volume'] = isset($data['coin_volume']) ? $data['coin_volume'] : null;
        $this->container['open'] = isset($data['open']) ? $data['open'] : null;
        $this->container['high'] = isset($data['high']) ? $data['high'] : null;
        $this->container['low'] = isset($data['low']) ? $data['low'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['last_price'] === null) {
            $invalid_properties[] = "'last_price' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalid_properties[] = "'timestamp' can't be null";
        }
        if ($this->container['bid'] === null) {
            $invalid_properties[] = "'bid' can't be null";
        }
        if ($this->container['ask'] === null) {
            $invalid_properties[] = "'ask' can't be null";
        }
        if ($this->container['fiat_volume'] === null) {
            $invalid_properties[] = "'fiat_volume' can't be null";
        }
        if ($this->container['coin_volume'] === null) {
            $invalid_properties[] = "'coin_volume' can't be null";
        }
        if ($this->container['open'] === null) {
            $invalid_properties[] = "'open' can't be null";
        }
        if ($this->container['high'] === null) {
            $invalid_properties[] = "'high' can't be null";
        }
        if ($this->container['low'] === null) {
            $invalid_properties[] = "'low' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['last_price'] === null) {
            return false;
        }
        if ($this->container['timestamp'] === null) {
            return false;
        }
        if ($this->container['bid'] === null) {
            return false;
        }
        if ($this->container['ask'] === null) {
            return false;
        }
        if ($this->container['fiat_volume'] === null) {
            return false;
        }
        if ($this->container['coin_volume'] === null) {
            return false;
        }
        if ($this->container['open'] === null) {
            return false;
        }
        if ($this->container['high'] === null) {
            return false;
        }
        if ($this->container['low'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets last_price
     * @return int
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     * @param int $last_price
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets bid
     * @return int
     */
    public function getBid()
    {
        return $this->container['bid'];
    }

    /**
     * Sets bid
     * @param int $bid
     * @return $this
     */
    public function setBid($bid)
    {
        $this->container['bid'] = $bid;

        return $this;
    }

    /**
     * Gets ask
     * @return int
     */
    public function getAsk()
    {
        return $this->container['ask'];
    }

    /**
     * Sets ask
     * @param int $ask
     * @return $this
     */
    public function setAsk($ask)
    {
        $this->container['ask'] = $ask;

        return $this;
    }

    /**
     * Gets fiat_volume
     * @return int
     */
    public function getFiatVolume()
    {
        return $this->container['fiat_volume'];
    }

    /**
     * Sets fiat_volume
     * @param int $fiat_volume
     * @return $this
     */
    public function setFiatVolume($fiat_volume)
    {
        $this->container['fiat_volume'] = $fiat_volume;

        return $this;
    }

    /**
     * Gets coin_volume
     * @return int
     */
    public function getCoinVolume()
    {
        return $this->container['coin_volume'];
    }

    /**
     * Sets coin_volume
     * @param int $coin_volume
     * @return $this
     */
    public function setCoinVolume($coin_volume)
    {
        $this->container['coin_volume'] = $coin_volume;

        return $this;
    }

    /**
     * Gets open
     * @return int
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     * @param int $open
     * @return $this
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets high
     * @return int
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high
     * @param int $high
     * @return $this
     */
    public function setHigh($high)
    {
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets low
     * @return int
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low
     * @param int $low
     * @return $this
     */
    public function setLow($low)
    {
        $this->container['low'] = $low;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
