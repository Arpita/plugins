<?php
/**
 * BankSummaryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BankSummaryData Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BankSummaryData implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BankSummaryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pending_coin_balance' => 'int',
        'pending_fiat_balance' => 'int',
        'available_coin_balance' => 'int',
        'available_fiat_balance' => 'int',
        'total_coin_balance' => 'int',
        'total_fiat_balance' => 'int',
        'coin_fee_percentage' => 'double',
        'fiat_fee_percentage' => 'double',
        'bank_link_status' => 'string',
        'has_trade_netki' => 'bool',
        'trade_netki_name' => 'string',
        'trade_netki_address' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pending_coin_balance' => 'pendingCoinBalance',
        'pending_fiat_balance' => 'pendingFiatBalance',
        'available_coin_balance' => 'availableCoinBalance',
        'available_fiat_balance' => 'availableFiatBalance',
        'total_coin_balance' => 'totalCoinBalance',
        'total_fiat_balance' => 'totalFiatBalance',
        'coin_fee_percentage' => 'coinFeePercentage',
        'fiat_fee_percentage' => 'fiatFeePercentage',
        'bank_link_status' => 'bankLinkStatus',
        'has_trade_netki' => 'hasTradeNetki',
        'trade_netki_name' => 'tradeNetkiName',
        'trade_netki_address' => 'tradeNetkiAddress'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pending_coin_balance' => 'setPendingCoinBalance',
        'pending_fiat_balance' => 'setPendingFiatBalance',
        'available_coin_balance' => 'setAvailableCoinBalance',
        'available_fiat_balance' => 'setAvailableFiatBalance',
        'total_coin_balance' => 'setTotalCoinBalance',
        'total_fiat_balance' => 'setTotalFiatBalance',
        'coin_fee_percentage' => 'setCoinFeePercentage',
        'fiat_fee_percentage' => 'setFiatFeePercentage',
        'bank_link_status' => 'setBankLinkStatus',
        'has_trade_netki' => 'setHasTradeNetki',
        'trade_netki_name' => 'setTradeNetkiName',
        'trade_netki_address' => 'setTradeNetkiAddress'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pending_coin_balance' => 'getPendingCoinBalance',
        'pending_fiat_balance' => 'getPendingFiatBalance',
        'available_coin_balance' => 'getAvailableCoinBalance',
        'available_fiat_balance' => 'getAvailableFiatBalance',
        'total_coin_balance' => 'getTotalCoinBalance',
        'total_fiat_balance' => 'getTotalFiatBalance',
        'coin_fee_percentage' => 'getCoinFeePercentage',
        'fiat_fee_percentage' => 'getFiatFeePercentage',
        'bank_link_status' => 'getBankLinkStatus',
        'has_trade_netki' => 'getHasTradeNetki',
        'trade_netki_name' => 'getTradeNetkiName',
        'trade_netki_address' => 'getTradeNetkiAddress'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pending_coin_balance'] = isset($data['pending_coin_balance']) ? $data['pending_coin_balance'] : null;
        $this->container['pending_fiat_balance'] = isset($data['pending_fiat_balance']) ? $data['pending_fiat_balance'] : null;
        $this->container['available_coin_balance'] = isset($data['available_coin_balance']) ? $data['available_coin_balance'] : null;
        $this->container['available_fiat_balance'] = isset($data['available_fiat_balance']) ? $data['available_fiat_balance'] : null;
        $this->container['total_coin_balance'] = isset($data['total_coin_balance']) ? $data['total_coin_balance'] : null;
        $this->container['total_fiat_balance'] = isset($data['total_fiat_balance']) ? $data['total_fiat_balance'] : null;
        $this->container['coin_fee_percentage'] = isset($data['coin_fee_percentage']) ? $data['coin_fee_percentage'] : null;
        $this->container['fiat_fee_percentage'] = isset($data['fiat_fee_percentage']) ? $data['fiat_fee_percentage'] : null;
        $this->container['bank_link_status'] = isset($data['bank_link_status']) ? $data['bank_link_status'] : null;
        $this->container['has_trade_netki'] = isset($data['has_trade_netki']) ? $data['has_trade_netki'] : false;
        $this->container['trade_netki_name'] = isset($data['trade_netki_name']) ? $data['trade_netki_name'] : null;
        $this->container['trade_netki_address'] = isset($data['trade_netki_address']) ? $data['trade_netki_address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['pending_coin_balance'] === null) {
            $invalid_properties[] = "'pending_coin_balance' can't be null";
        }
        if ($this->container['pending_fiat_balance'] === null) {
            $invalid_properties[] = "'pending_fiat_balance' can't be null";
        }
        if ($this->container['available_coin_balance'] === null) {
            $invalid_properties[] = "'available_coin_balance' can't be null";
        }
        if ($this->container['available_fiat_balance'] === null) {
            $invalid_properties[] = "'available_fiat_balance' can't be null";
        }
        if ($this->container['total_coin_balance'] === null) {
            $invalid_properties[] = "'total_coin_balance' can't be null";
        }
        if ($this->container['total_fiat_balance'] === null) {
            $invalid_properties[] = "'total_fiat_balance' can't be null";
        }
        if ($this->container['coin_fee_percentage'] === null) {
            $invalid_properties[] = "'coin_fee_percentage' can't be null";
        }
        if ($this->container['fiat_fee_percentage'] === null) {
            $invalid_properties[] = "'fiat_fee_percentage' can't be null";
        }
        if ($this->container['bank_link_status'] === null) {
            $invalid_properties[] = "'bank_link_status' can't be null";
        }
        if ($this->container['has_trade_netki'] === null) {
            $invalid_properties[] = "'has_trade_netki' can't be null";
        }
        if ($this->container['trade_netki_name'] === null) {
            $invalid_properties[] = "'trade_netki_name' can't be null";
        }
        if ($this->container['trade_netki_address'] === null) {
            $invalid_properties[] = "'trade_netki_address' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['pending_coin_balance'] === null) {
            return false;
        }
        if ($this->container['pending_fiat_balance'] === null) {
            return false;
        }
        if ($this->container['available_coin_balance'] === null) {
            return false;
        }
        if ($this->container['available_fiat_balance'] === null) {
            return false;
        }
        if ($this->container['total_coin_balance'] === null) {
            return false;
        }
        if ($this->container['total_fiat_balance'] === null) {
            return false;
        }
        if ($this->container['coin_fee_percentage'] === null) {
            return false;
        }
        if ($this->container['fiat_fee_percentage'] === null) {
            return false;
        }
        if ($this->container['bank_link_status'] === null) {
            return false;
        }
        if ($this->container['has_trade_netki'] === null) {
            return false;
        }
        if ($this->container['trade_netki_name'] === null) {
            return false;
        }
        if ($this->container['trade_netki_address'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets pending_coin_balance
     * @return int
     */
    public function getPendingCoinBalance()
    {
        return $this->container['pending_coin_balance'];
    }

    /**
     * Sets pending_coin_balance
     * @param int $pending_coin_balance
     * @return $this
     */
    public function setPendingCoinBalance($pending_coin_balance)
    {
        $this->container['pending_coin_balance'] = $pending_coin_balance;

        return $this;
    }

    /**
     * Gets pending_fiat_balance
     * @return int
     */
    public function getPendingFiatBalance()
    {
        return $this->container['pending_fiat_balance'];
    }

    /**
     * Sets pending_fiat_balance
     * @param int $pending_fiat_balance
     * @return $this
     */
    public function setPendingFiatBalance($pending_fiat_balance)
    {
        $this->container['pending_fiat_balance'] = $pending_fiat_balance;

        return $this;
    }

    /**
     * Gets available_coin_balance
     * @return int
     */
    public function getAvailableCoinBalance()
    {
        return $this->container['available_coin_balance'];
    }

    /**
     * Sets available_coin_balance
     * @param int $available_coin_balance
     * @return $this
     */
    public function setAvailableCoinBalance($available_coin_balance)
    {
        $this->container['available_coin_balance'] = $available_coin_balance;

        return $this;
    }

    /**
     * Gets available_fiat_balance
     * @return int
     */
    public function getAvailableFiatBalance()
    {
        return $this->container['available_fiat_balance'];
    }

    /**
     * Sets available_fiat_balance
     * @param int $available_fiat_balance
     * @return $this
     */
    public function setAvailableFiatBalance($available_fiat_balance)
    {
        $this->container['available_fiat_balance'] = $available_fiat_balance;

        return $this;
    }

    /**
     * Gets total_coin_balance
     * @return int
     */
    public function getTotalCoinBalance()
    {
        return $this->container['total_coin_balance'];
    }

    /**
     * Sets total_coin_balance
     * @param int $total_coin_balance
     * @return $this
     */
    public function setTotalCoinBalance($total_coin_balance)
    {
        $this->container['total_coin_balance'] = $total_coin_balance;

        return $this;
    }

    /**
     * Gets total_fiat_balance
     * @return int
     */
    public function getTotalFiatBalance()
    {
        return $this->container['total_fiat_balance'];
    }

    /**
     * Sets total_fiat_balance
     * @param int $total_fiat_balance
     * @return $this
     */
    public function setTotalFiatBalance($total_fiat_balance)
    {
        $this->container['total_fiat_balance'] = $total_fiat_balance;

        return $this;
    }

    /**
     * Gets coin_fee_percentage
     * @return double
     */
    public function getCoinFeePercentage()
    {
        return $this->container['coin_fee_percentage'];
    }

    /**
     * Sets coin_fee_percentage
     * @param double $coin_fee_percentage
     * @return $this
     */
    public function setCoinFeePercentage($coin_fee_percentage)
    {
        $this->container['coin_fee_percentage'] = $coin_fee_percentage;

        return $this;
    }

    /**
     * Gets fiat_fee_percentage
     * @return double
     */
    public function getFiatFeePercentage()
    {
        return $this->container['fiat_fee_percentage'];
    }

    /**
     * Sets fiat_fee_percentage
     * @param double $fiat_fee_percentage
     * @return $this
     */
    public function setFiatFeePercentage($fiat_fee_percentage)
    {
        $this->container['fiat_fee_percentage'] = $fiat_fee_percentage;

        return $this;
    }

    /**
     * Gets bank_link_status
     * @return string
     */
    public function getBankLinkStatus()
    {
        return $this->container['bank_link_status'];
    }

    /**
     * Sets bank_link_status
     * @param string $bank_link_status
     * @return $this
     */
    public function setBankLinkStatus($bank_link_status)
    {
        $this->container['bank_link_status'] = $bank_link_status;

        return $this;
    }

    /**
     * Gets has_trade_netki
     * @return bool
     */
    public function getHasTradeNetki()
    {
        return $this->container['has_trade_netki'];
    }

    /**
     * Sets has_trade_netki
     * @param bool $has_trade_netki
     * @return $this
     */
    public function setHasTradeNetki($has_trade_netki)
    {
        $this->container['has_trade_netki'] = $has_trade_netki;

        return $this;
    }

    /**
     * Gets trade_netki_name
     * @return string
     */
    public function getTradeNetkiName()
    {
        return $this->container['trade_netki_name'];
    }

    /**
     * Sets trade_netki_name
     * @param string $trade_netki_name
     * @return $this
     */
    public function setTradeNetkiName($trade_netki_name)
    {
        $this->container['trade_netki_name'] = $trade_netki_name;

        return $this;
    }

    /**
     * Gets trade_netki_address
     * @return string
     */
    public function getTradeNetkiAddress()
    {
        return $this->container['trade_netki_address'];
    }

    /**
     * Sets trade_netki_address
     * @param string $trade_netki_address
     * @return $this
     */
    public function setTradeNetkiAddress($trade_netki_address)
    {
        $this->container['trade_netki_address'] = $trade_netki_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
