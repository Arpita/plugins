<?php
/**
 * ExchangeBankActionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ExchangeBankActionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExchangeBankActionsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ExchangeBankActionsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1userexchangebankcoinwithdrawinitiate
     *
     * Initiate Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\SendCoin $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawinitiate($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawinitiateWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankcoinwithdrawinitiateWithHttpInfo
     *
     * Initiate Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\SendCoin $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawinitiateWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankcoinwithdrawinitiate');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/initiate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankcoinwithdrawnewVerifycode
     *
     * Gets a Verification Code..
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawnewVerifycode($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo
     *
     * Gets a Verification Code..
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawnewVerifycodeWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankcoinwithdrawnewVerifycode');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/newVerifycode";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankcoinwithdrawunverifiedcancel
     *
     * Cancel Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawunverifiedcancel($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawunverifiedcancelWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankcoinwithdrawunverifiedcancelWithHttpInfo
     *
     * Cancel Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawunverifiedcancelWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankcoinwithdrawunverifiedcancel');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/unverified/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankcoinwithdrawverify
     *
     * Verify Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\Code $body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawverify($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawverifyWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankcoinwithdrawverifyWithHttpInfo
     *
     * Verify Bitcoin Withdrawal.
     *
     * @param \Swagger\Client\Model\Code $body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankcoinwithdrawverifyWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankcoinwithdrawverify');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/verify";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiataccountnew
     *
     * New Bank Link.
     *
     * @param \Swagger\Client\Model\NewBankForm $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiataccountnew($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiataccountnewWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiataccountnewWithHttpInfo
     *
     * New Bank Link.
     *
     * @param \Swagger\Client\Model\NewBankForm $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiataccountnewWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiataccountnew');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/account/new";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatdepositcancel
     *
     * Cancel Unverified Exchange Fiat Deposit.
     *
     * @param \Swagger\Client\Model\DepositID $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatdepositcancel($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatdepositcancelWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatdepositcancelWithHttpInfo
     *
     * Cancel Unverified Exchange Fiat Deposit.
     *
     * @param \Swagger\Client\Model\DepositID $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatdepositcancelWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatdepositcancel');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/deposit/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatdepositnew
     *
     * New Exchange Fiat Deposit.
     *
     * @param \Swagger\Client\Model\NewFiatBankDeposit $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatdepositnew($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatdepositnewWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatdepositnewWithHttpInfo
     *
     * New Exchange Fiat Deposit.
     *
     * @param \Swagger\Client\Model\NewFiatBankDeposit $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatdepositnewWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatdepositnew');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/deposit/new";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatwithdrawinitiate
     *
     * Initiate Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawFiat $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawinitiate($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatwithdrawinitiateWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatwithdrawinitiateWithHttpInfo
     *
     * Initiate Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawFiat $body Please send the form with valid inputs. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawinitiateWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatwithdrawinitiate');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/withdraw/initiate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatwithdrawnewVerifycode
     *
     * Gets a Fiat Verification Code..
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawnewVerifycode($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo
     *
     * Gets a Fiat Verification Code..
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawnewVerifycodeWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatwithdrawnewVerifycode');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/withdraw/newVerifycode";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatwithdrawunverifiedcancel
     *
     * Cancel Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get the code from /v1/user/exchange/bank/fiat/withdraw/unverified. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawunverifiedcancel($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatwithdrawunverifiedcancelWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatwithdrawunverifiedcancelWithHttpInfo
     *
     * Cancel Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\WithdrawID $body You can get the code from /v1/user/exchange/bank/fiat/withdraw/unverified. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawunverifiedcancelWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatwithdrawunverifiedcancel');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/withdraw/unverified/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangebankfiatwithdrawverify
     *
     * Verify Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\Code $body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawverify($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankfiatwithdrawverifyWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangebankfiatwithdrawverifyWithHttpInfo
     *
     * Verify Fiat Withdrawal.
     *
     * @param \Swagger\Client\Model\Code $body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangebankfiatwithdrawverifyWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userexchangebankfiatwithdrawverify');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/fiat/withdraw/verify";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
