<?php
/**
 * SecurityActionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SecurityActionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SecurityActionsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SecurityActionsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1mfaauthyinitiate
     *
     * Initiate Authy Registration.
     *
     * @param \Swagger\Client\Model\MethodCountryMobile $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1mfaauthyinitiate($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1mfaauthyinitiateWithHttpInfo($body, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1mfaauthyinitiateWithHttpInfo
     *
     * Initiate Authy Registration.
     *
     * @param \Swagger\Client\Model\MethodCountryMobile $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1mfaauthyinitiateWithHttpInfo($body, $authorization = null, $accept = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1mfaauthyinitiate');
        }
        // parse inputs
        $resourcePath = "/v1/mfa/authy/initiate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/mfa/authy/initiate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1mfagainitiate
     *
     * Initiate GA Registration.
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1mfagainitiate($authorization = null, $accept = null)
    {
        list($response) = $this->v1mfagainitiateWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1mfagainitiateWithHttpInfo
     *
     * Initiate GA Registration.
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1mfagainitiateWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/mfa/ga/initiate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/mfa/ga/initiate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfaauthycall
     *
     * Authy Call Code
     *
     * @param string $authorization Login Token or any Apikey to be added as Authorization in header (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthycall($authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfaauthycallWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfaauthycallWithHttpInfo
     *
     * Authy Call Code
     *
     * @param string $authorization Login Token or any Apikey to be added as Authorization in header (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthycallWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/mfa/authy/call";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/mfa/authy/call'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfaauthydisableCode
     *
     * Disable Authy
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthydisableCode($code, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfaauthydisableCodeWithHttpInfo($code, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfaauthydisableCodeWithHttpInfo
     *
     * Disable Authy
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthydisableCodeWithHttpInfo($code, $authorization = null, $accept = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling v1usermfaauthydisableCode');
        }
        // parse inputs
        $resourcePath = "/v1/user/mfa/authy/disable/{code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/mfa/authy/disable/{code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfaauthyinitiateenable
     *
     * Verify Authy Registration
     *
     * @param \Swagger\Client\Model\CodeCountryMobile $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthyinitiateenable($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfaauthyinitiateenableWithHttpInfo($body, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfaauthyinitiateenableWithHttpInfo
     *
     * Verify Authy Registration
     *
     * @param \Swagger\Client\Model\CodeCountryMobile $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthyinitiateenableWithHttpInfo($body, $authorization = null, $accept = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1usermfaauthyinitiateenable');
        }
        // parse inputs
        $resourcePath = "/v1/user/mfa/authy/initiate/enable";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/mfa/authy/initiate/enable'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfaauthysms
     *
     * Authy Sms Code
     *
     * @param string $authorization Login Token or any Apikey to be added as Authorization in header (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthysms($authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfaauthysmsWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfaauthysmsWithHttpInfo
     *
     * Authy Sms Code
     *
     * @param string $authorization Login Token or any Apikey to be added as Authorization in header (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfaauthysmsWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/mfa/authy/sms";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/mfa/authy/sms'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfagadisableCode
     *
     * Disable Google Authenticator
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfagadisableCode($code, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfagadisableCodeWithHttpInfo($code, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfagadisableCodeWithHttpInfo
     *
     * Disable Google Authenticator
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfagadisableCodeWithHttpInfo($code, $authorization = null, $accept = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling v1usermfagadisableCode');
        }
        // parse inputs
        $resourcePath = "/v1/user/mfa/ga/disable/{code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/mfa/ga/disable/{code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usermfagainitiateenable
     *
     * Enable Google Authenticator
     *
     * @param \Swagger\Client\Model\Code $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfagainitiateenable($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usermfagainitiateenableWithHttpInfo($body, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usermfagainitiateenableWithHttpInfo
     *
     * Enable Google Authenticator
     *
     * @param \Swagger\Client\Model\Code $body Please Send Valid Json as below. (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usermfagainitiateenableWithHttpInfo($body, $authorization = null, $accept = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1usermfagainitiateenable');
        }
        // parse inputs
        $resourcePath = "/v1/user/mfa/ga/initiate/enable";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/mfa/ga/initiate/enable'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userpasswordchange
     *
     * Change Password.
     *
     * @param \Swagger\Client\Model\ChangePassword $body  (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userpasswordchange($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userpasswordchangeWithHttpInfo($body, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userpasswordchangeWithHttpInfo
     *
     * Change Password.
     *
     * @param \Swagger\Client\Model\ChangePassword $body  (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userpasswordchangeWithHttpInfo($body, $authorization = null, $accept = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userpasswordchange');
        }
        // parse inputs
        $resourcePath = "/v1/user/password/change";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/password/change'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userpasswordreset
     *
     * Reset Password.
     *
     * @param \Swagger\Client\Model\ResetPassword $body Please Send Valid Json as below. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userpasswordreset($body, $accept = null)
    {
        list($response) = $this->v1userpasswordresetWithHttpInfo($body, $accept);
        return $response;
    }

    /**
     * Operation v1userpasswordresetWithHttpInfo
     *
     * Reset Password.
     *
     * @param \Swagger\Client\Model\ResetPassword $body Please Send Valid Json as below. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userpasswordresetWithHttpInfo($body, $accept = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userpasswordreset');
        }
        // parse inputs
        $resourcePath = "/v1/user/password/reset";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/password/reset'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
