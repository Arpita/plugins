<?php
/**
 * AccountDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountDataApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccountDataApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1exchangebanksummary
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\BankSummaryDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangebanksummary($authorization, $accept = null)
    {
        list($response) = $this->v1exchangebanksummaryWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1exchangebanksummaryWithHttpInfo
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\BankSummaryDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangebanksummaryWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1exchangebanksummary');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BankSummaryDataResponse',
                '/v1/user/exchange/bank/summary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BankSummaryDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BankSummaryDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1exchangeusercoinfee
     *
     * Users Coin Fee Percentage
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\DoubleDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangeusercoinfee($authorization = null, $accept = null)
    {
        list($response) = $this->v1exchangeusercoinfeeWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1exchangeusercoinfeeWithHttpInfo
     *
     * Users Coin Fee Percentage
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\DoubleDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangeusercoinfeeWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/user/exchange/coin/fee";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DoubleDataResponse',
                '/v1/user/exchange/coin/fee'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DoubleDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DoubleDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1exchangeuserfiatfee
     *
     * Users Fiat Fee Percentage
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\DoubleDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangeuserfiatfee($authorization, $accept = null)
    {
        list($response) = $this->v1exchangeuserfiatfeeWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1exchangeuserfiatfeeWithHttpInfo
     *
     * Users Fiat Fee Percentage
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\DoubleDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1exchangeuserfiatfeeWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1exchangeuserfiatfee');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/fiat/fee";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DoubleDataResponse',
                '/v1/user/exchange/fiat/fee'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DoubleDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DoubleDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1netkisearchNetkiName
     *
     * Coinsecure.me Netki Lookup
     *
     * @param string $netki_name  (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\DoubleDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1netkisearchNetkiName($netki_name, $accept = null)
    {
        list($response) = $this->v1netkisearchNetkiNameWithHttpInfo($netki_name, $accept);
        return $response;
    }

    /**
     * Operation v1netkisearchNetkiNameWithHttpInfo
     *
     * Coinsecure.me Netki Lookup
     *
     * @param string $netki_name  (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\DoubleDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1netkisearchNetkiNameWithHttpInfo($netki_name, $accept = null)
    {
        // verify the required parameter 'netki_name' is set
        if ($netki_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $netki_name when calling v1netkisearchNetkiName');
        }
        // parse inputs
        $resourcePath = "/v1/netki/search/{netkiName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($netki_name !== null) {
            $resourcePath = str_replace(
                "{" . "netkiName" . "}",
                $this->apiClient->getSerializer()->toPathValue($netki_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DoubleDataResponse',
                '/v1/netki/search/{netkiName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DoubleDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DoubleDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangekycs
     *
     * Gets KYC Status Details
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\KYCDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangekycs($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangekycsWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangekycsWithHttpInfo
     *
     * Gets KYC Status Details
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\KYCDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangekycsWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangekycs');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/kycs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\KYCDataResponse',
                '/v1/user/exchange/kycs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\KYCDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\KYCDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangereferralcoinpaid
     *
     * Users Paid Fiat Referrals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccCoinRefDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralcoinpaid($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangereferralcoinpaidWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangereferralcoinpaidWithHttpInfo
     *
     * Users Paid Fiat Referrals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccCoinRefDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralcoinpaidWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangereferralcoinpaid');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/referral/coin/paid";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccCoinRefDataResponse',
                '/v1/user/exchange/referral/coin/paid'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccCoinRefDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccCoinRefDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangereferralcoinsuccessful
     *
     * Gets Users Successful Referral Links
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccRefDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralcoinsuccessful($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangereferralcoinsuccessfulWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangereferralcoinsuccessfulWithHttpInfo
     *
     * Gets Users Successful Referral Links
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccRefDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralcoinsuccessfulWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangereferralcoinsuccessful');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/referral/coin/successful";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccRefDataResponse',
                '/v1/user/exchange/referral/coin/successful'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccRefDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccRefDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangereferralfiatpaid
     *
     * Users Paid Fiat Referrals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccCoinRefDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralfiatpaid($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangereferralfiatpaidWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangereferralfiatpaidWithHttpInfo
     *
     * Users Paid Fiat Referrals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccCoinRefDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralfiatpaidWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangereferralfiatpaid');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/referral/fiat/paid";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccCoinRefDataResponse',
                '/v1/user/exchange/referral/fiat/paid'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccCoinRefDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccCoinRefDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangereferrals
     *
     * Gets Users Referral Links
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\AllRefDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferrals($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangereferralsWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangereferralsWithHttpInfo
     *
     * Gets Users Referral Links
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\AllRefDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangereferralsWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangereferrals');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/referrals";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AllRefDataResponse',
                '/v1/user/exchange/referrals'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AllRefDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AllRefDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangetradesummary
     *
     * Exchange Trade Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\TradeSummaryDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangetradesummary($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangetradesummaryWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangetradesummaryWithHttpInfo
     *
     * Exchange Trade Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\TradeSummaryDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangetradesummaryWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangetradesummary');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/trade/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeSummaryDataResponse',
                '/v1/user/exchange/trade/summary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeSummaryDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeSummaryDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userlogintokenToken
     *
     * Login Token Email
     *
     * @param string $token  (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userlogintokenToken($token, $accept = null)
    {
        list($response) = $this->v1userlogintokenTokenWithHttpInfo($token, $accept);
        return $response;
    }

    /**
     * Operation v1userlogintokenTokenWithHttpInfo
     *
     * Login Token Email
     *
     * @param string $token  (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userlogintokenTokenWithHttpInfo($token, $accept = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling v1userlogintokenToken');
        }
        // parse inputs
        $resourcePath = "/v1/user/login/token/{token}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                $this->apiClient->getSerializer()->toPathValue($token),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult',
                '/v1/user/login/token/{token}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1usersummary
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\UserSummaryDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usersummary($authorization, $accept = null)
    {
        list($response) = $this->v1usersummaryWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1usersummaryWithHttpInfo
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\UserSummaryDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usersummaryWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1usersummary');
        }
        // parse inputs
        $resourcePath = "/v1/user/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserSummaryDataResponse',
                '/v1/user/summary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserSummaryDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserSummaryDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletsummary
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletSummaryDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletsummary($authorization, $accept = null)
    {
        list($response) = $this->v1userwalletsummaryWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletsummaryWithHttpInfo
     *
     * Exchange Bank Summary
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletSummaryDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletsummaryWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userwalletsummary');
        }
        // parse inputs
        $resourcePath = "/v1/user/wallet/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletSummaryDataResponse',
                '/v1/user/wallet/summary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletSummaryDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletSummaryDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
