<?php
/**
 * AccountActionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountActionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountActionsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccountActionsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1login
     *
     * Creates a Login Instance and returns an API Key..
     *
     * @param \Swagger\Client\Model\LoginFormNew $body Please send the form with valid inputs. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\StandardLoginResultData
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1login($body, $accept = null)
    {
        list($response) = $this->v1loginWithHttpInfo($body, $accept);
        return $response;
    }


    /**
     * Operation v1loginWithHttpInfo
     *
     * Creates a Login Instance and returns an API Key..
     *
     * @param \Swagger\Client\Model\LoginFormNew $body Please send the form with valid inputs. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\StandardLoginResultData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1loginWithHttpInfo($body, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1login');
        }

        // parse inputs
        $resourcePath = "/v1/login";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StandardLoginResultData'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StandardLoginResultData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StandardLoginResultData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1logininitiate
     *
     * Initiate Login.
     *
     * @param \Swagger\Client\Model\LoginId $body Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\StandardInitiateLoginResultData
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1logininitiate($body, $accept = null)
    {
        list($response) = $this->v1logininitiateWithHttpInfo($body, $accept);
        return $response;
    }


    /**
     * Operation v1logininitiateWithHttpInfo
     *
     * Initiate Login.
     *
     * @param \Swagger\Client\Model\LoginId $body Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\StandardInitiateLoginResultData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1logininitiateWithHttpInfo($body, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1logininitiate');
        }

        // parse inputs
        $resourcePath = "/v1/login/initiate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StandardInitiateLoginResultData'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StandardInitiateLoginResultData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StandardInitiateLoginResultData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1loginpasswordforgot
     *
     * Sends an email with a password reset token.
     *
     * @param \Swagger\Client\Model\Email $body Enter a valid and registered Email ID. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1loginpasswordforgot($body, $accept = null)
    {
        list($response) = $this->v1loginpasswordforgotWithHttpInfo($body, $accept);
        return $response;
    }


    /**
     * Operation v1loginpasswordforgotWithHttpInfo
     *
     * Sends an email with a password reset token.
     *
     * @param \Swagger\Client\Model\Email $body Enter a valid and registered Email ID. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1loginpasswordforgotWithHttpInfo($body, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1loginpasswordforgot');
        }

        // parse inputs
        $resourcePath = "/v1/login/password/forgot";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1signup
     *
     * Creates a new Unverified Account..
     *
     * @param \Swagger\Client\Model\SignupForm $body Please send the form with valid inputs. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1signup($body, $accept = null)
    {
        list($response) = $this->v1signupWithHttpInfo($body, $accept);
        return $response;
    }


    /**
     * Operation v1signupWithHttpInfo
     *
     * Creates a new Unverified Account..
     *
     * @param \Swagger\Client\Model\SignupForm $body Please send the form with valid inputs. (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1signupWithHttpInfo($body, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1signup');
        }

        // parse inputs
        $resourcePath = "/v1/signup";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userbankotpNumber
     *
     * Send OTP for Bank Link.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\StandardInitiateLoginResultData
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userbankotpNumber($number, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userbankotpNumberWithHttpInfo($number, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userbankotpNumberWithHttpInfo
     *
     * Send OTP for Bank Link.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\StandardInitiateLoginResultData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userbankotpNumberWithHttpInfo($number, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling v1userbankotpNumber');
        }

        // parse inputs
        $resourcePath = "/v1/user/bank/otp/{number}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                "{" . "number" . "}",
                $this->apiClient->getSerializer()->toPathValue($number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StandardInitiateLoginResultData'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StandardInitiateLoginResultData', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StandardInitiateLoginResultData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userexchangekyc
     *
     * Submits a New Bank Link and initial KYC Documents..
     *
     * @param string $pan_number Please enter your Pan Card Number (required)
     * @param string $acct_nick Please enter an Account NickName (required)
     * @param string $name Please enter your Name as it appears on your Bank account. (required)
     * @param string $ban Please enter your Bank account number. (required)
     * @param string $ifsc Please enter your IFSC Code. (required)
     * @param string $acct_type Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
     * @param string $ban_type Please enter your Bank account type. Allowable Values are Savings or Current. (required)
     * @param string $phone Please enter your Valid Phone Number. (required)
     * @param string $otp Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number. (required)
     * @param \SplFileObject $file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $message Please enter an optional message if needed. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangekyc($pan_number, $acct_nick, $name, $ban, $ifsc, $acct_type, $ban_type, $phone, $otp, $file, $authorization = null, $message = null, $accept = null)
    {
        list($response) = $this->v1userexchangekycWithHttpInfo($pan_number, $acct_nick, $name, $ban, $ifsc, $acct_type, $ban_type, $phone, $otp, $file, $authorization, $message, $accept);
        return $response;
    }


    /**
     * Operation v1userexchangekycWithHttpInfo
     *
     * Submits a New Bank Link and initial KYC Documents..
     *
     * @param string $pan_number Please enter your Pan Card Number (required)
     * @param string $acct_nick Please enter an Account NickName (required)
     * @param string $name Please enter your Name as it appears on your Bank account. (required)
     * @param string $ban Please enter your Bank account number. (required)
     * @param string $ifsc Please enter your IFSC Code. (required)
     * @param string $acct_type Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
     * @param string $ban_type Please enter your Bank account type. Allowable Values are Savings or Current. (required)
     * @param string $phone Please enter your Valid Phone Number. (required)
     * @param string $otp Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number. (required)
     * @param \SplFileObject $file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $message Please enter an optional message if needed. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userexchangekycWithHttpInfo($pan_number, $acct_nick, $name, $ban, $ifsc, $acct_type, $ban_type, $phone, $otp, $file, $authorization = null, $message = null, $accept = null)
    {
        
        // verify the required parameter 'pan_number' is set
        if ($pan_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pan_number when calling v1userexchangekyc');
        }

        // verify the required parameter 'acct_nick' is set
        if ($acct_nick === null) {
            throw new \InvalidArgumentException('Missing the required parameter $acct_nick when calling v1userexchangekyc');
        }

        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling v1userexchangekyc');
        }

        // verify the required parameter 'ban' is set
        if ($ban === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ban when calling v1userexchangekyc');
        }

        // verify the required parameter 'ifsc' is set
        if ($ifsc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ifsc when calling v1userexchangekyc');
        }

        // verify the required parameter 'acct_type' is set
        if ($acct_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $acct_type when calling v1userexchangekyc');
        }

        // verify the required parameter 'ban_type' is set
        if ($ban_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ban_type when calling v1userexchangekyc');
        }

        // verify the required parameter 'phone' is set
        if ($phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone when calling v1userexchangekyc');
        }

        // verify the required parameter 'otp' is set
        if ($otp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $otp when calling v1userexchangekyc');
        }

        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling v1userexchangekyc');
        }

        // parse inputs
        $resourcePath = "/v1/user/exchange/kyc";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('multipart/form-data'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($pan_number !== null) {
            $formParams['panNumber'] = $this->apiClient->getSerializer()->toFormValue($pan_number);
        }// form params
        if ($acct_nick !== null) {
            $formParams['acctNick'] = $this->apiClient->getSerializer()->toFormValue($acct_nick);
        }// form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }// form params
        if ($ban !== null) {
            $formParams['ban'] = $this->apiClient->getSerializer()->toFormValue($ban);
        }// form params
        if ($ifsc !== null) {
            $formParams['ifsc'] = $this->apiClient->getSerializer()->toFormValue($ifsc);
        }// form params
        if ($acct_type !== null) {
            $formParams['acctType'] = $this->apiClient->getSerializer()->toFormValue($acct_type);
        }// form params
        if ($message !== null) {
            $formParams['message'] = $this->apiClient->getSerializer()->toFormValue($message);
        }// form params
        if ($ban_type !== null) {
            $formParams['banType'] = $this->apiClient->getSerializer()->toFormValue($ban_type);
        }// form params
        if ($phone !== null) {
            $formParams['phone'] = $this->apiClient->getSerializer()->toFormValue($phone);
        }// form params
        if ($otp !== null) {
            $formParams['otp'] = $this->apiClient->getSerializer()->toFormValue($otp);
        }// form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1usergcmCode
     *
     * Delete GCM Code.
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usergcmCode($code, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usergcmCodeWithHttpInfo($code, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1usergcmCodeWithHttpInfo
     *
     * Delete GCM Code.
     *
     * @param string $code  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usergcmCodeWithHttpInfo($code, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling v1usergcmCode');
        }

        // parse inputs
        $resourcePath = "/v1/user/gcm/{code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userkycotpNumber
     *
     * Send OTP for KYC Link.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userkycotpNumber($number, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userkycotpNumberWithHttpInfo($number, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userkycotpNumberWithHttpInfo
     *
     * Send OTP for KYC Link.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userkycotpNumberWithHttpInfo($number, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling v1userkycotpNumber');
        }

        // parse inputs
        $resourcePath = "/v1/user/kyc/otp/{number}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                "{" . "number" . "}",
                $this->apiClient->getSerializer()->toPathValue($number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userlogout
     *
     * Logout User.
     *
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userlogout($authorization = null, $accept = null)
    {
        list($response) = $this->v1userlogoutWithHttpInfo($authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userlogoutWithHttpInfo
     *
     * Logout User.
     *
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userlogoutWithHttpInfo($authorization = null, $accept = null)
    {
        
        // parse inputs
        $resourcePath = "/v1/user/logout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1usernetkicreate
     *
     * Create Neki Wallet Name.
     *
     * @param \Swagger\Client\Model\NetkiNameAddress $body Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usernetkicreate($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usernetkicreateWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1usernetkicreateWithHttpInfo
     *
     * Create Neki Wallet Name.
     *
     * @param \Swagger\Client\Model\NetkiNameAddress $body Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usernetkicreateWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1usernetkicreate');
        }

        // parse inputs
        $resourcePath = "/v1/user/netki/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1usernetkiupdate
     *
     * Update Netki Address.
     *
     * @param \Swagger\Client\Model\Address $body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usernetkiupdate($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1usernetkiupdateWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1usernetkiupdateWithHttpInfo
     *
     * Update Netki Address.
     *
     * @param \Swagger\Client\Model\Address $body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1usernetkiupdateWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1usernetkiupdate');
        }

        // parse inputs
        $resourcePath = "/v1/user/netki/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userprofileimagedelete
     *
     * Delete Profile Image.
     *
     * @param \Swagger\Client\Model\NetkiName $body Please enter a valid Netki name associated with your prfile Image. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofileimagedelete($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userprofileimagedeleteWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userprofileimagedeleteWithHttpInfo
     *
     * Delete Profile Image.
     *
     * @param \Swagger\Client\Model\NetkiName $body Please enter a valid Netki name associated with your prfile Image. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofileimagedeleteWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userprofileimagedelete');
        }

        // parse inputs
        $resourcePath = "/v1/user/contact";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userprofileimageupdate
     *
     * Update Profile Image.
     *
     * @param string $netki_name Please enter your Netki Wallet Name. (required)
     * @param bool $is_public Please enter if this image can be public. (required)
     * @param \SplFileObject $file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofileimageupdate($netki_name, $is_public, $file, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userprofileimageupdateWithHttpInfo($netki_name, $is_public, $file, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userprofileimageupdateWithHttpInfo
     *
     * Update Profile Image.
     *
     * @param string $netki_name Please enter your Netki Wallet Name. (required)
     * @param bool $is_public Please enter if this image can be public. (required)
     * @param \SplFileObject $file Enter a valid image, pdf or zip file under 5 MB in size. (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofileimageupdateWithHttpInfo($netki_name, $is_public, $file, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'netki_name' is set
        if ($netki_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $netki_name when calling v1userprofileimageupdate');
        }

        // verify the required parameter 'is_public' is set
        if ($is_public === null) {
            throw new \InvalidArgumentException('Missing the required parameter $is_public when calling v1userprofileimageupdate');
        }

        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling v1userprofileimageupdate');
        }

        // parse inputs
        $resourcePath = "/v1/user/profile/image/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('multipart/form-data'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($netki_name !== null) {
            $formParams['netkiName'] = $this->apiClient->getSerializer()->toFormValue($netki_name);
        }// form params
        if ($is_public !== null) {
            $formParams['isPublic'] = $this->apiClient->getSerializer()->toFormValue($is_public);
        }// form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userprofilephone
     *
     * New Profile Phone.
     *
     * @param \Swagger\Client\Model\NumberOtp $body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephone($body, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userprofilephoneWithHttpInfo($body, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userprofilephoneWithHttpInfo
     *
     * New Profile Phone.
     *
     * @param \Swagger\Client\Model\NumberOtp $body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
     * @param string $authorization Enter a valid Api Key. (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephoneWithHttpInfo($body, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1userprofilephone');
        }

        // parse inputs
        $resourcePath = "/v1/user/profile/phone/new";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userprofilephoneNumber
     *
     * Delete Profile Phone Number.
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephoneNumber($authorization = null, $accept = null)
    {
        list($response) = $this->v1userprofilephoneNumberWithHttpInfo($authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userprofilephoneNumberWithHttpInfo
     *
     * Delete Profile Phone Number.
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephoneNumberWithHttpInfo($authorization = null, $accept = null)
    {
        
        // parse inputs
        $resourcePath = "/v1/user/profile/phone/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation v1userprofilephoneotpNumber
     *
     * Send OTP for Profile Phone.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return \Swagger\Client\Model\SuccessResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephoneotpNumber($number, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userprofilephoneotpNumberWithHttpInfo($number, $authorization, $accept);
        return $response;
    }


    /**
     * Operation v1userprofilephoneotpNumberWithHttpInfo
     *
     * Send OTP for Profile Phone.
     *
     * @param string $number  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     *
     * @return Array of \Swagger\Client\Model\SuccessResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userprofilephoneotpNumberWithHttpInfo($number, $authorization = null, $accept = null)
    {
        
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling v1userprofilephoneotpNumber');
        }

        // parse inputs
        $resourcePath = "/v1/user/profile/phone/otp/{number}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }// header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                "{" . "number" . "}",
                $this->apiClient->getSerializer()->toPathValue($number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SuccessResult'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SuccessResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SuccessResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
