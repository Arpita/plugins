<?php
/**
 * ExchangeBankCoinDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ExchangeBankCoinDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExchangeBankCoinDataApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ExchangeBankCoinDataApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1userexchangebankcoinaddresses
     *
     * Exchange Coin Addresses
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TradeAddressDataResponse
     */
    public function v1userexchangebankcoinaddresses($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinaddressesWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinaddressesWithHttpInfo
     *
     * Exchange Coin Addresses
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TradeAddressDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinaddressesWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinaddresses');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/addresses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeAddressDataResponse',
                '/v1/user/exchange/bank/coin/addresses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeAddressDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeAddressDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinbalanceavailable
     *
     * Available Exchange Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\VolDataResponse
     */
    public function v1userexchangebankcoinbalanceavailable($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinbalanceavailableWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinbalanceavailableWithHttpInfo
     *
     * Available Exchange Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\VolDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinbalanceavailableWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinbalanceavailable');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/balance/total";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VolDataResponse',
                '/v1/user/exchange/bank/coin/balance/total'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VolDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VolDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinbalancepending
     *
     * In Trade Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\VolDataResponse
     */
    public function v1userexchangebankcoinbalancepending($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinbalancependingWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinbalancependingWithHttpInfo
     *
     * In Trade Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\VolDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinbalancependingWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinbalancepending');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/balance/pending";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VolDataResponse',
                '/v1/user/exchange/bank/coin/balance/pending'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VolDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VolDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinbalancetotal
     *
     * Total Exchange Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\VolDataResponse
     */
    public function v1userexchangebankcoinbalancetotal($authorization, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinbalancetotalWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinbalancetotalWithHttpInfo
     *
     * Total Exchange Coin Balance
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\VolDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinbalancetotalWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinbalancetotal');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/balance/available";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\VolDataResponse',
                '/v1/user/exchange/bank/coin/balance/available'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\VolDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\VolDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoindepositcancelled
     *
     * Cancelled Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CoinDepDataResponse
     */
    public function v1userexchangebankcoindepositcancelled($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoindepositcancelledWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoindepositcancelledWithHttpInfo
     *
     * Cancelled Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CoinDepDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoindepositcancelledWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoindepositcancelled');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/deposit/cancelled";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CoinDepDataResponse',
                '/v1/user/exchange/bank/coin/deposit/cancelled'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CoinDepDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CoinDepDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoindepositunverified
     *
     * Unverified Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CoinDepDataResponse
     */
    public function v1userexchangebankcoindepositunverified($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoindepositunverifiedWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoindepositunverifiedWithHttpInfo
     *
     * Unverified Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CoinDepDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoindepositunverifiedWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoindepositunverified');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/deposit/unverified";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CoinDepDataResponse',
                '/v1/user/exchange/bank/coin/deposit/unverified'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CoinDepDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CoinDepDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoindepositverified
     *
     * Verified Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CoinDepDataResponse
     */
    public function v1userexchangebankcoindepositverified($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoindepositverifiedWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoindepositverifiedWithHttpInfo
     *
     * Verified Exchange Coin Deposits
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CoinDepDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoindepositverifiedWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoindepositverified');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/deposit/verified";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CoinDepDataResponse',
                '/v1/user/exchange/bank/coin/deposit/verified'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CoinDepDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CoinDepDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinwithdrawcancelled
     *
     * Cancelled Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TradeCoinWithdrawDataResponse
     */
    public function v1userexchangebankcoinwithdrawcancelled($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawcancelledWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinwithdrawcancelledWithHttpInfo
     *
     * Cancelled Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TradeCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinwithdrawcancelledWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinwithdrawcancelled');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/cancelled";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeCoinWithdrawDataResponse',
                '/v1/user/exchange/bank/coin/withdraw/cancelled'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinwithdrawcompleted
     *
     * Completed Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TradeCoinWithdrawDataResponse
     */
    public function v1userexchangebankcoinwithdrawcompleted($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawcompletedWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinwithdrawcompletedWithHttpInfo
     *
     * Completed Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TradeCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinwithdrawcompletedWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinwithdrawcompleted');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/completed";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeCoinWithdrawDataResponse',
                '/v1/user/exchange/bank/coin/withdraw/completed'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinwithdrawunverified
     *
     * Unverified Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TradeCoinWithdrawDataResponse
     */
    public function v1userexchangebankcoinwithdrawunverified($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawunverifiedWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinwithdrawunverifiedWithHttpInfo
     *
     * Unverified Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TradeCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinwithdrawunverifiedWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinwithdrawunverified');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/unverified";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeCoinWithdrawDataResponse',
                '/v1/user/exchange/bank/coin/withdraw/unverified'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userexchangebankcoinwithdrawverified
     *
     * Verified Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TradeCoinWithdrawDataResponse
     */
    public function v1userexchangebankcoinwithdrawverified($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        list($response) = $this->v1userexchangebankcoinwithdrawverifiedWithHttpInfo($authorization, $from, $to, $max, $offset, $accept);
        return $response;
    }

    /**
     * Operation v1userexchangebankcoinwithdrawverifiedWithHttpInfo
     *
     * Verified Exchange Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param int $from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     * @param int $to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     * @param int $max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     * @param int $offset Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TradeCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1userexchangebankcoinwithdrawverifiedWithHttpInfo($authorization, $from = null, $to = null, $max = null, $offset = null, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userexchangebankcoinwithdrawverified');
        }
        // parse inputs
        $resourcePath = "/v1/user/exchange/bank/coin/withdraw/verified";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'application/csv']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // query params
        if ($max !== null) {
            $queryParams['max'] = $this->apiClient->getSerializer()->toQueryValue($max);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TradeCoinWithdrawDataResponse',
                '/v1/user/exchange/bank/coin/withdraw/verified'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TradeCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
