<?php
/**
 * WalletDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * WalletDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WalletDataApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.coinsecure.in');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return WalletDataApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation v1userwalletcoinaddressWalletID
     *
     * Wallet Bitcoin Addresses
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletAddressDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoinaddressWalletID($wallet_id, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userwalletcoinaddressWalletIDWithHttpInfo($wallet_id, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoinaddressWalletIDWithHttpInfo
     *
     * Wallet Bitcoin Addresses
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletAddressDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoinaddressWalletIDWithHttpInfo($wallet_id, $authorization = null, $accept = null)
    {
        // verify the required parameter 'wallet_id' is set
        if ($wallet_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wallet_id when calling v1userwalletcoinaddressWalletID');
        }
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/address/{walletID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($wallet_id !== null) {
            $resourcePath = str_replace(
                "{" . "walletID" . "}",
                $this->apiClient->getSerializer()->toPathValue($wallet_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletAddressDataResponse',
                '/v1/user/wallet/coin/address/{walletID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletAddressDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletAddressDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletcoindepositconfirmedWalletID
     *
     * Confirmed Wallet Transactions
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletAddressDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositconfirmedWalletID($wallet_id, $authorization = null, $accept = null)
    {
        list($response) = $this->v1userwalletcoindepositconfirmedWalletIDWithHttpInfo($wallet_id, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoindepositconfirmedWalletIDWithHttpInfo
     *
     * Confirmed Wallet Transactions
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletAddressDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositconfirmedWalletIDWithHttpInfo($wallet_id, $authorization = null, $accept = null)
    {
        // verify the required parameter 'wallet_id' is set
        if ($wallet_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wallet_id when calling v1userwalletcoindepositconfirmedWalletID');
        }
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/deposit/confirmed/{walletID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($wallet_id !== null) {
            $resourcePath = str_replace(
                "{" . "walletID" . "}",
                $this->apiClient->getSerializer()->toPathValue($wallet_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletAddressDataResponse',
                '/v1/user/wallet/coin/deposit/confirmed/{walletID}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletAddressDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletAddressDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletcoindepositconfirmedall
     *
     * Confirmed Wallet Deposit
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletAddressDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositconfirmedall($authorization = null, $accept = null)
    {
        list($response) = $this->v1userwalletcoindepositconfirmedallWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoindepositconfirmedallWithHttpInfo
     *
     * Confirmed Wallet Deposit
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletAddressDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositconfirmedallWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/deposit/confirmed/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletAddressDataResponse',
                '/v1/user/wallet/coin/deposit/confirmed/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletAddressDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletAddressDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletcoindepositunconfirmedWalletID
     *
     * Unconfirmed Transactions in Wallet
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositunconfirmedWalletID($wallet_id, $authorization, $accept = null)
    {
        list($response) = $this->v1userwalletcoindepositunconfirmedWalletIDWithHttpInfo($wallet_id, $authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoindepositunconfirmedWalletIDWithHttpInfo
     *
     * Unconfirmed Transactions in Wallet
     *
     * @param string $wallet_id  (required)
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositunconfirmedWalletIDWithHttpInfo($wallet_id, $authorization, $accept = null)
    {
        // verify the required parameter 'wallet_id' is set
        if ($wallet_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wallet_id when calling v1userwalletcoindepositunconfirmedWalletID');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1userwalletcoindepositunconfirmedWalletID');
        }
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/deposit/unconfirmed/{walletID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($wallet_id !== null) {
            $resourcePath = str_replace(
                "{" . "walletID" . "}",
                $this->apiClient->getSerializer()->toPathValue($wallet_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/user/wallet/coin/deposit/unconfirmed/{walletID}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletcoindepositunconfirmedall
     *
     * All Unconfirmed Deposits
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositunconfirmedall($authorization = null, $accept = null)
    {
        list($response) = $this->v1userwalletcoindepositunconfirmedallWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoindepositunconfirmedallWithHttpInfo
     *
     * All Unconfirmed Deposits
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoindepositunconfirmedallWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/deposit/unconfirmed/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/user/wallet/coin/deposit/unconfirmed/all'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation v1userwalletcoinwallets
     *
     * Wallet Details
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletsDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoinwallets($authorization = null, $accept = null)
    {
        list($response) = $this->v1userwalletcoinwalletsWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1userwalletcoinwalletsWithHttpInfo
     *
     * Wallet Details
     *
     * @param string $authorization API object to be added (optional)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletsDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1userwalletcoinwalletsWithHttpInfo($authorization = null, $accept = null)
    {
        // parse inputs
        $resourcePath = "/v1/user/wallet/coin/wallets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletsDataResponse',
                '/v1/user/wallet/coin/wallets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletsDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletsDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1walletwithdrawcancelled
     *
     * Cancelled Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletCoinWithdrawDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawcancelled($authorization, $accept = null)
    {
        list($response) = $this->v1walletwithdrawcancelledWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1walletwithdrawcancelledWithHttpInfo
     *
     * Cancelled Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawcancelledWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1walletwithdrawcancelled');
        }
        // parse inputs
        $resourcePath = "/v1/wallet/coin/withdraw/cancelled";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletCoinWithdrawDataResponse',
                '/v1/wallet/coin/withdraw/cancelled'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1walletwithdrawcompleted
     *
     * Completed Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletCoinWithdrawDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawcompleted($authorization, $accept = null)
    {
        list($response) = $this->v1walletwithdrawcompletedWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1walletwithdrawcompletedWithHttpInfo
     *
     * Completed Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawcompletedWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1walletwithdrawcompleted');
        }
        // parse inputs
        $resourcePath = "/v1/wallet/coin/withdraw/completed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletCoinWithdrawDataResponse',
                '/v1/wallet/coin/withdraw/completed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1walletwithdrawunverified
     *
     * Unverified Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletCoinWithdrawDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawunverified($authorization, $accept = null)
    {
        list($response) = $this->v1walletwithdrawunverifiedWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1walletwithdrawunverifiedWithHttpInfo
     *
     * Unverified Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawunverifiedWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1walletwithdrawunverified');
        }
        // parse inputs
        $resourcePath = "/v1/wallet/coin/withdraw/unverified";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletCoinWithdrawDataResponse',
                '/v1/wallet/coin/withdraw/unverified'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation v1walletwithdrawverified
     *
     * Verified Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return \Swagger\Client\Model\WalletCoinWithdrawDataResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawverified($authorization, $accept = null)
    {
        list($response) = $this->v1walletwithdrawverifiedWithHttpInfo($authorization, $accept);
        return $response;
    }

    /**
     * Operation v1walletwithdrawverifiedWithHttpInfo
     *
     * Verified Coin Withdrawals
     *
     * @param string $authorization API object to be added (required)
     * @param string $accept JSON, XML or CSV can be returned (Optional) (optional)
     * @return Array of \Swagger\Client\Model\WalletCoinWithdrawDataResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1walletwithdrawverifiedWithHttpInfo($authorization, $accept = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling v1walletwithdrawverified');
        }
        // parse inputs
        $resourcePath = "/v1/wallet/coin/withdraw/verified";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'application/csv'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WalletCoinWithdrawDataResponse',
                '/v1/wallet/coin/withdraw/verified'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WalletCoinWithdrawDataResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FailResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
