// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [AllRefData]
            Decoders.addDecoder(clazz: [AllRefData].self) { (source: AnyObject) -> [AllRefData] in
                return Decoders.decode(clazz: [AllRefData].self, source: source)
            }
            // Decoder for AllRefData
            Decoders.addDecoder(clazz: AllRefData.self) { (source: AnyObject) -> AllRefData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AllRefData()
                instance.refPercent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["refPercent"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.refID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refID"])
                return instance
            }


            // Decoder for [AllRefDataResponse]
            Decoders.addDecoder(clazz: [AllRefDataResponse].self) { (source: AnyObject) -> [AllRefDataResponse] in
                return Decoders.decode(clazz: [AllRefDataResponse].self, source: source)
            }
            // Decoder for AllRefDataResponse
            Decoders.addDecoder(clazz: AllRefDataResponse.self) { (source: AnyObject) -> AllRefDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AllRefDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [BankSummaryData]
            Decoders.addDecoder(clazz: [BankSummaryData].self) { (source: AnyObject) -> [BankSummaryData] in
                return Decoders.decode(clazz: [BankSummaryData].self, source: source)
            }
            // Decoder for BankSummaryData
            Decoders.addDecoder(clazz: BankSummaryData.self) { (source: AnyObject) -> BankSummaryData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BankSummaryData()
                instance.pendingCoinBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pendingCoinBalance"])
                instance.pendingFiatBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pendingFiatBalance"])
                instance.availableCoinBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["availableCoinBalance"])
                instance.availableFiatBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["availableFiatBalance"])
                instance.totalCoinBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalCoinBalance"])
                instance.totalFiatBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalFiatBalance"])
                instance.coinFeePercentage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["coinFeePercentage"])
                instance.fiatFeePercentage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fiatFeePercentage"])
                instance.bankLinkStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bankLinkStatus"])
                instance.hasTradeNetki = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasTradeNetki"])
                instance.tradeNetkiName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tradeNetkiName"])
                instance.tradeNetkiAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tradeNetkiAddress"])
                return instance
            }


            // Decoder for [BankSummaryDataResponse]
            Decoders.addDecoder(clazz: [BankSummaryDataResponse].self) { (source: AnyObject) -> [BankSummaryDataResponse] in
                return Decoders.decode(clazz: [BankSummaryDataResponse].self, source: source)
            }
            // Decoder for BankSummaryDataResponse
            Decoders.addDecoder(clazz: BankSummaryDataResponse.self) { (source: AnyObject) -> BankSummaryDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BankSummaryDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: BankSummaryData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ChangePassword]
            Decoders.addDecoder(clazz: [ChangePassword].self) { (source: AnyObject) -> [ChangePassword] in
                return Decoders.decode(clazz: [ChangePassword].self, source: source)
            }
            // Decoder for ChangePassword
            Decoders.addDecoder(clazz: ChangePassword.self) { (source: AnyObject) -> ChangePassword in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChangePassword()
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.repeatPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repeatPassword"])
                return instance
            }


            // Decoder for [Code]
            Decoders.addDecoder(clazz: [Code].self) { (source: AnyObject) -> [Code] in
                return Decoders.decode(clazz: [Code].self, source: source)
            }
            // Decoder for Code
            Decoders.addDecoder(clazz: Code.self) { (source: AnyObject) -> Code in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Code()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                return instance
            }


            // Decoder for [CodeCountryMobile]
            Decoders.addDecoder(clazz: [CodeCountryMobile].self) { (source: AnyObject) -> [CodeCountryMobile] in
                return Decoders.decode(clazz: [CodeCountryMobile].self, source: source)
            }
            // Decoder for CodeCountryMobile
            Decoders.addDecoder(clazz: CodeCountryMobile.self) { (source: AnyObject) -> CodeCountryMobile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CodeCountryMobile()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                return instance
            }


            // Decoder for [CoinDepData]
            Decoders.addDecoder(clazz: [CoinDepData].self) { (source: AnyObject) -> [CoinDepData] in
                return Decoders.decode(clazz: [CoinDepData].self, source: source)
            }
            // Decoder for CoinDepData
            Decoders.addDecoder(clazz: CoinDepData.self) { (source: AnyObject) -> CoinDepData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CoinDepData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeDataCoin.self, source: sourceDictionary["timeDetails"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"])
                instance.txHash = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["txHash"])
                instance.depositID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["depositID"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [CoinDepDataResponse]
            Decoders.addDecoder(clazz: [CoinDepDataResponse].self) { (source: AnyObject) -> [CoinDepDataResponse] in
                return Decoders.decode(clazz: [CoinDepDataResponse].self, source: source)
            }
            // Decoder for CoinDepDataResponse
            Decoders.addDecoder(clazz: CoinDepDataResponse.self) { (source: AnyObject) -> CoinDepDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CoinDepDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ConfirmData]
            Decoders.addDecoder(clazz: [ConfirmData].self) { (source: AnyObject) -> [ConfirmData] in
                return Decoders.decode(clazz: [ConfirmData].self, source: source)
            }
            // Decoder for ConfirmData
            Decoders.addDecoder(clazz: ConfirmData.self) { (source: AnyObject) -> ConfirmData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfirmData()
                instance.confirmations = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["confirmations"])
                return instance
            }


            // Decoder for [ConfirmDataResponse]
            Decoders.addDecoder(clazz: [ConfirmDataResponse].self) { (source: AnyObject) -> [ConfirmDataResponse] in
                return Decoders.decode(clazz: [ConfirmDataResponse].self, source: source)
            }
            // Decoder for ConfirmDataResponse
            Decoders.addDecoder(clazz: ConfirmDataResponse.self) { (source: AnyObject) -> ConfirmDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfirmDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: ConfirmData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [DoubleData]
            Decoders.addDecoder(clazz: [DoubleData].self) { (source: AnyObject) -> [DoubleData] in
                return Decoders.decode(clazz: [DoubleData].self, source: source)
            }
            // Decoder for DoubleData
            Decoders.addDecoder(clazz: DoubleData.self) { (source: AnyObject) -> DoubleData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DoubleData()
                instance.percent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["percent"])
                return instance
            }


            // Decoder for [DoubleDataResponse]
            Decoders.addDecoder(clazz: [DoubleDataResponse].self) { (source: AnyObject) -> [DoubleDataResponse] in
                return Decoders.decode(clazz: [DoubleDataResponse].self, source: source)
            }
            // Decoder for DoubleDataResponse
            Decoders.addDecoder(clazz: DoubleDataResponse.self) { (source: AnyObject) -> DoubleDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DoubleDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: DoubleData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [Email]
            Decoders.addDecoder(clazz: [Email].self) { (source: AnyObject) -> [Email] in
                return Decoders.decode(clazz: [Email].self, source: source)
            }
            // Decoder for Email
            Decoders.addDecoder(clazz: Email.self) { (source: AnyObject) -> Email in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Email()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }


            // Decoder for [FailResult]
            Decoders.addDecoder(clazz: [FailResult].self) { (source: AnyObject) -> [FailResult] in
                return Decoders.decode(clazz: [FailResult].self, source: source)
            }
            // Decoder for FailResult
            Decoders.addDecoder(clazz: FailResult.self) { (source: AnyObject) -> FailResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FailResult()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: JsValue.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [FiatBankData]
            Decoders.addDecoder(clazz: [FiatBankData].self) { (source: AnyObject) -> [FiatBankData] in
                return Decoders.decode(clazz: [FiatBankData].self, source: source)
            }
            // Decoder for FiatBankData
            Decoders.addDecoder(clazz: FiatBankData.self) { (source: AnyObject) -> FiatBankData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatBankData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.updateTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updateTime"])
                instance.updateMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateMessage"])
                instance.bankID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bankID"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.accountNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountNumber"])
                instance.accountNick = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountNick"])
                instance.accountType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountType"])
                instance.accountID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountID"])
                return instance
            }


            // Decoder for [FiatBankDataResponse]
            Decoders.addDecoder(clazz: [FiatBankDataResponse].self) { (source: AnyObject) -> [FiatBankDataResponse] in
                return Decoders.decode(clazz: [FiatBankDataResponse].self, source: source)
            }
            // Decoder for FiatBankDataResponse
            Decoders.addDecoder(clazz: FiatBankDataResponse.self) { (source: AnyObject) -> FiatBankDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatBankDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [FiatDepData]
            Decoders.addDecoder(clazz: [FiatDepData].self) { (source: AnyObject) -> [FiatDepData] in
                return Decoders.decode(clazz: [FiatDepData].self, source: source)
            }
            // Decoder for FiatDepData
            Decoders.addDecoder(clazz: FiatDepData.self) { (source: AnyObject) -> FiatDepData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatDepData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeDataCoin.self, source: sourceDictionary["timeDetails"])
                instance.depositID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["depositID"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"])
                instance.account = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["account"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [FiatDepDataResponse]
            Decoders.addDecoder(clazz: [FiatDepDataResponse].self) { (source: AnyObject) -> [FiatDepDataResponse] in
                return Decoders.decode(clazz: [FiatDepDataResponse].self, source: source)
            }
            // Decoder for FiatDepDataResponse
            Decoders.addDecoder(clazz: FiatDepDataResponse.self) { (source: AnyObject) -> FiatDepDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatDepDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [FiatWithData]
            Decoders.addDecoder(clazz: [FiatWithData].self) { (source: AnyObject) -> [FiatWithData] in
                return Decoders.decode(clazz: [FiatWithData].self, source: source)
            }
            // Decoder for FiatWithData
            Decoders.addDecoder(clazz: FiatWithData.self) { (source: AnyObject) -> FiatWithData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatWithData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeDataCoin.self, source: sourceDictionary["timeDetails"])
                instance.withdrawID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withdrawID"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"])
                instance.account = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["account"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [FiatWithDataResponse]
            Decoders.addDecoder(clazz: [FiatWithDataResponse].self) { (source: AnyObject) -> [FiatWithDataResponse] in
                return Decoders.decode(clazz: [FiatWithDataResponse].self, source: source)
            }
            // Decoder for FiatWithDataResponse
            Decoders.addDecoder(clazz: FiatWithDataResponse.self) { (source: AnyObject) -> FiatWithDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FiatWithDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [JsValue]
            Decoders.addDecoder(clazz: [JsValue].self) { (source: AnyObject) -> [JsValue] in
                return Decoders.decode(clazz: [JsValue].self, source: source)
            }
            // Decoder for JsValue
            Decoders.addDecoder(clazz: JsValue.self) { (source: AnyObject) -> JsValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JsValue()
                return instance
            }


            // Decoder for [KYCData]
            Decoders.addDecoder(clazz: [KYCData].self) { (source: AnyObject) -> [KYCData] in
                return Decoders.decode(clazz: [KYCData].self, source: source)
            }
            // Decoder for KYCData
            Decoders.addDecoder(clazz: KYCData.self) { (source: AnyObject) -> KYCData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = KYCData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeKYCData.self, source: sourceDictionary["timeDetails"])
                instance.kycID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kycID"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.userType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userType"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [KYCDataResponse]
            Decoders.addDecoder(clazz: [KYCDataResponse].self) { (source: AnyObject) -> [KYCDataResponse] in
                return Decoders.decode(clazz: [KYCDataResponse].self, source: source)
            }
            // Decoder for KYCDataResponse
            Decoders.addDecoder(clazz: KYCDataResponse.self) { (source: AnyObject) -> KYCDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = KYCDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [LastTradeData]
            Decoders.addDecoder(clazz: [LastTradeData].self) { (source: AnyObject) -> [LastTradeData] in
                return Decoders.decode(clazz: [LastTradeData].self, source: source)
            }
            // Decoder for LastTradeData
            Decoders.addDecoder(clazz: LastTradeData.self) { (source: AnyObject) -> LastTradeData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LastTradeData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.avgRate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["avgRate"])
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                instance.ordType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ordType"])
                return instance
            }


            // Decoder for [LastTradeDataResponse]
            Decoders.addDecoder(clazz: [LastTradeDataResponse].self) { (source: AnyObject) -> [LastTradeDataResponse] in
                return Decoders.decode(clazz: [LastTradeDataResponse].self, source: source)
            }
            // Decoder for LastTradeDataResponse
            Decoders.addDecoder(clazz: LastTradeDataResponse.self) { (source: AnyObject) -> LastTradeDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LastTradeDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: LastTradeData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [LoginFormNew]
            Decoders.addDecoder(clazz: [LoginFormNew].self) { (source: AnyObject) -> [LoginFormNew] in
                return Decoders.decode(clazz: [LoginFormNew].self, source: source)
            }
            // Decoder for LoginFormNew
            Decoders.addDecoder(clazz: LoginFormNew.self) { (source: AnyObject) -> LoginFormNew in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LoginFormNew()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.gcmCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gcmCode"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                return instance
            }


            // Decoder for [LoginId]
            Decoders.addDecoder(clazz: [LoginId].self) { (source: AnyObject) -> [LoginId] in
                return Decoders.decode(clazz: [LoginId].self, source: source)
            }
            // Decoder for LoginId
            Decoders.addDecoder(clazz: LoginId.self) { (source: AnyObject) -> LoginId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LoginId()
                instance.loginID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loginID"])
                return instance
            }


            // Decoder for [MaxVol]
            Decoders.addDecoder(clazz: [MaxVol].self) { (source: AnyObject) -> [MaxVol] in
                return Decoders.decode(clazz: [MaxVol].self, source: source)
            }
            // Decoder for MaxVol
            Decoders.addDecoder(clazz: MaxVol.self) { (source: AnyObject) -> MaxVol in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaxVol()
                instance.maxVol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxVol"])
                return instance
            }


            // Decoder for [MethodCountryMobile]
            Decoders.addDecoder(clazz: [MethodCountryMobile].self) { (source: AnyObject) -> [MethodCountryMobile] in
                return Decoders.decode(clazz: [MethodCountryMobile].self, source: source)
            }
            // Decoder for MethodCountryMobile
            Decoders.addDecoder(clazz: MethodCountryMobile.self) { (source: AnyObject) -> MethodCountryMobile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MethodCountryMobile()
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.countryCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["countryCode"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["phoneNumber"])
                return instance
            }


            // Decoder for [MinFiat]
            Decoders.addDecoder(clazz: [MinFiat].self) { (source: AnyObject) -> [MinFiat] in
                return Decoders.decode(clazz: [MinFiat].self, source: source)
            }
            // Decoder for MinFiat
            Decoders.addDecoder(clazz: MinFiat.self) { (source: AnyObject) -> MinFiat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MinFiat()
                instance.maxFiat = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxFiat"])
                return instance
            }


            // Decoder for [NetkiNameAddress]
            Decoders.addDecoder(clazz: [NetkiNameAddress].self) { (source: AnyObject) -> [NetkiNameAddress] in
                return Decoders.decode(clazz: [NetkiNameAddress].self, source: source)
            }
            // Decoder for NetkiNameAddress
            Decoders.addDecoder(clazz: NetkiNameAddress.self) { (source: AnyObject) -> NetkiNameAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NetkiNameAddress()
                instance.netkiName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netkiName"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [NewAddress]
            Decoders.addDecoder(clazz: [NewAddress].self) { (source: AnyObject) -> [NewAddress] in
                return Decoders.decode(clazz: [NewAddress].self, source: source)
            }
            // Decoder for NewAddress
            Decoders.addDecoder(clazz: NewAddress.self) { (source: AnyObject) -> NewAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NewAddress()
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [NewBankForm]
            Decoders.addDecoder(clazz: [NewBankForm].self) { (source: AnyObject) -> [NewBankForm] in
                return Decoders.decode(clazz: [NewBankForm].self, source: source)
            }
            // Decoder for NewBankForm
            Decoders.addDecoder(clazz: NewBankForm.self) { (source: AnyObject) -> NewBankForm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NewBankForm()
                instance.acctNick = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["acct_nick"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ban = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ban"])
                instance.ifsc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ifsc"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.banType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["banType"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.otp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["otp"])
                return instance
            }


            // Decoder for [NewFiatBankDeposit]
            Decoders.addDecoder(clazz: [NewFiatBankDeposit].self) { (source: AnyObject) -> [NewFiatBankDeposit] in
                return Decoders.decode(clazz: [NewFiatBankDeposit].self, source: source)
            }
            // Decoder for NewFiatBankDeposit
            Decoders.addDecoder(clazz: NewFiatBankDeposit.self) { (source: AnyObject) -> NewFiatBankDeposit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NewFiatBankDeposit()
                instance.amount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["amount"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.bank = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bank"])
                instance.depType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["depType"])
                return instance
            }


            // Decoder for [NewWallet]
            Decoders.addDecoder(clazz: [NewWallet].self) { (source: AnyObject) -> [NewWallet] in
                return Decoders.decode(clazz: [NewWallet].self, source: source)
            }
            // Decoder for NewWallet
            Decoders.addDecoder(clazz: NewWallet.self) { (source: AnyObject) -> NewWallet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NewWallet()
                instance.walletName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletName"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [NumberOtp]
            Decoders.addDecoder(clazz: [NumberOtp].self) { (source: AnyObject) -> [NumberOtp] in
                return Decoders.decode(clazz: [NumberOtp].self, source: source)
            }
            // Decoder for NumberOtp
            Decoders.addDecoder(clazz: NumberOtp.self) { (source: AnyObject) -> NumberOtp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NumberOtp()
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.otp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["otp"])
                return instance
            }


            // Decoder for [OrderData]
            Decoders.addDecoder(clazz: [OrderData].self) { (source: AnyObject) -> [OrderData] in
                return Decoders.decode(clazz: [OrderData].self, source: source)
            }
            // Decoder for OrderData
            Decoders.addDecoder(clazz: OrderData.self) { (source: AnyObject) -> OrderData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                instance.orderID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderID"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [OrderDataResponse]
            Decoders.addDecoder(clazz: [OrderDataResponse].self) { (source: AnyObject) -> [OrderDataResponse] in
                return Decoders.decode(clazz: [OrderDataResponse].self, source: source)
            }
            // Decoder for OrderDataResponse
            Decoders.addDecoder(clazz: OrderDataResponse.self) { (source: AnyObject) -> OrderDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [RateData]
            Decoders.addDecoder(clazz: [RateData].self) { (source: AnyObject) -> [RateData] in
                return Decoders.decode(clazz: [RateData].self, source: source)
            }
            // Decoder for RateData
            Decoders.addDecoder(clazz: RateData.self) { (source: AnyObject) -> RateData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateData()
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                return instance
            }


            // Decoder for [RateDataResponse]
            Decoders.addDecoder(clazz: [RateDataResponse].self) { (source: AnyObject) -> [RateDataResponse] in
                return Decoders.decode(clazz: [RateDataResponse].self, source: source)
            }
            // Decoder for RateDataResponse
            Decoders.addDecoder(clazz: RateDataResponse.self) { (source: AnyObject) -> RateDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: RateData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [RateDiffData]
            Decoders.addDecoder(clazz: [RateDiffData].self) { (source: AnyObject) -> [RateDiffData] in
                return Decoders.decode(clazz: [RateDiffData].self, source: source)
            }
            // Decoder for RateDiffData
            Decoders.addDecoder(clazz: RateDiffData.self) { (source: AnyObject) -> RateDiffData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateDiffData()
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                instance.difference = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["difference"])
                return instance
            }


            // Decoder for [RateDiffDataResponse]
            Decoders.addDecoder(clazz: [RateDiffDataResponse].self) { (source: AnyObject) -> [RateDiffDataResponse] in
                return Decoders.decode(clazz: [RateDiffDataResponse].self, source: source)
            }
            // Decoder for RateDiffDataResponse
            Decoders.addDecoder(clazz: RateDiffDataResponse.self) { (source: AnyObject) -> RateDiffDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateDiffDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: RateDiffData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [RateVolData]
            Decoders.addDecoder(clazz: [RateVolData].self) { (source: AnyObject) -> [RateVolData] in
                return Decoders.decode(clazz: [RateVolData].self, source: source)
            }
            // Decoder for RateVolData
            Decoders.addDecoder(clazz: RateVolData.self) { (source: AnyObject) -> RateVolData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateVolData()
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                return instance
            }


            // Decoder for [RateVolDataResponse]
            Decoders.addDecoder(clazz: [RateVolDataResponse].self) { (source: AnyObject) -> [RateVolDataResponse] in
                return Decoders.decode(clazz: [RateVolDataResponse].self, source: source)
            }
            // Decoder for RateVolDataResponse
            Decoders.addDecoder(clazz: RateVolDataResponse.self) { (source: AnyObject) -> RateVolDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateVolDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [RateVolTimeTypeData]
            Decoders.addDecoder(clazz: [RateVolTimeTypeData].self) { (source: AnyObject) -> [RateVolTimeTypeData] in
                return Decoders.decode(clazz: [RateVolTimeTypeData].self, source: source)
            }
            // Decoder for RateVolTimeTypeData
            Decoders.addDecoder(clazz: RateVolTimeTypeData.self) { (source: AnyObject) -> RateVolTimeTypeData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateVolTimeTypeData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                instance.ordType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ordType"])
                return instance
            }


            // Decoder for [RateVolTimeTypeDataResponse]
            Decoders.addDecoder(clazz: [RateVolTimeTypeDataResponse].self) { (source: AnyObject) -> [RateVolTimeTypeDataResponse] in
                return Decoders.decode(clazz: [RateVolTimeTypeDataResponse].self, source: source)
            }
            // Decoder for RateVolTimeTypeDataResponse
            Decoders.addDecoder(clazz: RateVolTimeTypeDataResponse.self) { (source: AnyObject) -> RateVolTimeTypeDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RateVolTimeTypeDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ResetPassword]
            Decoders.addDecoder(clazz: [ResetPassword].self) { (source: AnyObject) -> [ResetPassword] in
                return Decoders.decode(clazz: [ResetPassword].self, source: source)
            }
            // Decoder for ResetPassword
            Decoders.addDecoder(clazz: ResetPassword.self) { (source: AnyObject) -> ResetPassword in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResetPassword()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.repeatPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repeatPassword"])
                return instance
            }


            // Decoder for [SendCoin]
            Decoders.addDecoder(clazz: [SendCoin].self) { (source: AnyObject) -> [SendCoin] in
                return Decoders.decode(clazz: [SendCoin].self, source: source)
            }
            // Decoder for SendCoin
            Decoders.addDecoder(clazz: SendCoin.self) { (source: AnyObject) -> SendCoin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SendCoin()
                instance.satoshis = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["satoshis"])
                instance.toAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["toAddr"])
                instance.msg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msg"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                instance.fees = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["fees"])
                return instance
            }


            // Decoder for [SendCoinWallet]
            Decoders.addDecoder(clazz: [SendCoinWallet].self) { (source: AnyObject) -> [SendCoinWallet] in
                return Decoders.decode(clazz: [SendCoinWallet].self, source: source)
            }
            // Decoder for SendCoinWallet
            Decoders.addDecoder(clazz: SendCoinWallet.self) { (source: AnyObject) -> SendCoinWallet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SendCoinWallet()
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.amt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["amt"])
                instance.toAddr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["toAddr"])
                instance.msg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msg"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                instance.fees = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["fees"])
                return instance
            }


            // Decoder for [SendExchange]
            Decoders.addDecoder(clazz: [SendExchange].self) { (source: AnyObject) -> [SendExchange] in
                return Decoders.decode(clazz: [SendExchange].self, source: source)
            }
            // Decoder for SendExchange
            Decoders.addDecoder(clazz: SendExchange.self) { (source: AnyObject) -> SendExchange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SendExchange()
                instance.amt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["amt"])
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.msg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msg"])
                return instance
            }


            // Decoder for [SignupForm]
            Decoders.addDecoder(clazz: [SignupForm].self) { (source: AnyObject) -> [SignupForm] in
                return Decoders.decode(clazz: [SignupForm].self, source: source)
            }
            // Decoder for SignupForm
            Decoders.addDecoder(clazz: SignupForm.self) { (source: AnyObject) -> SignupForm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SignupForm()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.repeatPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repeatPassword"])
                instance.refID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refID"])
                return instance
            }


            // Decoder for [StandardInitiateLoginResultData]
            Decoders.addDecoder(clazz: [StandardInitiateLoginResultData].self) { (source: AnyObject) -> [StandardInitiateLoginResultData] in
                return Decoders.decode(clazz: [StandardInitiateLoginResultData].self, source: source)
            }
            // Decoder for StandardInitiateLoginResultData
            Decoders.addDecoder(clazz: StandardInitiateLoginResultData.self) { (source: AnyObject) -> StandardInitiateLoginResultData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StandardInitiateLoginResultData()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessInitiateLoginResponse.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [StandardLoginResultData]
            Decoders.addDecoder(clazz: [StandardLoginResultData].self) { (source: AnyObject) -> [StandardLoginResultData] in
                return Decoders.decode(clazz: [StandardLoginResultData].self, source: source)
            }
            // Decoder for StandardLoginResultData
            Decoders.addDecoder(clazz: StandardLoginResultData.self) { (source: AnyObject) -> StandardLoginResultData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StandardLoginResultData()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessLoginResponse.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [StandardTickerResultData]
            Decoders.addDecoder(clazz: [StandardTickerResultData].self) { (source: AnyObject) -> [StandardTickerResultData] in
                return Decoders.decode(clazz: [StandardTickerResultData].self, source: source)
            }
            // Decoder for StandardTickerResultData
            Decoders.addDecoder(clazz: StandardTickerResultData.self) { (source: AnyObject) -> StandardTickerResultData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StandardTickerResultData()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessTickerResponse.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [StandardVerifySignupResultData]
            Decoders.addDecoder(clazz: [StandardVerifySignupResultData].self) { (source: AnyObject) -> [StandardVerifySignupResultData] in
                return Decoders.decode(clazz: [StandardVerifySignupResultData].self, source: source)
            }
            // Decoder for StandardVerifySignupResultData
            Decoders.addDecoder(clazz: StandardVerifySignupResultData.self) { (source: AnyObject) -> StandardVerifySignupResultData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StandardVerifySignupResultData()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessVerifySignupResponse.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccCoinRefData]
            Decoders.addDecoder(clazz: [SuccCoinRefData].self) { (source: AnyObject) -> [SuccCoinRefData] in
                return Decoders.decode(clazz: [SuccCoinRefData].self, source: source)
            }
            // Decoder for SuccCoinRefData
            Decoders.addDecoder(clazz: SuccCoinRefData.self) { (source: AnyObject) -> SuccCoinRefData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccCoinRefData()
                instance.refPercent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["refPercent"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.orderID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderID"])
                instance.refID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refID"])
                instance.tradeID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tradeID"])
                instance.newUserIDMasked = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newUserIDMasked"])
                instance.depositID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["depositID"])
                instance.amtPaid = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["amtPaid"])
                return instance
            }


            // Decoder for [SuccCoinRefDataResponse]
            Decoders.addDecoder(clazz: [SuccCoinRefDataResponse].self) { (source: AnyObject) -> [SuccCoinRefDataResponse] in
                return Decoders.decode(clazz: [SuccCoinRefDataResponse].self, source: source)
            }
            // Decoder for SuccCoinRefDataResponse
            Decoders.addDecoder(clazz: SuccCoinRefDataResponse.self) { (source: AnyObject) -> SuccCoinRefDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccCoinRefDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccRefData]
            Decoders.addDecoder(clazz: [SuccRefData].self) { (source: AnyObject) -> [SuccRefData] in
                return Decoders.decode(clazz: [SuccRefData].self, source: source)
            }
            // Decoder for SuccRefData
            Decoders.addDecoder(clazz: SuccRefData.self) { (source: AnyObject) -> SuccRefData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccRefData()
                instance.refPercent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["refPercent"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.refID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refID"])
                instance.emailVerified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["emailVerified"])
                instance.kycComplete = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["kycComplete"])
                instance.btcEarned = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["btcEarned"])
                instance.fiatEarned = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fiatEarned"])
                return instance
            }


            // Decoder for [SuccRefDataResponse]
            Decoders.addDecoder(clazz: [SuccRefDataResponse].self) { (source: AnyObject) -> [SuccRefDataResponse] in
                return Decoders.decode(clazz: [SuccRefDataResponse].self, source: source)
            }
            // Decoder for SuccRefDataResponse
            Decoders.addDecoder(clazz: SuccRefDataResponse.self) { (source: AnyObject) -> SuccRefDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccRefDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccessCancelData]
            Decoders.addDecoder(clazz: [SuccessCancelData].self) { (source: AnyObject) -> [SuccessCancelData] in
                return Decoders.decode(clazz: [SuccessCancelData].self, source: source)
            }
            // Decoder for SuccessCancelData
            Decoders.addDecoder(clazz: SuccessCancelData.self) { (source: AnyObject) -> SuccessCancelData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessCancelData()
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                return instance
            }


            // Decoder for [SuccessCancelDataResponse]
            Decoders.addDecoder(clazz: [SuccessCancelDataResponse].self) { (source: AnyObject) -> [SuccessCancelDataResponse] in
                return Decoders.decode(clazz: [SuccessCancelDataResponse].self, source: source)
            }
            // Decoder for SuccessCancelDataResponse
            Decoders.addDecoder(clazz: SuccessCancelDataResponse.self) { (source: AnyObject) -> SuccessCancelDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessCancelDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessCancelData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccessInitiateLoginResponse]
            Decoders.addDecoder(clazz: [SuccessInitiateLoginResponse].self) { (source: AnyObject) -> [SuccessInitiateLoginResponse] in
                return Decoders.decode(clazz: [SuccessInitiateLoginResponse].self, source: source)
            }
            // Decoder for SuccessInitiateLoginResponse
            Decoders.addDecoder(clazz: SuccessInitiateLoginResponse.self) { (source: AnyObject) -> SuccessInitiateLoginResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessInitiateLoginResponse()
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.validTill = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["validTill"])
                instance.mfa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mfa"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                return instance
            }


            // Decoder for [SuccessLoginResponse]
            Decoders.addDecoder(clazz: [SuccessLoginResponse].self) { (source: AnyObject) -> [SuccessLoginResponse] in
                return Decoders.decode(clazz: [SuccessLoginResponse].self, source: source)
            }
            // Decoder for SuccessLoginResponse
            Decoders.addDecoder(clazz: SuccessLoginResponse.self) { (source: AnyObject) -> SuccessLoginResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessLoginResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.keyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["keyType"])
                instance.keyNeeded = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["keyNeeded"])
                return instance
            }


            // Decoder for [SuccessOrderData]
            Decoders.addDecoder(clazz: [SuccessOrderData].self) { (source: AnyObject) -> [SuccessOrderData] in
                return Decoders.decode(clazz: [SuccessOrderData].self, source: source)
            }
            // Decoder for SuccessOrderData
            Decoders.addDecoder(clazz: SuccessOrderData.self) { (source: AnyObject) -> SuccessOrderData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessOrderData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                instance.rate = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rate"])
                instance.orderID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderID"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.humanTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["human_time"])
                return instance
            }


            // Decoder for [SuccessOrderDataResponse]
            Decoders.addDecoder(clazz: [SuccessOrderDataResponse].self) { (source: AnyObject) -> [SuccessOrderDataResponse] in
                return Decoders.decode(clazz: [SuccessOrderDataResponse].self, source: source)
            }
            // Decoder for SuccessOrderDataResponse
            Decoders.addDecoder(clazz: SuccessOrderDataResponse.self) { (source: AnyObject) -> SuccessOrderDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessOrderDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: SuccessOrderData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccessResult]
            Decoders.addDecoder(clazz: [SuccessResult].self) { (source: AnyObject) -> [SuccessResult] in
                return Decoders.decode(clazz: [SuccessResult].self, source: source)
            }
            // Decoder for SuccessResult
            Decoders.addDecoder(clazz: SuccessResult.self) { (source: AnyObject) -> SuccessResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessResult()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: JsValue.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [SuccessTickerResponse]
            Decoders.addDecoder(clazz: [SuccessTickerResponse].self) { (source: AnyObject) -> [SuccessTickerResponse] in
                return Decoders.decode(clazz: [SuccessTickerResponse].self, source: source)
            }
            // Decoder for SuccessTickerResponse
            Decoders.addDecoder(clazz: SuccessTickerResponse.self) { (source: AnyObject) -> SuccessTickerResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessTickerResponse()
                instance.lastPrice = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["lastPrice"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"])
                instance.bid = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bid"])
                instance.ask = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ask"])
                instance.fiatVolume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fiatVolume"])
                instance.coinVolume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["coinVolume"])
                instance.open = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["open"])
                instance.high = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["high"])
                instance.low = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["low"])
                return instance
            }


            // Decoder for [SuccessVerifySignupResponse]
            Decoders.addDecoder(clazz: [SuccessVerifySignupResponse].self) { (source: AnyObject) -> [SuccessVerifySignupResponse] in
                return Decoders.decode(clazz: [SuccessVerifySignupResponse].self, source: source)
            }
            // Decoder for SuccessVerifySignupResponse
            Decoders.addDecoder(clazz: SuccessVerifySignupResponse.self) { (source: AnyObject) -> SuccessVerifySignupResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessVerifySignupResponse()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.validTill = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["validTill"])
                instance.loginMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loginMessage"])
                instance.loginToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loginToken"])
                return instance
            }


            // Decoder for [TimeData]
            Decoders.addDecoder(clazz: [TimeData].self) { (source: AnyObject) -> [TimeData] in
                return Decoders.decode(clazz: [TimeData].self, source: source)
            }
            // Decoder for TimeData
            Decoders.addDecoder(clazz: TimeData.self) { (source: AnyObject) -> TimeData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TimeData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.verifiedTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["verifiedTime"])
                instance.completedTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedTime"])
                return instance
            }


            // Decoder for [TimeDataCoin]
            Decoders.addDecoder(clazz: [TimeDataCoin].self) { (source: AnyObject) -> [TimeDataCoin] in
                return Decoders.decode(clazz: [TimeDataCoin].self, source: source)
            }
            // Decoder for TimeDataCoin
            Decoders.addDecoder(clazz: TimeDataCoin.self) { (source: AnyObject) -> TimeDataCoin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TimeDataCoin()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.verifiedTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["verifiedTime"])
                return instance
            }


            // Decoder for [TimeKYCData]
            Decoders.addDecoder(clazz: [TimeKYCData].self) { (source: AnyObject) -> [TimeKYCData] in
                return Decoders.decode(clazz: [TimeKYCData].self, source: source)
            }
            // Decoder for TimeKYCData
            Decoders.addDecoder(clazz: TimeKYCData.self) { (source: AnyObject) -> TimeKYCData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TimeKYCData()
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.updateTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["updateTime"])
                return instance
            }


            // Decoder for [TradeAddressData]
            Decoders.addDecoder(clazz: [TradeAddressData].self) { (source: AnyObject) -> [TradeAddressData] in
                return Decoders.decode(clazz: [TradeAddressData].self, source: source)
            }
            // Decoder for TradeAddressData
            Decoders.addDecoder(clazz: TradeAddressData.self) { (source: AnyObject) -> TradeAddressData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeAddressData()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.netki = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netki"])
                return instance
            }


            // Decoder for [TradeAddressDataResponse]
            Decoders.addDecoder(clazz: [TradeAddressDataResponse].self) { (source: AnyObject) -> [TradeAddressDataResponse] in
                return Decoders.decode(clazz: [TradeAddressDataResponse].self, source: source)
            }
            // Decoder for TradeAddressDataResponse
            Decoders.addDecoder(clazz: TradeAddressDataResponse.self) { (source: AnyObject) -> TradeAddressDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeAddressDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [TradeCoinWithdrawData]
            Decoders.addDecoder(clazz: [TradeCoinWithdrawData].self) { (source: AnyObject) -> [TradeCoinWithdrawData] in
                return Decoders.decode(clazz: [TradeCoinWithdrawData].self, source: source)
            }
            // Decoder for TradeCoinWithdrawData
            Decoders.addDecoder(clazz: TradeCoinWithdrawData.self) { (source: AnyObject) -> TradeCoinWithdrawData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeCoinWithdrawData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeData.self, source: sourceDictionary["timeDetails"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.value = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["value"])
                instance.fees = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fees"])
                instance.withdrawID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withdrawID"])
                instance.txHash = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["txHash"])
                return instance
            }


            // Decoder for [TradeCoinWithdrawDataResponse]
            Decoders.addDecoder(clazz: [TradeCoinWithdrawDataResponse].self) { (source: AnyObject) -> [TradeCoinWithdrawDataResponse] in
                return Decoders.decode(clazz: [TradeCoinWithdrawDataResponse].self, source: source)
            }
            // Decoder for TradeCoinWithdrawDataResponse
            Decoders.addDecoder(clazz: TradeCoinWithdrawDataResponse.self) { (source: AnyObject) -> TradeCoinWithdrawDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeCoinWithdrawDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [TradeSummaryData]
            Decoders.addDecoder(clazz: [TradeSummaryData].self) { (source: AnyObject) -> [TradeSummaryData] in
                return Decoders.decode(clazz: [TradeSummaryData].self, source: source)
            }
            // Decoder for TradeSummaryData
            Decoders.addDecoder(clazz: TradeSummaryData.self) { (source: AnyObject) -> TradeSummaryData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeSummaryData()
                instance.completedAsksSum = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedAsksSum"])
                instance.completedBidsSum = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedBidsSum"])
                instance.completedAsksCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedAsksCount"])
                instance.completedBidsCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedBidsCount"])
                instance.pendingAsksCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pendingAsksCount"])
                instance.pendingBidsCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pendingBidsCount"])
                return instance
            }


            // Decoder for [TradeSummaryDataResponse]
            Decoders.addDecoder(clazz: [TradeSummaryDataResponse].self) { (source: AnyObject) -> [TradeSummaryDataResponse] in
                return Decoders.decode(clazz: [TradeSummaryDataResponse].self, source: source)
            }
            // Decoder for TradeSummaryDataResponse
            Decoders.addDecoder(clazz: TradeSummaryDataResponse.self) { (source: AnyObject) -> TradeSummaryDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TradeSummaryDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: TradeSummaryData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [UserSummaryData]
            Decoders.addDecoder(clazz: [UserSummaryData].self) { (source: AnyObject) -> [UserSummaryData] in
                return Decoders.decode(clazz: [UserSummaryData].self, source: source)
            }
            // Decoder for UserSummaryData
            Decoders.addDecoder(clazz: UserSummaryData.self) { (source: AnyObject) -> UserSummaryData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserSummaryData()
                instance.kycStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kycStatus"])
                instance.bankLinkStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bankLinkStatus"])
                instance.tradeReady = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tradeReady"])
                instance.isDisabledAccount = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDisabledAccount"])
                instance.faSecure = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["faSecure"])
                instance.hasPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hasPhone"])
                return instance
            }


            // Decoder for [UserSummaryDataResponse]
            Decoders.addDecoder(clazz: [UserSummaryDataResponse].self) { (source: AnyObject) -> [UserSummaryDataResponse] in
                return Decoders.decode(clazz: [UserSummaryDataResponse].self, source: source)
            }
            // Decoder for UserSummaryDataResponse
            Decoders.addDecoder(clazz: UserSummaryDataResponse.self) { (source: AnyObject) -> UserSummaryDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserSummaryDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: UserSummaryData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ValidAddressSearchData]
            Decoders.addDecoder(clazz: [ValidAddressSearchData].self) { (source: AnyObject) -> [ValidAddressSearchData] in
                return Decoders.decode(clazz: [ValidAddressSearchData].self, source: source)
            }
            // Decoder for ValidAddressSearchData
            Decoders.addDecoder(clazz: ValidAddressSearchData.self) { (source: AnyObject) -> ValidAddressSearchData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ValidAddressSearchData()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.balance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["balance"])
                instance.totalReceived = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalReceived"])
                instance.unconfirmedBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["unconfirmedBalance"])
                instance.unconfirmedTxApperances = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unconfirmedTxApperances"])
                instance.txApperances = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["txApperances"])
                instance.transactions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["transactions"])
                return instance
            }


            // Decoder for [ValidAddressSearchDataResponse]
            Decoders.addDecoder(clazz: [ValidAddressSearchDataResponse].self) { (source: AnyObject) -> [ValidAddressSearchDataResponse] in
                return Decoders.decode(clazz: [ValidAddressSearchDataResponse].self, source: source)
            }
            // Decoder for ValidAddressSearchDataResponse
            Decoders.addDecoder(clazz: ValidAddressSearchDataResponse.self) { (source: AnyObject) -> ValidAddressSearchDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ValidAddressSearchDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: ValidAddressSearchData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [VolData]
            Decoders.addDecoder(clazz: [VolData].self) { (source: AnyObject) -> [VolData] in
                return Decoders.decode(clazz: [VolData].self, source: source)
            }
            // Decoder for VolData
            Decoders.addDecoder(clazz: VolData.self) { (source: AnyObject) -> VolData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolData()
                instance.vol = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["vol"])
                return instance
            }


            // Decoder for [VolDataResponse]
            Decoders.addDecoder(clazz: [VolDataResponse].self) { (source: AnyObject) -> [VolDataResponse] in
                return Decoders.decode(clazz: [VolDataResponse].self, source: source)
            }
            // Decoder for VolDataResponse
            Decoders.addDecoder(clazz: VolDataResponse.self) { (source: AnyObject) -> VolDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VolDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: VolData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [WalletAddressData]
            Decoders.addDecoder(clazz: [WalletAddressData].self) { (source: AnyObject) -> [WalletAddressData] in
                return Decoders.decode(clazz: [WalletAddressData].self, source: source)
            }
            // Decoder for WalletAddressData
            Decoders.addDecoder(clazz: WalletAddressData.self) { (source: AnyObject) -> WalletAddressData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletAddressData()
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.minConf = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minConf"])
                instance.netki = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netki"])
                return instance
            }


            // Decoder for [WalletAddressDataResponse]
            Decoders.addDecoder(clazz: [WalletAddressDataResponse].self) { (source: AnyObject) -> [WalletAddressDataResponse] in
                return Decoders.decode(clazz: [WalletAddressDataResponse].self, source: source)
            }
            // Decoder for WalletAddressDataResponse
            Decoders.addDecoder(clazz: WalletAddressDataResponse.self) { (source: AnyObject) -> WalletAddressDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletAddressDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [WalletCoinWithdrawData]
            Decoders.addDecoder(clazz: [WalletCoinWithdrawData].self) { (source: AnyObject) -> [WalletCoinWithdrawData] in
                return Decoders.decode(clazz: [WalletCoinWithdrawData].self, source: source)
            }
            // Decoder for WalletCoinWithdrawData
            Decoders.addDecoder(clazz: WalletCoinWithdrawData.self) { (source: AnyObject) -> WalletCoinWithdrawData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletCoinWithdrawData()
                instance.timeDetails = Decoders.decodeOptional(clazz: TimeData.self, source: sourceDictionary["timeDetails"])
                instance.txID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["txID"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.satoshis = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["satoshis"])
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.withdrawID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withdrawID"])
                instance.sentTo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sentTo"])
                return instance
            }


            // Decoder for [WalletCoinWithdrawDataResponse]
            Decoders.addDecoder(clazz: [WalletCoinWithdrawDataResponse].self) { (source: AnyObject) -> [WalletCoinWithdrawDataResponse] in
                return Decoders.decode(clazz: [WalletCoinWithdrawDataResponse].self, source: source)
            }
            // Decoder for WalletCoinWithdrawDataResponse
            Decoders.addDecoder(clazz: WalletCoinWithdrawDataResponse.self) { (source: AnyObject) -> WalletCoinWithdrawDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletCoinWithdrawDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [WalletSummaryData]
            Decoders.addDecoder(clazz: [WalletSummaryData].self) { (source: AnyObject) -> [WalletSummaryData] in
                return Decoders.decode(clazz: [WalletSummaryData].self, source: source)
            }
            // Decoder for WalletSummaryData
            Decoders.addDecoder(clazz: WalletSummaryData.self) { (source: AnyObject) -> WalletSummaryData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletSummaryData()
                instance.walletConfirmedBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["walletConfirmedBalance"])
                instance.walletUncofirmedBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["walletUncofirmedBalance"])
                instance.hasWalletNetki = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasWalletNetki"])
                instance.walletNetki = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletNetki"])
                instance.walletNetkiAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletNetkiAddress"])
                instance.walletNetkiWalletId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletNetkiWalletId"])
                return instance
            }


            // Decoder for [WalletSummaryDataResponse]
            Decoders.addDecoder(clazz: [WalletSummaryDataResponse].self) { (source: AnyObject) -> [WalletSummaryDataResponse] in
                return Decoders.decode(clazz: [WalletSummaryDataResponse].self, source: source)
            }
            // Decoder for WalletSummaryDataResponse
            Decoders.addDecoder(clazz: WalletSummaryDataResponse.self) { (source: AnyObject) -> WalletSummaryDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletSummaryDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: WalletSummaryData.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [WalletsData]
            Decoders.addDecoder(clazz: [WalletsData].self) { (source: AnyObject) -> [WalletsData] in
                return Decoders.decode(clazz: [WalletsData].self, source: source)
            }
            // Decoder for WalletsData
            Decoders.addDecoder(clazz: WalletsData.self) { (source: AnyObject) -> WalletsData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletsData()
                instance.walletID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["walletID"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.coinBalance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["coinBalance"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.info = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["info"])
                instance.netki = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netki"])
                return instance
            }


            // Decoder for [WalletsDataResponse]
            Decoders.addDecoder(clazz: [WalletsDataResponse].self) { (source: AnyObject) -> [WalletsDataResponse] in
                return Decoders.decode(clazz: [WalletsDataResponse].self, source: source)
            }
            // Decoder for WalletsDataResponse
            Decoders.addDecoder(clazz: WalletsDataResponse.self) { (source: AnyObject) -> WalletsDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WalletsDataResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["message"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [WithdrawFiat]
            Decoders.addDecoder(clazz: [WithdrawFiat].self) { (source: AnyObject) -> [WithdrawFiat] in
                return Decoders.decode(clazz: [WithdrawFiat].self, source: source)
            }
            // Decoder for WithdrawFiat
            Decoders.addDecoder(clazz: WithdrawFiat.self) { (source: AnyObject) -> WithdrawFiat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WithdrawFiat()
                instance.fiat = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fiat"])
                instance.account = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["account"])
                instance.msg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msg"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                return instance
            }


            // Decoder for [WithdrawID]
            Decoders.addDecoder(clazz: [WithdrawID].self) { (source: AnyObject) -> [WithdrawID] in
                return Decoders.decode(clazz: [WithdrawID].self, source: source)
            }
            // Decoder for WithdrawID
            Decoders.addDecoder(clazz: WithdrawID.self) { (source: AnyObject) -> WithdrawID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WithdrawID()
                instance.withdrawID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withdrawID"])
                return instance
            }
        }
    }
}
