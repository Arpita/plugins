//
// ExchangeBankCoinDataAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ExchangeBankCoinDataAPI: APIBase {
    /**
     Exchange Coin Addresses
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinaddresses(completion: ((data: TradeAddressDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinaddressesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Exchange Coin Addresses
     - GET /v1/user/exchange/bank/coin/addresses
     - Gets a List of Users Exchange Bitcoin Deposit Addresses.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "address" : "aeiou",
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "address" : "aeiou",
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]

     - returns: RequestBuilder<TradeAddressDataResponse> 
     */
    public class func v1userexchangebankcoinaddressesWithRequestBuilder() -> RequestBuilder<TradeAddressDataResponse> {
        let path = "/v1/user/exchange/bank/coin/addresses"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TradeAddressDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Available Exchange Coin Balance
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinbalanceavailable(completion: ((data: VolDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinbalanceavailableWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Available Exchange Coin Balance
     - GET /v1/user/exchange/bank/coin/balance/total
     - Returns balance which is in Available for Trades. The response is in satoshis.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]

     - returns: RequestBuilder<VolDataResponse> 
     */
    public class func v1userexchangebankcoinbalanceavailableWithRequestBuilder() -> RequestBuilder<VolDataResponse> {
        let path = "/v1/user/exchange/bank/coin/balance/total"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VolDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     In Trade Coin Balance
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinbalancepending(completion: ((data: VolDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinbalancependingWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     In Trade Coin Balance
     - GET /v1/user/exchange/bank/coin/balance/pending
     - Returns in-trade or pending coin balance in satoshi.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]

     - returns: RequestBuilder<VolDataResponse> 
     */
    public class func v1userexchangebankcoinbalancependingWithRequestBuilder() -> RequestBuilder<VolDataResponse> {
        let path = "/v1/user/exchange/bank/coin/balance/pending"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VolDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Total Exchange Coin Balance
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinbalancetotal(completion: ((data: VolDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinbalancetotalWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Total Exchange Coin Balance
     - GET /v1/user/exchange/bank/coin/balance/available
     - Returns users total coin balance in satoshis. Pending + Available
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : {
    "vol" : 123456789
  },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]

     - returns: RequestBuilder<VolDataResponse> 
     */
    public class func v1userexchangebankcoinbalancetotalWithRequestBuilder() -> RequestBuilder<VolDataResponse> {
        let path = "/v1/user/exchange/bank/coin/balance/available"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VolDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Cancelled Exchange Coin Deposits
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoindepositcancelled(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: CoinDepDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoindepositcancelledWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Cancelled Exchange Coin Deposits
     - GET /v1/user/exchange/bank/coin/deposit/cancelled
     - Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<CoinDepDataResponse> 
     */
    public class func v1userexchangebankcoindepositcancelledWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<CoinDepDataResponse> {
        let path = "/v1/user/exchange/bank/coin/deposit/cancelled"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CoinDepDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Unverified Exchange Coin Deposits
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoindepositunverified(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: CoinDepDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoindepositunverifiedWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Unverified Exchange Coin Deposits
     - GET /v1/user/exchange/bank/coin/deposit/unverified
     - Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<CoinDepDataResponse> 
     */
    public class func v1userexchangebankcoindepositunverifiedWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<CoinDepDataResponse> {
        let path = "/v1/user/exchange/bank/coin/deposit/unverified"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CoinDepDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Verified Exchange Coin Deposits
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoindepositverified(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: CoinDepDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoindepositverifiedWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Verified Exchange Coin Deposits
     - GET /v1/user/exchange/bank/coin/deposit/verified
     - Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "reason" : "aeiou",
    "depositID" : "aeiou",
    "address" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<CoinDepDataResponse> 
     */
    public class func v1userexchangebankcoindepositverifiedWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<CoinDepDataResponse> {
        let path = "/v1/user/exchange/bank/coin/deposit/verified"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CoinDepDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Cancelled Exchange Coin Withdrawals
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinwithdrawcancelled(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: TradeCoinWithdrawDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinwithdrawcancelledWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Cancelled Exchange Coin Withdrawals
     - GET /v1/user/exchange/bank/coin/withdraw/cancelled
     - Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<TradeCoinWithdrawDataResponse> 
     */
    public class func v1userexchangebankcoinwithdrawcancelledWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<TradeCoinWithdrawDataResponse> {
        let path = "/v1/user/exchange/bank/coin/withdraw/cancelled"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TradeCoinWithdrawDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Completed Exchange Coin Withdrawals
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinwithdrawcompleted(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: TradeCoinWithdrawDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinwithdrawcompletedWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Completed Exchange Coin Withdrawals
     - GET /v1/user/exchange/bank/coin/withdraw/completed
     - Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<TradeCoinWithdrawDataResponse> 
     */
    public class func v1userexchangebankcoinwithdrawcompletedWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<TradeCoinWithdrawDataResponse> {
        let path = "/v1/user/exchange/bank/coin/withdraw/completed"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TradeCoinWithdrawDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Unverified Exchange Coin Withdrawals
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinwithdrawunverified(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: TradeCoinWithdrawDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinwithdrawunverifiedWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Unverified Exchange Coin Withdrawals
     - GET /v1/user/exchange/bank/coin/withdraw/unverified
     - Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<TradeCoinWithdrawDataResponse> 
     */
    public class func v1userexchangebankcoinwithdrawunverifiedWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<TradeCoinWithdrawDataResponse> {
        let path = "/v1/user/exchange/bank/coin/withdraw/unverified"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TradeCoinWithdrawDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Verified Exchange Coin Withdrawals
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userexchangebankcoinwithdrawverified(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil, completion: ((data: TradeCoinWithdrawDataResponse?, error: ErrorType?) -> Void)) {
        v1userexchangebankcoinwithdrawverifiedWithRequestBuilder(from: from, to: to, max: max, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Verified Exchange Coin Withdrawals
     - GET /v1/user/exchange/bank/coin/withdraw/verified
     - Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "fees" : 123456789,
    "address" : "aeiou",
    "withdrawID" : "aeiou",
    "value" : 123456789,
    "txHash" : "aeiou",
    "timeDetails" : {
      "completedTime" : 123456789,
      "time" : 123456789,
      "verifiedTime" : 123456789
    }
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter from: (query) From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (optional, default to 0)
     - parameter to: (query) To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (optional, default to 9223372036854776000)
     - parameter max: (query) Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (optional, default to 10)
     - parameter offset: (query) Offset defaults to 0 if input is invalid. (Optional) (optional, default to 0)

     - returns: RequestBuilder<TradeCoinWithdrawDataResponse> 
     */
    public class func v1userexchangebankcoinwithdrawverifiedWithRequestBuilder(from from: Int64? = nil, to: Int64? = nil, max: Int32? = nil, offset: Int64? = nil) -> RequestBuilder<TradeCoinWithdrawDataResponse> {
        let path = "/v1/user/exchange/bank/coin/withdraw/verified"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "max": max?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TradeCoinWithdrawDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
