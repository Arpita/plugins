//
// WalletActionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WalletActionsAPI: APIBase {
    /**
     New Bitcoin Address
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinaddressnew(body body: NewAddress, completion: ((data: WalletAddressDataResponse?, error: ErrorType?) -> Void)) {
        v1userwalletcoinaddressnewWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     New Bitcoin Address
     - PUT /v1/user/wallet/coin/address/new
     - Generates a New Bitcoin Address to store coins.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "walletID" : "aeiou",
    "address" : "aeiou",
    "minConf" : 123,
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "walletID" : "aeiou",
    "address" : "aeiou",
    "minConf" : 123,
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<WalletAddressDataResponse> 
     */
    public class func v1userwalletcoinaddressnewWithRequestBuilder(body body: NewAddress) -> RequestBuilder<WalletAddressDataResponse> {
        let path = "/v1/user/wallet/coin/address/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WalletAddressDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create New Wallet
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinnew(body body: NewWallet, completion: ((data: WalletAddressDataResponse?, error: ErrorType?) -> Void)) {
        v1userwalletcoinnewWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create New Wallet
     - PUT /v1/user/wallet/coin/new
     - Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "walletID" : "aeiou",
    "address" : "aeiou",
    "minConf" : 123,
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : [ {
    "walletID" : "aeiou",
    "address" : "aeiou",
    "minConf" : 123,
    "netki" : "aeiou",
    "time" : 123456789,
    "info" : "aeiou"
  } ],
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<WalletAddressDataResponse> 
     */
    public class func v1userwalletcoinnewWithRequestBuilder(body body: NewWallet) -> RequestBuilder<WalletAddressDataResponse> {
        let path = "/v1/user/wallet/coin/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WalletAddressDataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Initiate Bitcoin Withdrawal
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinwithdrawinitiate(body body: SendCoinWallet, completion: ((data: SuccessResult?, error: ErrorType?) -> Void)) {
        v1userwalletcoinwithdrawinitiateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Initiate Bitcoin Withdrawal
     - POST /v1/user/wallet/coin/withdraw/initiate
     - The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResult> 
     */
    public class func v1userwalletcoinwithdrawinitiateWithRequestBuilder(body body: SendCoinWallet) -> RequestBuilder<SuccessResult> {
        let path = "/v1/user/wallet/coin/withdraw/initiate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send to Exchange
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinwithdrawsendToExchange(body body: SendExchange, completion: ((data: SuccessResult?, error: ErrorType?) -> Void)) {
        v1userwalletcoinwithdrawsendToExchangeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Send to Exchange
     - PUT /v1/user/wallet/coin/withdraw/sendToExchange
     - This function transfers funds to yout Exchange Balance without the need for any confirmations.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResult> 
     */
    public class func v1userwalletcoinwithdrawsendToExchangeWithRequestBuilder(body body: SendExchange) -> RequestBuilder<SuccessResult> {
        let path = "/v1/user/wallet/coin/withdraw/sendToExchange"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Cancel Bitcoin Withdrawal
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinwithdrawunverifiedcancel(body body: WithdrawID, completion: ((data: SuccessResult?, error: ErrorType?) -> Void)) {
        v1userwalletcoinwithdrawunverifiedcancelWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Cancel Bitcoin Withdrawal
     - DELETE /v1/user/wallet/coin/withdraw/unverified/cancel
     - Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResult> 
     */
    public class func v1userwalletcoinwithdrawunverifiedcancelWithRequestBuilder(body body: WithdrawID) -> RequestBuilder<SuccessResult> {
        let path = "/v1/user/wallet/coin/withdraw/unverified/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Verify Bitcoin Withdrawal
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1userwalletcoinwithdrawverify(body body: Code, completion: ((data: SuccessResult?, error: ErrorType?) -> Void)) {
        v1userwalletcoinwithdrawverifyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Verify Bitcoin Withdrawal
     - PUT /v1/user/wallet/coin/withdraw/verify
     - Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<SuccessResult> 
     */
    public class func v1userwalletcoinwithdrawverifyWithRequestBuilder(body body: Code) -> RequestBuilder<SuccessResult> {
        let path = "/v1/user/wallet/coin/withdraw/verify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets a Verification Code
     
     - parameter body: (body) You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1walletcoinwithdrawnewVerifycode(body body: WithdrawID, completion: ((data: SuccessResult?, error: ErrorType?) -> Void)) {
        v1walletcoinwithdrawnewVerifycodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets a Verification Code
     - POST /v1/wallet/coin/withdraw/newVerifycode
     - Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     - examples: [{contentType=application/json, example={
  "method" : "aeiou",
  "success" : true,
  "time" : "2000-01-23T04:56:07.000+0000",
  "message" : { },
  "title" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <success>true</success>
  <method>string</method>
  <title>string</title>
  <time>2000-01-23T04:56:07.000Z</time>
</null>}]
     
     - parameter body: (body) You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode 

     - returns: RequestBuilder<SuccessResult> 
     */
    public class func v1walletcoinwithdrawnewVerifycodeWithRequestBuilder(body body: WithdrawID) -> RequestBuilder<SuccessResult> {
        let path = "/v1/wallet/coin/withdraw/newVerifycode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
