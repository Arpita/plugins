=begin
Coinsecure Api Documentation

To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: 1.0b

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class AccountDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [BankSummaryDataResponse]
    def v1exchangebanksummary(authorization, opts = {})
      data, _status_code, _headers = v1exchangebanksummary_with_http_info(authorization, opts)
      return data
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(BankSummaryDataResponse, Fixnum, Hash)>] BankSummaryDataResponse data, response status code and response headers
    def v1exchangebanksummary_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1exchangebanksummary ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1exchangebanksummary" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/summary".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankSummaryDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1exchangebanksummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users Coin Fee Percentage
    # Returns the users coin fee percentage. The response is in percentage.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [DoubleDataResponse]
    def v1exchangeusercoinfee(opts = {})
      data, _status_code, _headers = v1exchangeusercoinfee_with_http_info(opts)
      return data
    end

    # Users Coin Fee Percentage
    # Returns the users coin fee percentage. The response is in percentage.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(DoubleDataResponse, Fixnum, Hash)>] DoubleDataResponse data, response status code and response headers
    def v1exchangeusercoinfee_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1exchangeusercoinfee ..."
      end
      # resource path
      local_var_path = "/v1/user/exchange/coin/fee".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoubleDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1exchangeusercoinfee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users Fiat Fee Percentage
    # Returns the users fiat fee percentage. The response is in percentage.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [DoubleDataResponse]
    def v1exchangeuserfiatfee(authorization, opts = {})
      data, _status_code, _headers = v1exchangeuserfiatfee_with_http_info(authorization, opts)
      return data
    end

    # Users Fiat Fee Percentage
    # Returns the users fiat fee percentage. The response is in percentage.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(DoubleDataResponse, Fixnum, Hash)>] DoubleDataResponse data, response status code and response headers
    def v1exchangeuserfiatfee_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1exchangeuserfiatfee ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1exchangeuserfiatfee" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/fiat/fee".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoubleDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1exchangeuserfiatfee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Coinsecure.me Netki Lookup
    # Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
    # @param netki_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [DoubleDataResponse]
    def v1netkisearch_netki_name(netki_name, opts = {})
      data, _status_code, _headers = v1netkisearch_netki_name_with_http_info(netki_name, opts)
      return data
    end

    # Coinsecure.me Netki Lookup
    # Searches for a coinsecure.me Netki Wallet Name and responds with an Address model output.
    # @param netki_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(DoubleDataResponse, Fixnum, Hash)>] DoubleDataResponse data, response status code and response headers
    def v1netkisearch_netki_name_with_http_info(netki_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1netkisearch_netki_name ..."
      end
      # verify the required parameter 'netki_name' is set
      fail ArgumentError, "Missing the required parameter 'netki_name' when calling AccountDataApi.v1netkisearch_netki_name" if netki_name.nil?
      # resource path
      local_var_path = "/v1/netki/search/{netkiName}".sub('{format}','json').sub('{' + 'netkiName' + '}', netki_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DoubleDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1netkisearch_netki_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets KYC Status Details
    # Gets Users KYC Status Details.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [KYCDataResponse]
    def v1userexchangekycs(authorization, opts = {})
      data, _status_code, _headers = v1userexchangekycs_with_http_info(authorization, opts)
      return data
    end

    # Gets KYC Status Details
    # Gets Users KYC Status Details.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(KYCDataResponse, Fixnum, Hash)>] KYCDataResponse data, response status code and response headers
    def v1userexchangekycs_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangekycs ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangekycs" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/kycs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KYCDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangekycs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users Paid Fiat Referrals
    # Returns the Users Paid Coin Referrals.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccCoinRefDataResponse]
    def v1userexchangereferralcoinpaid(authorization, opts = {})
      data, _status_code, _headers = v1userexchangereferralcoinpaid_with_http_info(authorization, opts)
      return data
    end

    # Users Paid Fiat Referrals
    # Returns the Users Paid Coin Referrals.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccCoinRefDataResponse, Fixnum, Hash)>] SuccCoinRefDataResponse data, response status code and response headers
    def v1userexchangereferralcoinpaid_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangereferralcoinpaid ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangereferralcoinpaid" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/referral/coin/paid".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccCoinRefDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangereferralcoinpaid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Users Successful Referral Links
    # Gets Users Successful Referral Links that can be used during signup.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccRefDataResponse]
    def v1userexchangereferralcoinsuccessful(authorization, opts = {})
      data, _status_code, _headers = v1userexchangereferralcoinsuccessful_with_http_info(authorization, opts)
      return data
    end

    # Gets Users Successful Referral Links
    # Gets Users Successful Referral Links that can be used during signup.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccRefDataResponse, Fixnum, Hash)>] SuccRefDataResponse data, response status code and response headers
    def v1userexchangereferralcoinsuccessful_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangereferralcoinsuccessful ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangereferralcoinsuccessful" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/referral/coin/successful".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccRefDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangereferralcoinsuccessful\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users Paid Fiat Referrals
    # Returns the Users Paid Fiat Referrals.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccCoinRefDataResponse]
    def v1userexchangereferralfiatpaid(authorization, opts = {})
      data, _status_code, _headers = v1userexchangereferralfiatpaid_with_http_info(authorization, opts)
      return data
    end

    # Users Paid Fiat Referrals
    # Returns the Users Paid Fiat Referrals.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccCoinRefDataResponse, Fixnum, Hash)>] SuccCoinRefDataResponse data, response status code and response headers
    def v1userexchangereferralfiatpaid_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangereferralfiatpaid ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangereferralfiatpaid" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/referral/fiat/paid".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccCoinRefDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangereferralfiatpaid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Users Referral Links
    # Gets Users Referral Links that can be used during signup.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [AllRefDataResponse]
    def v1userexchangereferrals(authorization, opts = {})
      data, _status_code, _headers = v1userexchangereferrals_with_http_info(authorization, opts)
      return data
    end

    # Gets Users Referral Links
    # Gets Users Referral Links that can be used during signup.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(AllRefDataResponse, Fixnum, Hash)>] AllRefDataResponse data, response status code and response headers
    def v1userexchangereferrals_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangereferrals ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangereferrals" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/referrals".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllRefDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangereferrals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Trade Summary
    # Gets a Summary of Exchange Trade Data.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeSummaryDataResponse]
    def v1userexchangetradesummary(authorization, opts = {})
      data, _status_code, _headers = v1userexchangetradesummary_with_http_info(authorization, opts)
      return data
    end

    # Exchange Trade Summary
    # Gets a Summary of Exchange Trade Data.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeSummaryDataResponse, Fixnum, Hash)>] TradeSummaryDataResponse data, response status code and response headers
    def v1userexchangetradesummary_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userexchangetradesummary ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userexchangetradesummary" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/trade/summary".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeSummaryDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userexchangetradesummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login Token Email
    # Retrieves details of a Login Token
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userlogintoken_token(token, opts = {})
      data, _status_code, _headers = v1userlogintoken_token_with_http_info(token, opts)
      return data
    end

    # Login Token Email
    # Retrieves details of a Login Token
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userlogintoken_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userlogintoken_token ..."
      end
      # verify the required parameter 'token' is set
      fail ArgumentError, "Missing the required parameter 'token' when calling AccountDataApi.v1userlogintoken_token" if token.nil?
      # resource path
      local_var_path = "/v1/user/login/token/{token}".sub('{format}','json').sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userlogintoken_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [UserSummaryDataResponse]
    def v1usersummary(authorization, opts = {})
      data, _status_code, _headers = v1usersummary_with_http_info(authorization, opts)
      return data
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(UserSummaryDataResponse, Fixnum, Hash)>] UserSummaryDataResponse data, response status code and response headers
    def v1usersummary_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1usersummary ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1usersummary" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/summary".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserSummaryDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1usersummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [WalletSummaryDataResponse]
    def v1userwalletsummary(authorization, opts = {})
      data, _status_code, _headers = v1userwalletsummary_with_http_info(authorization, opts)
      return data
    end

    # Exchange Bank Summary
    # Gets a Summary of Exchange Bank Data and Balances.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(WalletSummaryDataResponse, Fixnum, Hash)>] WalletSummaryDataResponse data, response status code and response headers
    def v1userwalletsummary_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountDataApi.v1userwalletsummary ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountDataApi.v1userwalletsummary" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/wallet/summary".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletSummaryDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountDataApi#v1userwalletsummary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
