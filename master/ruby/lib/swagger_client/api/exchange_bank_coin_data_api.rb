=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ExchangeBankCoinDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Exchange Coin Addresses
    # Gets a List of Users Exchange Bitcoin Deposit Addresses.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeAddressDataResponse]
    def v1userexchangebankcoinaddresses(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinaddresses_with_http_info(authorization, opts)
      return data
    end

    # Exchange Coin Addresses
    # Gets a List of Users Exchange Bitcoin Deposit Addresses.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeAddressDataResponse, Fixnum, Hash)>] TradeAddressDataResponse data, response status code and response headers
    def v1userexchangebankcoinaddresses_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinaddresses ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinaddresses" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/addresses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeAddressDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinaddresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Available Exchange Coin Balance
    # Returns balance which is in Available for Trades. The response is in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [VolDataResponse]
    def v1userexchangebankcoinbalanceavailable(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinbalanceavailable_with_http_info(authorization, opts)
      return data
    end

    # Available Exchange Coin Balance
    # Returns balance which is in Available for Trades. The response is in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(VolDataResponse, Fixnum, Hash)>] VolDataResponse data, response status code and response headers
    def v1userexchangebankcoinbalanceavailable_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinbalanceavailable ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinbalanceavailable" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/balance/total".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinbalanceavailable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # In Trade Coin Balance
    # Returns in-trade or pending coin balance in satoshi.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [VolDataResponse]
    def v1userexchangebankcoinbalancepending(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinbalancepending_with_http_info(authorization, opts)
      return data
    end

    # In Trade Coin Balance
    # Returns in-trade or pending coin balance in satoshi.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(VolDataResponse, Fixnum, Hash)>] VolDataResponse data, response status code and response headers
    def v1userexchangebankcoinbalancepending_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinbalancepending ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinbalancepending" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/balance/pending".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinbalancepending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Total Exchange Coin Balance
    # Returns users total coin balance in satoshis. Pending + Available
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [VolDataResponse]
    def v1userexchangebankcoinbalancetotal(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinbalancetotal_with_http_info(authorization, opts)
      return data
    end

    # Total Exchange Coin Balance
    # Returns users total coin balance in satoshis. Pending + Available
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(VolDataResponse, Fixnum, Hash)>] VolDataResponse data, response status code and response headers
    def v1userexchangebankcoinbalancetotal_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinbalancetotal ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinbalancetotal" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/balance/available".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VolDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinbalancetotal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled Exchange Coin Deposits
    # Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [CoinDepDataResponse]
    def v1userexchangebankcoindepositcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoindepositcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled Exchange Coin Deposits
    # Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(CoinDepDataResponse, Fixnum, Hash)>] CoinDepDataResponse data, response status code and response headers
    def v1userexchangebankcoindepositcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoindepositcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoindepositcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/deposit/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CoinDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoindepositcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unverified Exchange Coin Deposits
    # Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [CoinDepDataResponse]
    def v1userexchangebankcoindepositunverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoindepositunverified_with_http_info(authorization, opts)
      return data
    end

    # Unverified Exchange Coin Deposits
    # Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(CoinDepDataResponse, Fixnum, Hash)>] CoinDepDataResponse data, response status code and response headers
    def v1userexchangebankcoindepositunverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoindepositunverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoindepositunverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/deposit/unverified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CoinDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoindepositunverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verified Exchange Coin Deposits
    # Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [CoinDepDataResponse]
    def v1userexchangebankcoindepositverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoindepositverified_with_http_info(authorization, opts)
      return data
    end

    # Verified Exchange Coin Deposits
    # Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(CoinDepDataResponse, Fixnum, Hash)>] CoinDepDataResponse data, response status code and response headers
    def v1userexchangebankcoindepositverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoindepositverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoindepositverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/deposit/verified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CoinDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoindepositverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled Exchange Coin Withdrawals
    # Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeCoinWithdrawDataResponse]
    def v1userexchangebankcoinwithdrawcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinwithdrawcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled Exchange Coin Withdrawals
    # Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeCoinWithdrawDataResponse, Fixnum, Hash)>] TradeCoinWithdrawDataResponse data, response status code and response headers
    def v1userexchangebankcoinwithdrawcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/withdraw/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeCoinWithdrawDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinwithdrawcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completed Exchange Coin Withdrawals
    # Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeCoinWithdrawDataResponse]
    def v1userexchangebankcoinwithdrawcompleted(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinwithdrawcompleted_with_http_info(authorization, opts)
      return data
    end

    # Completed Exchange Coin Withdrawals
    # Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeCoinWithdrawDataResponse, Fixnum, Hash)>] TradeCoinWithdrawDataResponse data, response status code and response headers
    def v1userexchangebankcoinwithdrawcompleted_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawcompleted ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawcompleted" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/withdraw/completed".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeCoinWithdrawDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinwithdrawcompleted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unverified Exchange Coin Withdrawals
    # Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeCoinWithdrawDataResponse]
    def v1userexchangebankcoinwithdrawunverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinwithdrawunverified_with_http_info(authorization, opts)
      return data
    end

    # Unverified Exchange Coin Withdrawals
    # Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeCoinWithdrawDataResponse, Fixnum, Hash)>] TradeCoinWithdrawDataResponse data, response status code and response headers
    def v1userexchangebankcoinwithdrawunverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawunverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawunverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/withdraw/unverified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeCoinWithdrawDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinwithdrawunverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verified Exchange Coin Withdrawals
    # Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [TradeCoinWithdrawDataResponse]
    def v1userexchangebankcoinwithdrawverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankcoinwithdrawverified_with_http_info(authorization, opts)
      return data
    end

    # Verified Exchange Coin Withdrawals
    # Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(TradeCoinWithdrawDataResponse, Fixnum, Hash)>] TradeCoinWithdrawDataResponse data, response status code and response headers
    def v1userexchangebankcoinwithdrawverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankCoinDataApi.v1userexchangebankcoinwithdrawverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/coin/withdraw/verified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TradeCoinWithdrawDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankCoinDataApi#v1userexchangebankcoinwithdrawverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
