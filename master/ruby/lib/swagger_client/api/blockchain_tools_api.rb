=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class BlockchainToolsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Search Bitcoin Blockchain
    # Searches for a Bitcoin Address, Netki Wallet Name or Transaction ID.
    # @param any 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [ValidAddressSearchDataResponse]
    def v1bitcoinsearch_address(any, opts = {})
      data, _status_code, _headers = v1bitcoinsearch_address_with_http_info(any, opts)
      return data
    end

    # Search Bitcoin Blockchain
    # Searches for a Bitcoin Address, Netki Wallet Name or Transaction ID.
    # @param any 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(ValidAddressSearchDataResponse, Fixnum, Hash)>] ValidAddressSearchDataResponse data, response status code and response headers
    def v1bitcoinsearch_address_with_http_info(any, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BlockchainToolsApi.v1bitcoinsearch_address ..."
      end
      # verify the required parameter 'any' is set
      fail ArgumentError, "Missing the required parameter 'any' when calling BlockchainToolsApi.v1bitcoinsearch_address" if any.nil?
      # resource path
      local_var_path = "/v1/bitcoin/search/{any}".sub('{format}','json').sub('{' + 'any' + '}', any.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidAddressSearchDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainToolsApi#v1bitcoinsearch_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Confirmations
    # Searches for a Number of Confirmations on a transaction ID.
    # @param txid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [ConfirmDataResponse]
    def v1bitcoinsearch_txid(txid, opts = {})
      data, _status_code, _headers = v1bitcoinsearch_txid_with_http_info(txid, opts)
      return data
    end

    # Get Confirmations
    # Searches for a Number of Confirmations on a transaction ID.
    # @param txid 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(ConfirmDataResponse, Fixnum, Hash)>] ConfirmDataResponse data, response status code and response headers
    def v1bitcoinsearch_txid_with_http_info(txid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BlockchainToolsApi.v1bitcoinsearch_txid ..."
      end
      # verify the required parameter 'txid' is set
      fail ArgumentError, "Missing the required parameter 'txid' when calling BlockchainToolsApi.v1bitcoinsearch_txid" if txid.nil?
      # resource path
      local_var_path = "/v1/bitcoin/search/confirmation/{txid}".sub('{format}','json').sub('{' + 'txid' + '}', txid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfirmDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockchainToolsApi#v1bitcoinsearch_txid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
