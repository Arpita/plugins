=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ExchangeTradeDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Lowest Ask
    # Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDataResponse]
    def v1exchangeasklow(opts = {})
      data, _status_code, _headers = v1exchangeasklow_with_http_info(opts)
      return data
    end

    # Lowest Ask
    # Returns the Lowest Ask Rate in Json. The Amount is in Paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDataResponse, Fixnum, Hash)>] RateDataResponse data, response status code and response headers
    def v1exchangeasklow_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangeasklow ..."
      end
      # resource path
      local_var_path = "/v1/exchange/ask/low".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangeasklow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All Sell Orders
    # Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateVolDataResponse]
    def v1exchangeaskorders(opts = {})
      data, _status_code, _headers = v1exchangeaskorders_with_http_info(opts)
      return data
    end

    # All Sell Orders
    # Returns all Ask Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateVolDataResponse, Fixnum, Hash)>] RateVolDataResponse data, response status code and response headers
    def v1exchangeaskorders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangeaskorders ..."
      end
      # resource path
      local_var_path = "/v1/exchange/ask/orders".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateVolDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangeaskorders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the Highest Bid in the Order Book
    # Highest Bid.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDataResponse]
    def v1exchangebidhigh(opts = {})
      data, _status_code, _headers = v1exchangebidhigh_with_http_info(opts)
      return data
    end

    # Returns the Highest Bid in the Order Book
    # Highest Bid.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDataResponse, Fixnum, Hash)>] RateDataResponse data, response status code and response headers
    def v1exchangebidhigh_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangebidhigh ..."
      end
      # resource path
      local_var_path = "/v1/exchange/bid/high".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangebidhigh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All Buy Orders
    # Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateVolDataResponse]
    def v1exchangebidorders(opts = {})
      data, _status_code, _headers = v1exchangebidorders_with_http_info(opts)
      return data
    end

    # All Buy Orders
    # Returns all Bid Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateVolDataResponse, Fixnum, Hash)>] RateVolDataResponse data, response status code and response headers
    def v1exchangebidorders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangebidorders ..."
      end
      # resource path
      local_var_path = "/v1/exchange/bid/orders".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateVolDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangebidorders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Last Trade
    # Returns a summary of data from the Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [LastTradeDataResponse]
    def v1exchangelast_trade(opts = {})
      data, _status_code, _headers = v1exchangelast_trade_with_http_info(opts)
      return data
    end

    # Last Trade
    # Returns a summary of data from the Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(LastTradeDataResponse, Fixnum, Hash)>] LastTradeDataResponse data, response status code and response headers
    def v1exchangelast_trade_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangelast_trade ..."
      end
      # resource path
      local_var_path = "/v1/exchange/lastTrade".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastTradeDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangelast_trade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Max 24 Hour Rate
    # Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDiffDataResponse]
    def v1exchangemax24_hr(opts = {})
      data, _status_code, _headers = v1exchangemax24_hr_with_http_info(opts)
      return data
    end

    # Max 24 Hour Rate
    # Returns the highest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDiffDataResponse, Fixnum, Hash)>] RateDiffDataResponse data, response status code and response headers
    def v1exchangemax24_hr_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangemax24_hr ..."
      end
      # resource path
      local_var_path = "/v1/exchange/max24Hr".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDiffDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangemax24_hr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Min 24 Hour Rate
    # Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDiffDataResponse]
    def v1exchangemin24_hr(opts = {})
      data, _status_code, _headers = v1exchangemin24_hr_with_http_info(opts)
      return data
    end

    # Min 24 Hour Rate
    # Returns the lowest rate over the last 24 hours with the 10 minutely difference. The values are in paisa.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDiffDataResponse, Fixnum, Hash)>] RateDiffDataResponse data, response status code and response headers
    def v1exchangemin24_hr_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangemin24_hr ..."
      end
      # resource path
      local_var_path = "/v1/exchange/min24Hr".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDiffDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangemin24_hr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchange Ticker
    # Returns a summary of data from the Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [StandardTickerResultData]
    def v1exchangeticker(opts = {})
      data, _status_code, _headers = v1exchangeticker_with_http_info(opts)
      return data
    end

    # Exchange Ticker
    # Returns a summary of data from the Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(StandardTickerResultData, Fixnum, Hash)>] StandardTickerResultData data, response status code and response headers
    def v1exchangeticker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1exchangeticker ..."
      end
      # resource path
      local_var_path = "/v1/exchange/ticker".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardTickerResultData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1exchangeticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled User Sell Orders
    # Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangeaskcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangeaskcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled User Sell Orders
    # Returns all Cancelled User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangeaskcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangeaskcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangeaskcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/ask/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangeaskcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completed User Sell Orders
    # Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangeaskcompleted(authorization, opts = {})
      data, _status_code, _headers = v1userexchangeaskcompleted_with_http_info(authorization, opts)
      return data
    end

    # Completed User Sell Orders
    # Returns all completed Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangeaskcompleted_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangeaskcompleted ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangeaskcompleted" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/ask/completed".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangeaskcompleted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pending User Sell Orders
    # Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangeaskpending(authorization, opts = {})
      data, _status_code, _headers = v1userexchangeaskpending_with_http_info(authorization, opts)
      return data
    end

    # Pending User Sell Orders
    # Returns all Open User Sell Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangeaskpending_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangeaskpending ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangeaskpending" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/ask/pending".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangeaskpending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled User Buy Orders
    # Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangebidcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebidcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled User Buy Orders
    # Returns all Cancelled User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangebidcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangebidcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangebidcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bid/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangebidcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completed User Buy Orders
    # Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangebidcompleted(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebidcompleted_with_http_info(authorization, opts)
      return data
    end

    # Completed User Buy Orders
    # Returns all completed Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangebidcompleted_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangebidcompleted ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangebidcompleted" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bid/completed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangebidcompleted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pending User Buy Orders
    # Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [OrderDataResponse]
    def v1userexchangebidpending(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebidpending_with_http_info(authorization, opts)
      return data
    end

    # Pending User Buy Orders
    # Returns all Open User Buy Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(OrderDataResponse, Fixnum, Hash)>] OrderDataResponse data, response status code and response headers
    def v1userexchangebidpending_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangebidpending ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeTradeDataApi.v1userexchangebidpending" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bid/pending".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangebidpending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completed Exchange Trades
    # Returns all completed Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateVolTimeTypeDataResponse]
    def v1userexchangetrades(opts = {})
      data, _status_code, _headers = v1userexchangetrades_with_http_info(opts)
      return data
    end

    # Completed Exchange Trades
    # Returns all completed Orders in Json. The Rate is displayed in Paisa and Volume in Satoshis.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateVolTimeTypeDataResponse, Fixnum, Hash)>] RateVolTimeTypeDataResponse data, response status code and response headers
    def v1userexchangetrades_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeTradeDataApi.v1userexchangetrades ..."
      end
      # resource path
      local_var_path = "/v1/exchange/trades".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateVolTimeTypeDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeTradeDataApi#v1userexchangetrades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
