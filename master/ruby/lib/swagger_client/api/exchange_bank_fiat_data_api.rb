=begin
Coinsecure Api Documentation

To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: 1.0b

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ExchangeBankFiatDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Exchange Bitcoin Deposit Addresses
    # Gets a List of Users Exchange Bitcoin Addresses.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatBankDataResponse]
    def v1userexchangebankfiataccounts(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiataccounts_with_http_info(authorization, opts)
      return data
    end

    # Exchange Bitcoin Deposit Addresses
    # Gets a List of Users Exchange Bitcoin Addresses.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatBankDataResponse, Fixnum, Hash)>] FiatBankDataResponse data, response status code and response headers
    def v1userexchangebankfiataccounts_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiataccounts ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiataccounts" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/accounts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatBankDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiataccounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Available Exchange Fiat Balance
    # Returns balance which is in Available for Trades. The response is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDataResponse]
    def v1userexchangebankfiatbalanceavailable(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatbalanceavailable_with_http_info(authorization, opts)
      return data
    end

    # Available Exchange Fiat Balance
    # Returns balance which is in Available for Trades. The response is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDataResponse, Fixnum, Hash)>] RateDataResponse data, response status code and response headers
    def v1userexchangebankfiatbalanceavailable_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatbalanceavailable ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatbalanceavailable" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/balance/total".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatbalanceavailable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # In Trade Coin Balance
    # Returns in-trade or pending fiat balance in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDataResponse]
    def v1userexchangebankfiatbalancepending(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatbalancepending_with_http_info(authorization, opts)
      return data
    end

    # In Trade Coin Balance
    # Returns in-trade or pending fiat balance in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDataResponse, Fixnum, Hash)>] RateDataResponse data, response status code and response headers
    def v1userexchangebankfiatbalancepending_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatbalancepending ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatbalancepending" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/balance/pending".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatbalancepending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Total Exchange Fiat Balance
    # Returns users total fiat balance in paisa. Pending + Available
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [RateDataResponse]
    def v1userexchangebankfiatbalancetotal(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatbalancetotal_with_http_info(authorization, opts)
      return data
    end

    # Total Exchange Fiat Balance
    # Returns users total fiat balance in paisa. Pending + Available
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(RateDataResponse, Fixnum, Hash)>] RateDataResponse data, response status code and response headers
    def v1userexchangebankfiatbalancetotal_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatbalancetotal ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatbalancetotal" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/balance/available".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatbalancetotal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled Exchange Fiat Deposits
    # Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatDepDataResponse]
    def v1userexchangebankfiatdepositcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatdepositcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled Exchange Fiat Deposits
    # Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatDepDataResponse, Fixnum, Hash)>] FiatDepDataResponse data, response status code and response headers
    def v1userexchangebankfiatdepositcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatdepositcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatdepositcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/deposit/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatdepositcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unverified Exchange Fiat Deposits
    # Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatDepDataResponse]
    def v1userexchangebankfiatdepositunverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatdepositunverified_with_http_info(authorization, opts)
      return data
    end

    # Unverified Exchange Fiat Deposits
    # Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatDepDataResponse, Fixnum, Hash)>] FiatDepDataResponse data, response status code and response headers
    def v1userexchangebankfiatdepositunverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatdepositunverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatdepositunverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/deposit/unverified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatdepositunverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verified Exchange Fiat Deposits
    # Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatDepDataResponse]
    def v1userexchangebankfiatdepositverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatdepositverified_with_http_info(authorization, opts)
      return data
    end

    # Verified Exchange Fiat Deposits
    # Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatDepDataResponse, Fixnum, Hash)>] FiatDepDataResponse data, response status code and response headers
    def v1userexchangebankfiatdepositverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatdepositverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatdepositverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/deposit/verified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatDepDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatdepositverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelled Exchange Fiat Withdrawals
    # Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatWithDataResponse]
    def v1userexchangebankfiatwithdrawcancelled(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatwithdrawcancelled_with_http_info(authorization, opts)
      return data
    end

    # Cancelled Exchange Fiat Withdrawals
    # Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatWithDataResponse, Fixnum, Hash)>] FiatWithDataResponse data, response status code and response headers
    def v1userexchangebankfiatwithdrawcancelled_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawcancelled ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawcancelled" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/withdraw/cancelled".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatWithDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatwithdrawcancelled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completed Exchange Fiat Withdrawals
    # Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatWithDataResponse]
    def v1userexchangebankfiatwithdrawcompleted(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatwithdrawcompleted_with_http_info(authorization, opts)
      return data
    end

    # Completed Exchange Fiat Withdrawals
    # Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatWithDataResponse, Fixnum, Hash)>] FiatWithDataResponse data, response status code and response headers
    def v1userexchangebankfiatwithdrawcompleted_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawcompleted ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawcompleted" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/withdraw/completed".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatWithDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatwithdrawcompleted\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unverified Exchange Fiat Withdrawals
    # Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatWithDataResponse]
    def v1userexchangebankfiatwithdrawunverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatwithdrawunverified_with_http_info(authorization, opts)
      return data
    end

    # Unverified Exchange Fiat Withdrawals
    # Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatWithDataResponse, Fixnum, Hash)>] FiatWithDataResponse data, response status code and response headers
    def v1userexchangebankfiatwithdrawunverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawunverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawunverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/withdraw/unverified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatWithDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatwithdrawunverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verified Exchange Fiat Withdrawals
    # Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional) (default to 0)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional) (default to 9223372036854776000)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional) (default to 10)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional) (default to 0)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [FiatWithDataResponse]
    def v1userexchangebankfiatwithdrawverified(authorization, opts = {})
      data, _status_code, _headers = v1userexchangebankfiatwithdrawverified_with_http_info(authorization, opts)
      return data
    end

    # Verified Exchange Fiat Withdrawals
    # Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
    # @param authorization API object to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
    # @option opts [Integer] :max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
    # @option opts [Integer] :offset Offset defaults to 0 if input is invalid. (Optional)
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(FiatWithDataResponse, Fixnum, Hash)>] FiatWithDataResponse data, response status code and response headers
    def v1userexchangebankfiatwithdrawverified_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawverified ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ExchangeBankFiatDataApi.v1userexchangebankfiatwithdrawverified" if authorization.nil?
      # resource path
      local_var_path = "/v1/user/exchange/bank/fiat/withdraw/verified".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if opts[:'from']
      query_params[:'to'] = opts[:'to'] if opts[:'to']
      query_params[:'max'] = opts[:'max'] if opts[:'max']
      query_params[:'offset'] = opts[:'offset'] if opts[:'offset']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = authorization
      header_params[:'accept'] = opts[:'accept'] if opts[:'accept']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FiatWithDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeBankFiatDataApi#v1userexchangebankfiatwithdrawverified\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
