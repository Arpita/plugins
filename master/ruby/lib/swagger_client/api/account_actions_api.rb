=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class AccountActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a Login Instance and returns an API Key.
    # Creates a Login Instance and returns an API Key
    # @param body Please send the form with valid inputs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [StandardLoginResultData]
    def v1login(body, opts = {})
      data, _status_code, _headers = v1login_with_http_info(body, opts)
      return data
    end

    # Creates a Login Instance and returns an API Key.
    # Creates a Login Instance and returns an API Key
    # @param body Please send the form with valid inputs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(StandardLoginResultData, Fixnum, Hash)>] StandardLoginResultData data, response status code and response headers
    def v1login_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1login ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1login" if body.nil?
      # resource path
      local_var_path = "/v1/login".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardLoginResultData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate Login
    # Sends an Email with a Verification Link.
    # @param body Enter a valid Login ID. This method will send an email with a token to be used for login.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [StandardInitiateLoginResultData]
    def v1logininitiate(body, opts = {})
      data, _status_code, _headers = v1logininitiate_with_http_info(body, opts)
      return data
    end

    # Initiate Login
    # Sends an Email with a Verification Link.
    # @param body Enter a valid Login ID. This method will send an email with a token to be used for login.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(StandardInitiateLoginResultData, Fixnum, Hash)>] StandardInitiateLoginResultData data, response status code and response headers
    def v1logininitiate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1logininitiate ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1logininitiate" if body.nil?
      # resource path
      local_var_path = "/v1/login/initiate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardInitiateLoginResultData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1logininitiate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an email with a password reset token
    # Sends an email with a password reset token
    # @param body Enter a valid and registered Email ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1loginpasswordforgot(body, opts = {})
      data, _status_code, _headers = v1loginpasswordforgot_with_http_info(body, opts)
      return data
    end

    # Sends an email with a password reset token
    # Sends an email with a password reset token
    # @param body Enter a valid and registered Email ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1loginpasswordforgot_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1loginpasswordforgot ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1loginpasswordforgot" if body.nil?
      # resource path
      local_var_path = "/v1/login/password/forgot".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1loginpasswordforgot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new Unverified Account.
    # Creates a new Unverified Account.
    # @param body Please send the form with valid inputs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1signup(body, opts = {})
      data, _status_code, _headers = v1signup_with_http_info(body, opts)
      return data
    end

    # Creates a new Unverified Account.
    # Creates a new Unverified Account.
    # @param body Please send the form with valid inputs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1signup_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1signup ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1signup" if body.nil?
      # resource path
      local_var_path = "/v1/signup".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies an Email token for Signup .
    # Creates a new Coinsecure Account.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [StandardVerifySignupResultData]
    def v1signupverify_token(token, opts = {})
      data, _status_code, _headers = v1signupverify_token_with_http_info(token, opts)
      return data
    end

    # Verifies an Email token for Signup .
    # Creates a new Coinsecure Account.
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(StandardVerifySignupResultData, Fixnum, Hash)>] StandardVerifySignupResultData data, response status code and response headers
    def v1signupverify_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1signupverify_token ..."
      end
      # verify the required parameter 'token' is set
      fail ArgumentError, "Missing the required parameter 'token' when calling AccountActionsApi.v1signupverify_token" if token.nil?
      # resource path
      local_var_path = "/v1/signup/verify/{token}".sub('{format}','json').sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardVerifySignupResultData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1signupverify_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send OTP for Bank Link
    # Send OTP for an additional Bank Link.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [StandardInitiateLoginResultData]
    def v1userbankotp_number(number, opts = {})
      data, _status_code, _headers = v1userbankotp_number_with_http_info(number, opts)
      return data
    end

    # Send OTP for Bank Link
    # Send OTP for an additional Bank Link.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(StandardInitiateLoginResultData, Fixnum, Hash)>] StandardInitiateLoginResultData data, response status code and response headers
    def v1userbankotp_number_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userbankotp_number ..."
      end
      # verify the required parameter 'number' is set
      fail ArgumentError, "Missing the required parameter 'number' when calling AccountActionsApi.v1userbankotp_number" if number.nil?
      # resource path
      local_var_path = "/v1/user/bank/otp/{number}".sub('{format}','json').sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardInitiateLoginResultData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userbankotp_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submits a New Bank Link and initial KYC Documents.
    # Submits a New Bank Link and initial KYC Documents.
    # @param pan_number Please enter your Pan Card Number
    # @param acct_nick Please enter an Account NickName
    # @param name Please enter your Name as it appears on your Bank account.
    # @param ban Please enter your Bank account number.
    # @param ifsc Please enter your IFSC Code.
    # @param acct_type Please enter your Coinsecure account type. Allowable Values are Personal or Company.
    # @param ban_type Please enter your Bank account type. Allowable Values are Savings or Current.
    # @param phone Please enter your Valid Phone Number.
    # @param otp Please enter your OTP from SMS. The code can be requested from /v1/user/kyc/otp/:number.
    # @param file Enter a valid image, pdf or zip file under 5 MB in size.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :message Please enter an optional message if needed.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userexchangekyc(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, opts = {})
      data, _status_code, _headers = v1userexchangekyc_with_http_info(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, opts)
      return data
    end

    # Submits a New Bank Link and initial KYC Documents.
    # Submits a New Bank Link and initial KYC Documents.
    # @param pan_number Please enter your Pan Card Number
    # @param acct_nick Please enter an Account NickName
    # @param name Please enter your Name as it appears on your Bank account.
    # @param ban Please enter your Bank account number.
    # @param ifsc Please enter your IFSC Code.
    # @param acct_type Please enter your Coinsecure account type. Allowable Values are Personal or Company.
    # @param ban_type Please enter your Bank account type. Allowable Values are Savings or Current.
    # @param phone Please enter your Valid Phone Number.
    # @param otp Please enter your OTP from SMS. The code can be requested from /v1/user/kyc/otp/:number.
    # @param file Enter a valid image, pdf or zip file under 5 MB in size.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :message Please enter an optional message if needed.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userexchangekyc_with_http_info(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userexchangekyc ..."
      end
      # verify the required parameter 'pan_number' is set
      fail ArgumentError, "Missing the required parameter 'pan_number' when calling AccountActionsApi.v1userexchangekyc" if pan_number.nil?
      # verify the required parameter 'acct_nick' is set
      fail ArgumentError, "Missing the required parameter 'acct_nick' when calling AccountActionsApi.v1userexchangekyc" if acct_nick.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling AccountActionsApi.v1userexchangekyc" if name.nil?
      # verify the required parameter 'ban' is set
      fail ArgumentError, "Missing the required parameter 'ban' when calling AccountActionsApi.v1userexchangekyc" if ban.nil?
      # verify the required parameter 'ifsc' is set
      fail ArgumentError, "Missing the required parameter 'ifsc' when calling AccountActionsApi.v1userexchangekyc" if ifsc.nil?
      # verify the required parameter 'acct_type' is set
      fail ArgumentError, "Missing the required parameter 'acct_type' when calling AccountActionsApi.v1userexchangekyc" if acct_type.nil?
      # verify the required parameter 'ban_type' is set
      fail ArgumentError, "Missing the required parameter 'ban_type' when calling AccountActionsApi.v1userexchangekyc" if ban_type.nil?
      # verify the required parameter 'phone' is set
      fail ArgumentError, "Missing the required parameter 'phone' when calling AccountActionsApi.v1userexchangekyc" if phone.nil?
      # verify the required parameter 'otp' is set
      fail ArgumentError, "Missing the required parameter 'otp' when calling AccountActionsApi.v1userexchangekyc" if otp.nil?
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling AccountActionsApi.v1userexchangekyc" if file.nil?
      # resource path
      local_var_path = "/v1/user/exchange/kyc".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}
      form_params["panNumber"] = pan_number
      form_params["acctNick"] = acct_nick
      form_params["name"] = name
      form_params["ban"] = ban
      form_params["ifsc"] = ifsc
      form_params["acctType"] = acct_type
      form_params["banType"] = ban_type
      form_params["phone"] = phone
      form_params["otp"] = otp
      form_params["file"] = file
      form_params["message"] = opts[:'message'] if !opts[:'message'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userexchangekyc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete GCM Code
    # Delete GCM Code and associated API Key.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1usergcm_code(code, opts = {})
      data, _status_code, _headers = v1usergcm_code_with_http_info(code, opts)
      return data
    end

    # Delete GCM Code
    # Delete GCM Code and associated API Key.
    # @param code 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1usergcm_code_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1usergcm_code ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling AccountActionsApi.v1usergcm_code" if code.nil?
      # resource path
      local_var_path = "/v1/user/gcm/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1usergcm_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send OTP for KYC Link
    # Send OTP for KYC Link.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userkycotp_number(number, opts = {})
      data, _status_code, _headers = v1userkycotp_number_with_http_info(number, opts)
      return data
    end

    # Send OTP for KYC Link
    # Send OTP for KYC Link.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userkycotp_number_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userkycotp_number ..."
      end
      # verify the required parameter 'number' is set
      fail ArgumentError, "Missing the required parameter 'number' when calling AccountActionsApi.v1userkycotp_number" if number.nil?
      # resource path
      local_var_path = "/v1/user/kyc/otp/{number}".sub('{format}','json').sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userkycotp_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout User
    # Logs out user and Deletes the api key and associated session data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userlogout(opts = {})
      data, _status_code, _headers = v1userlogout_with_http_info(opts)
      return data
    end

    # Logout User
    # Logs out user and Deletes the api key and associated session data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userlogout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userlogout ..."
      end
      # resource path
      local_var_path = "/v1/user/logout".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userlogout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Neki Wallet Name
    # Creates a new Netki Wallet Name.
    # @param body Enter a valid Netki name and Bitcoin address from Wallet or Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1usernetkicreate(body, opts = {})
      data, _status_code, _headers = v1usernetkicreate_with_http_info(body, opts)
      return data
    end

    # Create Neki Wallet Name
    # Creates a new Netki Wallet Name.
    # @param body Enter a valid Netki name and Bitcoin address from Wallet or Exchange.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1usernetkicreate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1usernetkicreate ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1usernetkicreate" if body.nil?
      # resource path
      local_var_path = "/v1/user/netki/create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1usernetkicreate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Netki Address
    # Updates the address on an existing wallet name.
    # @param body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1usernetkiupdate(body, opts = {})
      data, _status_code, _headers = v1usernetkiupdate_with_http_info(body, opts)
      return data
    end

    # Update Netki Address
    # Updates the address on an existing wallet name.
    # @param body Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1usernetkiupdate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1usernetkiupdate ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1usernetkiupdate" if body.nil?
      # resource path
      local_var_path = "/v1/user/netki/update".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1usernetkiupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Profile Image
    # Deletes a profile Image.
    # @param netki_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userprofileimagedelete_netki_name(netki_name, opts = {})
      data, _status_code, _headers = v1userprofileimagedelete_netki_name_with_http_info(netki_name, opts)
      return data
    end

    # Delete Profile Image
    # Deletes a profile Image.
    # @param netki_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userprofileimagedelete_netki_name_with_http_info(netki_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userprofileimagedelete_netki_name ..."
      end
      # verify the required parameter 'netki_name' is set
      fail ArgumentError, "Missing the required parameter 'netki_name' when calling AccountActionsApi.v1userprofileimagedelete_netki_name" if netki_name.nil?
      # resource path
      local_var_path = "/v1/user/profile/image/delete/{netkiName}".sub('{format}','json').sub('{' + 'netkiName' + '}', netki_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userprofileimagedelete_netki_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Profile Image
    # Updates Profile Image and allows public or private options for netki profile page.
    # @param netki_name Please enter your Netki Wallet Name.
    # @param is_public Please enter if this image can be public.
    # @param file Enter a valid image, pdf or zip file under 5 MB in size.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userprofileimageupdate(netki_name, is_public, file, opts = {})
      data, _status_code, _headers = v1userprofileimageupdate_with_http_info(netki_name, is_public, file, opts)
      return data
    end

    # Update Profile Image
    # Updates Profile Image and allows public or private options for netki profile page.
    # @param netki_name Please enter your Netki Wallet Name.
    # @param is_public Please enter if this image can be public.
    # @param file Enter a valid image, pdf or zip file under 5 MB in size.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userprofileimageupdate_with_http_info(netki_name, is_public, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userprofileimageupdate ..."
      end
      # verify the required parameter 'netki_name' is set
      fail ArgumentError, "Missing the required parameter 'netki_name' when calling AccountActionsApi.v1userprofileimageupdate" if netki_name.nil?
      # verify the required parameter 'is_public' is set
      fail ArgumentError, "Missing the required parameter 'is_public' when calling AccountActionsApi.v1userprofileimageupdate" if is_public.nil?
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling AccountActionsApi.v1userprofileimageupdate" if file.nil?
      # resource path
      local_var_path = "/v1/user/profile/image/update".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['multipart/form-data']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}
      form_params["netkiName"] = netki_name
      form_params["isPublic"] = is_public
      form_params["file"] = file

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userprofileimageupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # New Profile Phone
    # Set a New Profile Phone Number.
    # @param body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userprofilephone(body, opts = {})
      data, _status_code, _headers = v1userprofilephone_with_http_info(body, opts)
      return data
    end

    # New Profile Phone
    # Set a New Profile Phone Number.
    # @param body You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Enter a valid Api Key.
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userprofilephone_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userprofilephone ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccountActionsApi.v1userprofilephone" if body.nil?
      # resource path
      local_var_path = "/v1/user/profile/phone/new".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userprofilephone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Profile Phone Number
    # Delete Profile Phone Number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userprofilephone_number(opts = {})
      data, _status_code, _headers = v1userprofilephone_number_with_http_info(opts)
      return data
    end

    # Delete Profile Phone Number
    # Delete Profile Phone Number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userprofilephone_number_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userprofilephone_number ..."
      end
      # resource path
      local_var_path = "/v1/user/profile/phone/delete".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userprofilephone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send OTP for Profile Phone
    # Send OTP for Profile Phone addition or updation.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [SuccessResult]
    def v1userprofilephoneotp_number(number, opts = {})
      data, _status_code, _headers = v1userprofilephoneotp_number_with_http_info(number, opts)
      return data
    end

    # Send OTP for Profile Phone
    # Send OTP for Profile Phone addition or updation.
    # @param number 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization API object to be added
    # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
    # @return [Array<(SuccessResult, Fixnum, Hash)>] SuccessResult data, response status code and response headers
    def v1userprofilephoneotp_number_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountActionsApi.v1userprofilephoneotp_number ..."
      end
      # verify the required parameter 'number' is set
      fail ArgumentError, "Missing the required parameter 'number' when calling AccountActionsApi.v1userprofilephoneotp_number" if number.nil?
      # resource path
      local_var_path = "/v1/user/profile/phone/otp/{number}".sub('{format}','json').sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'application/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?
      header_params[:'accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountActionsApi#v1userprofilephoneotp_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
