=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ExchangeBankActionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExchangeBankActionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ExchangeBankActionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExchangeBankActionsApi' do
    it 'should create an instact of ExchangeBankActionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ExchangeBankActionsApi)
    end
  end

  # unit tests for v1userexchangebankcoinwithdrawinitiate
  # Initiate Bitcoin Withdrawal
  # The code for verifying the withdrawal can be called from /v1/exchange/bank/coin/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
  # @param body Please send the form with valid inputs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankcoinwithdrawinitiate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankcoinwithdrawnew_verifycode
  # Gets a Verification Code.
  # Gets Coin Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/coin/withdraw/verify.
  # @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/coin/withdraw/unverified
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization API object to be added
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankcoinwithdrawnew_verifycode test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankcoinwithdrawunverifiedcancel_withdraw_id
  # Cancel Bitcoin Withdrawal
  # Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/coin/withdraw/unverified.
  # @param withdraw_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankcoinwithdrawunverifiedcancel_withdraw_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankcoinwithdrawverify
  # Verify Bitcoin Withdrawal
  # Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
  # @param body You can get the code from /v1/user/exchange/bank/coin/withdraw/newVerifycode.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankcoinwithdrawverify test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiataccountnew
  # New Bank Link
  # Submits a New Bank Link on KYC Verified Accounts.
  # @param body Please send the form with valid inputs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiataccountnew test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatdepositcancel_deposit_id
  # Cancel Unverified Exchange Fiat Deposit
  # Cancels an unverified Exchange Fiat Deposit.
  # @param deposit_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatdepositcancel_deposit_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatdepositnew
  # New Exchange Fiat Deposit
  # Submits an unverified fiat deposit. No action will occur unless user cancels or bank notifies us of the payment.
  # @param body Please send the form with valid inputs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatdepositnew test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatwithdrawinitiate
  # Initiate Fiat Withdrawal
  # The code for verifying the withdrawal can be called from /v1/user/exchange/bank/fiat/withdraw/newVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
  # @param body Please send the form with valid inputs.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatwithdrawinitiate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatwithdrawnew_verifycode
  # Gets a Fiat Verification Code.
  # Gets Fiat Unverified Withdraws Codes to call and apply on /v1/user/exchange/bank/fiat/withdraw/verify.
  # @param body You can get unverified withdraw ID&#39;s from /v1/user/exchange/bank/fiat/withdraw/unverified
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization API object to be added
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatwithdrawnew_verifycode test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatwithdrawunverifiedcancel_withdraw_id
  # Cancel Fiat Withdrawal
  # Cancels an unverified withdrawal. You can get the WithdrawID from /v1/user/exchange/bank/fiat/withdraw/unverified.
  # @param withdraw_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatwithdrawunverifiedcancel_withdraw_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userexchangebankfiatwithdrawverify
  # Verify Fiat Withdrawal
  # Verifies an unverified withdrawal. You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode.
  # @param body You can get the code from /v1/user/exchange/bank/fiat/withdraw/newVerifycode
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userexchangebankfiatwithdrawverify test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
