=begin
#Coinsecure Api Documentation

#To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

OpenAPI spec version: beta

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::WalletActionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'WalletActionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::WalletActionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WalletActionsApi' do
    it 'should create an instact of WalletActionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::WalletActionsApi)
    end
  end

  # unit tests for v1userwalletcoinaddressnew
  # New Bitcoin Address
  # Generates a New Bitcoin Address to store coins.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [WalletAddressDataResponse]
  describe 'v1userwalletcoinaddressnew test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userwalletcoinnew
  # Create New Wallet
  # Creates a New wallet to store addresses. This method also creates a single default address in each new wallet.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [WalletAddressDataResponse]
  describe 'v1userwalletcoinnew test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userwalletcoinwithdrawinitiate
  # Initiate Bitcoin Withdrawal
  # The code for verifying the withdrawal can be called from /v1/wallet/withdrawVerifycode. May require a 2FA code if 2FA is enabled on the account. A mail is sent to the users email requesting confirmation of the withdrawal. This confirmation mail can be disabled on the Coinsecure Profile page.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userwalletcoinwithdrawinitiate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userwalletcoinwithdrawsend_to_exchange
  # Send to Exchange
  # This function transfers funds to yout Exchange Balance without the need for any confirmations.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Enter a valid Api Key.
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userwalletcoinwithdrawsend_to_exchange test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userwalletcoinwithdrawunverifiedcancel_withdraw_id
  # Cancel Bitcoin Withdrawal
  # Cancels an unverified withdrawal. You can get the code from /wallet/unverifiedWithdraws.
  # @param withdraw_id 
  # @param authorization Enter a valid Api Key.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userwalletcoinwithdrawunverifiedcancel_withdraw_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1userwalletcoinwithdrawverify
  # Verify Bitcoin Withdrawal
  # Verifies an unverified withdrawal. You can get the code from /v1/wallet/coin/withdraw/newVerifycode.
  # @param authorization Enter a valid Api Key.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1userwalletcoinwithdrawverify test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1walletcoinwithdrawnew_verifycode
  # Gets a Verification Code
  # Gets Coin Unverified Withdraws Codes to call and apply on /v1/wallet/coin/withdraw/unverified.
  # @param body You can get unverified withdraw ID&#39;s from /v1/exchange/bank/coin/withdrawVerifycode
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization API object to be added
  # @option opts [String] :accept JSON, XML or CSV can be returned (Optional)
  # @return [SuccessResult]
  describe 'v1walletcoinwithdrawnew_verifycode test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
