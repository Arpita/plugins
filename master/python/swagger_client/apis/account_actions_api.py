# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AccountActionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def v1login(self, body, **kwargs):
        """
        Creates a Login Instance and returns an API Key.
        Creates a Login Instance and returns an API Key

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1login(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoginFormNew body: Please send the form with valid inputs. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1login_with_http_info(body, **kwargs)
        else:
            (data) = self.v1login_with_http_info(body, **kwargs)
            return data

    def v1login_with_http_info(self, body, **kwargs):
        """
        Creates a Login Instance and returns an API Key.
        Creates a Login Instance and returns an API Key

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1login_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoginFormNew body: Please send the form with valid inputs. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1login`")

        resource_path = '/v1/login'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StandardLoginResultData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1logininitiate(self, body, **kwargs):
        """
        Initiate Login
        Sends an Email with a Verification Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1logininitiate(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoginId body: Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardInitiateLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1logininitiate_with_http_info(body, **kwargs)
        else:
            (data) = self.v1logininitiate_with_http_info(body, **kwargs)
            return data

    def v1logininitiate_with_http_info(self, body, **kwargs):
        """
        Initiate Login
        Sends an Email with a Verification Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1logininitiate_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoginId body: Enter a valid Login ID. This method will send an email with a token to be used for login. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardInitiateLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1logininitiate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1logininitiate`")

        resource_path = '/v1/login/initiate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StandardInitiateLoginResultData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1loginpasswordforgot(self, body, **kwargs):
        """
        Sends an email with a password reset token
        Sends an email with a password reset token

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1loginpasswordforgot(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Email body: Enter a valid and registered Email ID. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1loginpasswordforgot_with_http_info(body, **kwargs)
        else:
            (data) = self.v1loginpasswordforgot_with_http_info(body, **kwargs)
            return data

    def v1loginpasswordforgot_with_http_info(self, body, **kwargs):
        """
        Sends an email with a password reset token
        Sends an email with a password reset token

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1loginpasswordforgot_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Email body: Enter a valid and registered Email ID. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1loginpasswordforgot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1loginpasswordforgot`")

        resource_path = '/v1/login/password/forgot'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1signup(self, body, **kwargs):
        """
        Creates a new Unverified Account.
        Creates a new Unverified Account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1signup(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SignupForm body: Please send the form with valid inputs. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1signup_with_http_info(body, **kwargs)
        else:
            (data) = self.v1signup_with_http_info(body, **kwargs)
            return data

    def v1signup_with_http_info(self, body, **kwargs):
        """
        Creates a new Unverified Account.
        Creates a new Unverified Account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1signup_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SignupForm body: Please send the form with valid inputs. (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1signup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1signup`")

        resource_path = '/v1/signup'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userbankotp_number(self, number, **kwargs):
        """
        Send OTP for Bank Link
        Send OTP for an additional Bank Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userbankotp_number(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardInitiateLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userbankotp_number_with_http_info(number, **kwargs)
        else:
            (data) = self.v1userbankotp_number_with_http_info(number, **kwargs)
            return data

    def v1userbankotp_number_with_http_info(self, number, **kwargs):
        """
        Send OTP for Bank Link
        Send OTP for an additional Bank Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userbankotp_number_with_http_info(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: StandardInitiateLoginResultData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userbankotp_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params) or (params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `v1userbankotp_number`")

        resource_path = '/v1/user/bank/otp/{number}'.replace('{format}', 'json')
        path_params = {}
        if 'number' in params:
            path_params['number'] = params['number']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StandardInitiateLoginResultData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userexchangekyc(self, pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, **kwargs):
        """
        Submits a New Bank Link and initial KYC Documents.
        Submits a New Bank Link and initial KYC Documents.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangekyc(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pan_number: Please enter your Pan Card Number (required)
        :param str acct_nick: Please enter an Account NickName (required)
        :param str name: Please enter your Name as it appears on your Bank account. (required)
        :param str ban: Please enter your Bank account number. (required)
        :param str ifsc: Please enter your IFSC Code. (required)
        :param str acct_type: Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
        :param str ban_type: Please enter your Bank account type. Allowable Values are Savings or Current. (required)
        :param str phone: Please enter your Valid Phone Number. (required)
        :param str otp: Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number. (required)
        :param file file: Enter a valid image, pdf or zip file under 5 MB in size. (required)
        :param str authorization: Enter a valid Api Key.
        :param str message: Please enter an optional message if needed.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userexchangekyc_with_http_info(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, **kwargs)
        else:
            (data) = self.v1userexchangekyc_with_http_info(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, **kwargs)
            return data

    def v1userexchangekyc_with_http_info(self, pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, **kwargs):
        """
        Submits a New Bank Link and initial KYC Documents.
        Submits a New Bank Link and initial KYC Documents.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangekyc_with_http_info(pan_number, acct_nick, name, ban, ifsc, acct_type, ban_type, phone, otp, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pan_number: Please enter your Pan Card Number (required)
        :param str acct_nick: Please enter an Account NickName (required)
        :param str name: Please enter your Name as it appears on your Bank account. (required)
        :param str ban: Please enter your Bank account number. (required)
        :param str ifsc: Please enter your IFSC Code. (required)
        :param str acct_type: Please enter your Coinsecure account type. Allowable Values are Personal or Company. (required)
        :param str ban_type: Please enter your Bank account type. Allowable Values are Savings or Current. (required)
        :param str phone: Please enter your Valid Phone Number. (required)
        :param str otp: Please enter your OTP from SMS. The code can be requested from /v1/user/bank/otp/:number. (required)
        :param file file: Enter a valid image, pdf or zip file under 5 MB in size. (required)
        :param str authorization: Enter a valid Api Key.
        :param str message: Please enter an optional message if needed.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pan_number', 'acct_nick', 'name', 'ban', 'ifsc', 'acct_type', 'ban_type', 'phone', 'otp', 'file', 'authorization', 'message', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangekyc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pan_number' is set
        if ('pan_number' not in params) or (params['pan_number'] is None):
            raise ValueError("Missing the required parameter `pan_number` when calling `v1userexchangekyc`")
        # verify the required parameter 'acct_nick' is set
        if ('acct_nick' not in params) or (params['acct_nick'] is None):
            raise ValueError("Missing the required parameter `acct_nick` when calling `v1userexchangekyc`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `v1userexchangekyc`")
        # verify the required parameter 'ban' is set
        if ('ban' not in params) or (params['ban'] is None):
            raise ValueError("Missing the required parameter `ban` when calling `v1userexchangekyc`")
        # verify the required parameter 'ifsc' is set
        if ('ifsc' not in params) or (params['ifsc'] is None):
            raise ValueError("Missing the required parameter `ifsc` when calling `v1userexchangekyc`")
        # verify the required parameter 'acct_type' is set
        if ('acct_type' not in params) or (params['acct_type'] is None):
            raise ValueError("Missing the required parameter `acct_type` when calling `v1userexchangekyc`")
        # verify the required parameter 'ban_type' is set
        if ('ban_type' not in params) or (params['ban_type'] is None):
            raise ValueError("Missing the required parameter `ban_type` when calling `v1userexchangekyc`")
        # verify the required parameter 'phone' is set
        if ('phone' not in params) or (params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `v1userexchangekyc`")
        # verify the required parameter 'otp' is set
        if ('otp' not in params) or (params['otp'] is None):
            raise ValueError("Missing the required parameter `otp` when calling `v1userexchangekyc`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `v1userexchangekyc`")

        resource_path = '/v1/user/exchange/kyc'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}
        if 'pan_number' in params:
            form_params.append(('panNumber', params['pan_number']))
        if 'acct_nick' in params:
            form_params.append(('acctNick', params['acct_nick']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'ban' in params:
            form_params.append(('ban', params['ban']))
        if 'ifsc' in params:
            form_params.append(('ifsc', params['ifsc']))
        if 'acct_type' in params:
            form_params.append(('acctType', params['acct_type']))
        if 'message' in params:
            form_params.append(('message', params['message']))
        if 'ban_type' in params:
            form_params.append(('banType', params['ban_type']))
        if 'phone' in params:
            form_params.append(('phone', params['phone']))
        if 'otp' in params:
            form_params.append(('otp', params['otp']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1usergcm_code(self, code, **kwargs):
        """
        Delete GCM Code
        Delete GCM Code and associated API Key.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usergcm_code(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1usergcm_code_with_http_info(code, **kwargs)
        else:
            (data) = self.v1usergcm_code_with_http_info(code, **kwargs)
            return data

    def v1usergcm_code_with_http_info(self, code, **kwargs):
        """
        Delete GCM Code
        Delete GCM Code and associated API Key.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usergcm_code_with_http_info(code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str code:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1usergcm_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v1usergcm_code`")

        resource_path = '/v1/user/gcm/{code}'.replace('{format}', 'json')
        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userkycotp_number(self, number, **kwargs):
        """
        Send OTP for KYC Link
        Send OTP for KYC Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userkycotp_number(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userkycotp_number_with_http_info(number, **kwargs)
        else:
            (data) = self.v1userkycotp_number_with_http_info(number, **kwargs)
            return data

    def v1userkycotp_number_with_http_info(self, number, **kwargs):
        """
        Send OTP for KYC Link
        Send OTP for KYC Link.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userkycotp_number_with_http_info(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userkycotp_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params) or (params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `v1userkycotp_number`")

        resource_path = '/v1/user/kyc/otp/{number}'.replace('{format}', 'json')
        path_params = {}
        if 'number' in params:
            path_params['number'] = params['number']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userlogout(self, **kwargs):
        """
        Logout User
        Logs out user and Deletes the api key and associated session data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userlogout(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userlogout_with_http_info(**kwargs)
        else:
            (data) = self.v1userlogout_with_http_info(**kwargs)
            return data

    def v1userlogout_with_http_info(self, **kwargs):
        """
        Logout User
        Logs out user and Deletes the api key and associated session data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userlogout_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userlogout" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/user/logout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1usernetkicreate(self, body, **kwargs):
        """
        Create Neki Wallet Name
        Creates a new Netki Wallet Name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usernetkicreate(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetkiNameAddress body: Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1usernetkicreate_with_http_info(body, **kwargs)
        else:
            (data) = self.v1usernetkicreate_with_http_info(body, **kwargs)
            return data

    def v1usernetkicreate_with_http_info(self, body, **kwargs):
        """
        Create Neki Wallet Name
        Creates a new Netki Wallet Name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usernetkicreate_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NetkiNameAddress body: Enter a valid Netki name and Bitcoin address from Wallet or Exchange. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1usernetkicreate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1usernetkicreate`")

        resource_path = '/v1/user/netki/create'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1usernetkiupdate(self, body, **kwargs):
        """
        Update Netki Address
        Updates the address on an existing wallet name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usernetkiupdate(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Address body: Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1usernetkiupdate_with_http_info(body, **kwargs)
        else:
            (data) = self.v1usernetkiupdate_with_http_info(body, **kwargs)
            return data

    def v1usernetkiupdate_with_http_info(self, body, **kwargs):
        """
        Update Netki Address
        Updates the address on an existing wallet name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1usernetkiupdate_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Address body: Enter a valid Bitcoin address from Wallet or Exchange to update the wallet name. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1usernetkiupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1usernetkiupdate`")

        resource_path = '/v1/user/netki/update'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userprofileimagedelete_netki_name(self, netki_name, **kwargs):
        """
        Delete Profile Image
        Deletes a profile Image.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofileimagedelete_netki_name(netki_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str netki_name:  (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userprofileimagedelete_netki_name_with_http_info(netki_name, **kwargs)
        else:
            (data) = self.v1userprofileimagedelete_netki_name_with_http_info(netki_name, **kwargs)
            return data

    def v1userprofileimagedelete_netki_name_with_http_info(self, netki_name, **kwargs):
        """
        Delete Profile Image
        Deletes a profile Image.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofileimagedelete_netki_name_with_http_info(netki_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str netki_name:  (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['netki_name', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userprofileimagedelete_netki_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'netki_name' is set
        if ('netki_name' not in params) or (params['netki_name'] is None):
            raise ValueError("Missing the required parameter `netki_name` when calling `v1userprofileimagedelete_netki_name`")

        resource_path = '/v1/user/profile/image/delete/{netkiName}'.replace('{format}', 'json')
        path_params = {}
        if 'netki_name' in params:
            path_params['netkiName'] = params['netki_name']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userprofileimageupdate(self, netki_name, is_public, file, **kwargs):
        """
        Update Profile Image
        Updates Profile Image and allows public or private options for netki profile page.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofileimageupdate(netki_name, is_public, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str netki_name: Please enter your Netki Wallet Name. (required)
        :param bool is_public: Please enter if this image can be public. (required)
        :param file file: Enter a valid image, pdf or zip file under 5 MB in size. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userprofileimageupdate_with_http_info(netki_name, is_public, file, **kwargs)
        else:
            (data) = self.v1userprofileimageupdate_with_http_info(netki_name, is_public, file, **kwargs)
            return data

    def v1userprofileimageupdate_with_http_info(self, netki_name, is_public, file, **kwargs):
        """
        Update Profile Image
        Updates Profile Image and allows public or private options for netki profile page.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofileimageupdate_with_http_info(netki_name, is_public, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str netki_name: Please enter your Netki Wallet Name. (required)
        :param bool is_public: Please enter if this image can be public. (required)
        :param file file: Enter a valid image, pdf or zip file under 5 MB in size. (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['netki_name', 'is_public', 'file', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userprofileimageupdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'netki_name' is set
        if ('netki_name' not in params) or (params['netki_name'] is None):
            raise ValueError("Missing the required parameter `netki_name` when calling `v1userprofileimageupdate`")
        # verify the required parameter 'is_public' is set
        if ('is_public' not in params) or (params['is_public'] is None):
            raise ValueError("Missing the required parameter `is_public` when calling `v1userprofileimageupdate`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `v1userprofileimageupdate`")

        resource_path = '/v1/user/profile/image/update'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}
        if 'netki_name' in params:
            form_params.append(('netkiName', params['netki_name']))
        if 'is_public' in params:
            form_params.append(('isPublic', params['is_public']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userprofilephone(self, body, **kwargs):
        """
        New Profile Phone
        Set a New Profile Phone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephone(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NumberOtp body: You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userprofilephone_with_http_info(body, **kwargs)
        else:
            (data) = self.v1userprofilephone_with_http_info(body, **kwargs)
            return data

    def v1userprofilephone_with_http_info(self, body, **kwargs):
        """
        New Profile Phone
        Set a New Profile Phone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephone_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NumberOtp body: You can get an otp to update your profile phone number from /v1/user/profile/phone/otp/:number (required)
        :param str authorization: Enter a valid Api Key.
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userprofilephone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1userprofilephone`")

        resource_path = '/v1/user/profile/phone/new'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userprofilephone_number(self, **kwargs):
        """
        Delete Profile Phone Number
        Delete Profile Phone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephone_number(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userprofilephone_number_with_http_info(**kwargs)
        else:
            (data) = self.v1userprofilephone_number_with_http_info(**kwargs)
            return data

    def v1userprofilephone_number_with_http_info(self, **kwargs):
        """
        Delete Profile Phone Number
        Delete Profile Phone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephone_number_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userprofilephone_number" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/user/profile/phone/delete'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def v1userprofilephoneotp_number(self, number, **kwargs):
        """
        Send OTP for Profile Phone
        Send OTP for Profile Phone addition or updation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephoneotp_number(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1userprofilephoneotp_number_with_http_info(number, **kwargs)
        else:
            (data) = self.v1userprofilephoneotp_number_with_http_info(number, **kwargs)
            return data

    def v1userprofilephoneotp_number_with_http_info(self, number, **kwargs):
        """
        Send OTP for Profile Phone
        Send OTP for Profile Phone addition or updation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userprofilephoneotp_number_with_http_info(number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str number:  (required)
        :param str authorization: API object to be added
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: SuccessResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number', 'authorization', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userprofilephoneotp_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params) or (params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `v1userprofilephoneotp_number`")

        resource_path = '/v1/user/profile/phone/otp/{number}'.replace('{format}', 'json')
        path_params = {}
        if 'number' in params:
            path_params['number'] = params['number']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
