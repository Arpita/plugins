# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: 1.0b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExchangeBankFiatDataApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def v1userexchangebankfiataccounts(self, authorization, **kwargs):
        """
        Exchange Bitcoin Deposit Addresses
        Gets a List of Users Exchange Bitcoin Addresses.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiataccounts(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatBankDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiataccounts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiataccounts`")


        resource_path = '/v1/user/exchange/bank/fiat/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatBankDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatbalanceavailable(self, authorization, **kwargs):
        """
        Available Exchange Fiat Balance
        Returns balance which is in Available for Trades. The response is in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatbalanceavailable(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: RateDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatbalanceavailable" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatbalanceavailable`")


        resource_path = '/v1/user/exchange/bank/fiat/balance/total'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RateDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatbalancepending(self, authorization, **kwargs):
        """
        In Trade Coin Balance
        Returns in-trade or pending fiat balance in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatbalancepending(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: RateDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatbalancepending" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatbalancepending`")


        resource_path = '/v1/user/exchange/bank/fiat/balance/pending'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RateDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatbalancetotal(self, authorization, **kwargs):
        """
        Total Exchange Fiat Balance
        Returns users total fiat balance in paisa. Pending + Available

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatbalancetotal(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: RateDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatbalancetotal" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatbalancetotal`")


        resource_path = '/v1/user/exchange/bank/fiat/balance/available'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RateDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatdepositcancelled(self, authorization, **kwargs):
        """
        Cancelled Exchange Fiat Deposits
        Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatdepositcancelled(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatDepDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatdepositcancelled" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatdepositcancelled`")


        resource_path = '/v1/user/exchange/bank/fiat/deposit/cancelled'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatDepDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatdepositunverified(self, authorization, **kwargs):
        """
        Unverified Exchange Fiat Deposits
        Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatdepositunverified(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatDepDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatdepositunverified" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatdepositunverified`")


        resource_path = '/v1/user/exchange/bank/fiat/deposit/unverified'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatDepDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatdepositverified(self, authorization, **kwargs):
        """
        Verified Exchange Fiat Deposits
        Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatdepositverified(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatDepDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatdepositverified" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatdepositverified`")


        resource_path = '/v1/user/exchange/bank/fiat/deposit/verified'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatDepDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatwithdrawcancelled(self, authorization, **kwargs):
        """
        Cancelled Exchange Fiat Withdrawals
        Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatwithdrawcancelled(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatWithDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatwithdrawcancelled" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatwithdrawcancelled`")


        resource_path = '/v1/user/exchange/bank/fiat/withdraw/cancelled'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatWithDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatwithdrawcompleted(self, authorization, **kwargs):
        """
        Completed Exchange Fiat Withdrawals
        Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatwithdrawcompleted(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatWithDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatwithdrawcompleted" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatwithdrawcompleted`")


        resource_path = '/v1/user/exchange/bank/fiat/withdraw/completed'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatWithDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatwithdrawunverified(self, authorization, **kwargs):
        """
        Unverified Exchange Fiat Withdrawals
        Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatwithdrawunverified(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatWithDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatwithdrawunverified" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatwithdrawunverified`")


        resource_path = '/v1/user/exchange/bank/fiat/withdraw/unverified'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatWithDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1userexchangebankfiatwithdrawverified(self, authorization, **kwargs):
        """
        Verified Exchange Fiat Withdrawals
        Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1userexchangebankfiatwithdrawverified(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: API object to be added (required)
        :param int _from: From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
        :param int to: To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
        :param int max: Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
        :param int offset: Offset defaults to 0 if input is invalid. (Optional)
        :param str accept: JSON, XML or CSV can be returned (Optional)
        :return: FiatWithDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', '_from', 'to', 'max', 'offset', 'accept']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1userexchangebankfiatwithdrawverified" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1userexchangebankfiatwithdrawverified`")


        resource_path = '/v1/user/exchange/bank/fiat/withdraw/verified'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'max' in params:
            query_params['max'] = params['max']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']
        if 'accept' in params:
            header_params['accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'application/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FiatWithDataResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
