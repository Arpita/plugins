# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: 1.0b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserSummaryData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserSummaryData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'kyc_status': 'str',
            'bank_link_status': 'str',
            'trade_ready': 'str',
            'is_disabled_account': 'bool',
            'fa_secure': 'str',
            'has_phone': 'str'
        }

        self.attribute_map = {
            'kyc_status': 'kycStatus',
            'bank_link_status': 'bankLinkStatus',
            'trade_ready': 'tradeReady',
            'is_disabled_account': 'isDisabledAccount',
            'fa_secure': 'faSecure',
            'has_phone': 'hasPhone'
        }

        self._kyc_status = None
        self._bank_link_status = None
        self._trade_ready = None
        self._is_disabled_account = False
        self._fa_secure = None
        self._has_phone = None

    @property
    def kyc_status(self):
        """
        Gets the kyc_status of this UserSummaryData.


        :return: The kyc_status of this UserSummaryData.
        :rtype: str
        """
        return self._kyc_status

    @kyc_status.setter
    def kyc_status(self, kyc_status):
        """
        Sets the kyc_status of this UserSummaryData.


        :param kyc_status: The kyc_status of this UserSummaryData.
        :type: str
        """
        
        self._kyc_status = kyc_status

    @property
    def bank_link_status(self):
        """
        Gets the bank_link_status of this UserSummaryData.


        :return: The bank_link_status of this UserSummaryData.
        :rtype: str
        """
        return self._bank_link_status

    @bank_link_status.setter
    def bank_link_status(self, bank_link_status):
        """
        Sets the bank_link_status of this UserSummaryData.


        :param bank_link_status: The bank_link_status of this UserSummaryData.
        :type: str
        """
        
        self._bank_link_status = bank_link_status

    @property
    def trade_ready(self):
        """
        Gets the trade_ready of this UserSummaryData.


        :return: The trade_ready of this UserSummaryData.
        :rtype: str
        """
        return self._trade_ready

    @trade_ready.setter
    def trade_ready(self, trade_ready):
        """
        Sets the trade_ready of this UserSummaryData.


        :param trade_ready: The trade_ready of this UserSummaryData.
        :type: str
        """
        
        self._trade_ready = trade_ready

    @property
    def is_disabled_account(self):
        """
        Gets the is_disabled_account of this UserSummaryData.


        :return: The is_disabled_account of this UserSummaryData.
        :rtype: bool
        """
        return self._is_disabled_account

    @is_disabled_account.setter
    def is_disabled_account(self, is_disabled_account):
        """
        Sets the is_disabled_account of this UserSummaryData.


        :param is_disabled_account: The is_disabled_account of this UserSummaryData.
        :type: bool
        """
        
        self._is_disabled_account = is_disabled_account

    @property
    def fa_secure(self):
        """
        Gets the fa_secure of this UserSummaryData.


        :return: The fa_secure of this UserSummaryData.
        :rtype: str
        """
        return self._fa_secure

    @fa_secure.setter
    def fa_secure(self, fa_secure):
        """
        Sets the fa_secure of this UserSummaryData.


        :param fa_secure: The fa_secure of this UserSummaryData.
        :type: str
        """
        
        self._fa_secure = fa_secure

    @property
    def has_phone(self):
        """
        Gets the has_phone of this UserSummaryData.


        :return: The has_phone of this UserSummaryData.
        :rtype: str
        """
        return self._has_phone

    @has_phone.setter
    def has_phone(self, has_phone):
        """
        Sets the has_phone of this UserSummaryData.


        :param has_phone: The has_phone of this UserSummaryData.
        :type: str
        """
        
        self._has_phone = has_phone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

