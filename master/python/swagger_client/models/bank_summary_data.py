# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BankSummaryData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, pending_coin_balance=None, pending_fiat_balance=None, available_coin_balance=None, available_fiat_balance=None, total_coin_balance=None, total_fiat_balance=None, coin_fee_percentage=None, fiat_fee_percentage=None, bank_link_status=None, has_trade_netki=False, trade_netki_name=None, trade_netki_address=None):
        """
        BankSummaryData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pending_coin_balance': 'int',
            'pending_fiat_balance': 'int',
            'available_coin_balance': 'int',
            'available_fiat_balance': 'int',
            'total_coin_balance': 'int',
            'total_fiat_balance': 'int',
            'coin_fee_percentage': 'float',
            'fiat_fee_percentage': 'float',
            'bank_link_status': 'str',
            'has_trade_netki': 'bool',
            'trade_netki_name': 'str',
            'trade_netki_address': 'str'
        }

        self.attribute_map = {
            'pending_coin_balance': 'pendingCoinBalance',
            'pending_fiat_balance': 'pendingFiatBalance',
            'available_coin_balance': 'availableCoinBalance',
            'available_fiat_balance': 'availableFiatBalance',
            'total_coin_balance': 'totalCoinBalance',
            'total_fiat_balance': 'totalFiatBalance',
            'coin_fee_percentage': 'coinFeePercentage',
            'fiat_fee_percentage': 'fiatFeePercentage',
            'bank_link_status': 'bankLinkStatus',
            'has_trade_netki': 'hasTradeNetki',
            'trade_netki_name': 'tradeNetkiName',
            'trade_netki_address': 'tradeNetkiAddress'
        }

        self._pending_coin_balance = pending_coin_balance
        self._pending_fiat_balance = pending_fiat_balance
        self._available_coin_balance = available_coin_balance
        self._available_fiat_balance = available_fiat_balance
        self._total_coin_balance = total_coin_balance
        self._total_fiat_balance = total_fiat_balance
        self._coin_fee_percentage = coin_fee_percentage
        self._fiat_fee_percentage = fiat_fee_percentage
        self._bank_link_status = bank_link_status
        self._has_trade_netki = has_trade_netki
        self._trade_netki_name = trade_netki_name
        self._trade_netki_address = trade_netki_address


    @property
    def pending_coin_balance(self):
        """
        Gets the pending_coin_balance of this BankSummaryData.


        :return: The pending_coin_balance of this BankSummaryData.
        :rtype: int
        """
        return self._pending_coin_balance

    @pending_coin_balance.setter
    def pending_coin_balance(self, pending_coin_balance):
        """
        Sets the pending_coin_balance of this BankSummaryData.


        :param pending_coin_balance: The pending_coin_balance of this BankSummaryData.
        :type: int
        """
        if pending_coin_balance is None:
            raise ValueError("Invalid value for `pending_coin_balance`, must not be `None`")

        self._pending_coin_balance = pending_coin_balance

    @property
    def pending_fiat_balance(self):
        """
        Gets the pending_fiat_balance of this BankSummaryData.


        :return: The pending_fiat_balance of this BankSummaryData.
        :rtype: int
        """
        return self._pending_fiat_balance

    @pending_fiat_balance.setter
    def pending_fiat_balance(self, pending_fiat_balance):
        """
        Sets the pending_fiat_balance of this BankSummaryData.


        :param pending_fiat_balance: The pending_fiat_balance of this BankSummaryData.
        :type: int
        """
        if pending_fiat_balance is None:
            raise ValueError("Invalid value for `pending_fiat_balance`, must not be `None`")

        self._pending_fiat_balance = pending_fiat_balance

    @property
    def available_coin_balance(self):
        """
        Gets the available_coin_balance of this BankSummaryData.


        :return: The available_coin_balance of this BankSummaryData.
        :rtype: int
        """
        return self._available_coin_balance

    @available_coin_balance.setter
    def available_coin_balance(self, available_coin_balance):
        """
        Sets the available_coin_balance of this BankSummaryData.


        :param available_coin_balance: The available_coin_balance of this BankSummaryData.
        :type: int
        """
        if available_coin_balance is None:
            raise ValueError("Invalid value for `available_coin_balance`, must not be `None`")

        self._available_coin_balance = available_coin_balance

    @property
    def available_fiat_balance(self):
        """
        Gets the available_fiat_balance of this BankSummaryData.


        :return: The available_fiat_balance of this BankSummaryData.
        :rtype: int
        """
        return self._available_fiat_balance

    @available_fiat_balance.setter
    def available_fiat_balance(self, available_fiat_balance):
        """
        Sets the available_fiat_balance of this BankSummaryData.


        :param available_fiat_balance: The available_fiat_balance of this BankSummaryData.
        :type: int
        """
        if available_fiat_balance is None:
            raise ValueError("Invalid value for `available_fiat_balance`, must not be `None`")

        self._available_fiat_balance = available_fiat_balance

    @property
    def total_coin_balance(self):
        """
        Gets the total_coin_balance of this BankSummaryData.


        :return: The total_coin_balance of this BankSummaryData.
        :rtype: int
        """
        return self._total_coin_balance

    @total_coin_balance.setter
    def total_coin_balance(self, total_coin_balance):
        """
        Sets the total_coin_balance of this BankSummaryData.


        :param total_coin_balance: The total_coin_balance of this BankSummaryData.
        :type: int
        """
        if total_coin_balance is None:
            raise ValueError("Invalid value for `total_coin_balance`, must not be `None`")

        self._total_coin_balance = total_coin_balance

    @property
    def total_fiat_balance(self):
        """
        Gets the total_fiat_balance of this BankSummaryData.


        :return: The total_fiat_balance of this BankSummaryData.
        :rtype: int
        """
        return self._total_fiat_balance

    @total_fiat_balance.setter
    def total_fiat_balance(self, total_fiat_balance):
        """
        Sets the total_fiat_balance of this BankSummaryData.


        :param total_fiat_balance: The total_fiat_balance of this BankSummaryData.
        :type: int
        """
        if total_fiat_balance is None:
            raise ValueError("Invalid value for `total_fiat_balance`, must not be `None`")

        self._total_fiat_balance = total_fiat_balance

    @property
    def coin_fee_percentage(self):
        """
        Gets the coin_fee_percentage of this BankSummaryData.


        :return: The coin_fee_percentage of this BankSummaryData.
        :rtype: float
        """
        return self._coin_fee_percentage

    @coin_fee_percentage.setter
    def coin_fee_percentage(self, coin_fee_percentage):
        """
        Sets the coin_fee_percentage of this BankSummaryData.


        :param coin_fee_percentage: The coin_fee_percentage of this BankSummaryData.
        :type: float
        """
        if coin_fee_percentage is None:
            raise ValueError("Invalid value for `coin_fee_percentage`, must not be `None`")

        self._coin_fee_percentage = coin_fee_percentage

    @property
    def fiat_fee_percentage(self):
        """
        Gets the fiat_fee_percentage of this BankSummaryData.


        :return: The fiat_fee_percentage of this BankSummaryData.
        :rtype: float
        """
        return self._fiat_fee_percentage

    @fiat_fee_percentage.setter
    def fiat_fee_percentage(self, fiat_fee_percentage):
        """
        Sets the fiat_fee_percentage of this BankSummaryData.


        :param fiat_fee_percentage: The fiat_fee_percentage of this BankSummaryData.
        :type: float
        """
        if fiat_fee_percentage is None:
            raise ValueError("Invalid value for `fiat_fee_percentage`, must not be `None`")

        self._fiat_fee_percentage = fiat_fee_percentage

    @property
    def bank_link_status(self):
        """
        Gets the bank_link_status of this BankSummaryData.


        :return: The bank_link_status of this BankSummaryData.
        :rtype: str
        """
        return self._bank_link_status

    @bank_link_status.setter
    def bank_link_status(self, bank_link_status):
        """
        Sets the bank_link_status of this BankSummaryData.


        :param bank_link_status: The bank_link_status of this BankSummaryData.
        :type: str
        """
        if bank_link_status is None:
            raise ValueError("Invalid value for `bank_link_status`, must not be `None`")

        self._bank_link_status = bank_link_status

    @property
    def has_trade_netki(self):
        """
        Gets the has_trade_netki of this BankSummaryData.


        :return: The has_trade_netki of this BankSummaryData.
        :rtype: bool
        """
        return self._has_trade_netki

    @has_trade_netki.setter
    def has_trade_netki(self, has_trade_netki):
        """
        Sets the has_trade_netki of this BankSummaryData.


        :param has_trade_netki: The has_trade_netki of this BankSummaryData.
        :type: bool
        """
        if has_trade_netki is None:
            raise ValueError("Invalid value for `has_trade_netki`, must not be `None`")

        self._has_trade_netki = has_trade_netki

    @property
    def trade_netki_name(self):
        """
        Gets the trade_netki_name of this BankSummaryData.


        :return: The trade_netki_name of this BankSummaryData.
        :rtype: str
        """
        return self._trade_netki_name

    @trade_netki_name.setter
    def trade_netki_name(self, trade_netki_name):
        """
        Sets the trade_netki_name of this BankSummaryData.


        :param trade_netki_name: The trade_netki_name of this BankSummaryData.
        :type: str
        """
        if trade_netki_name is None:
            raise ValueError("Invalid value for `trade_netki_name`, must not be `None`")

        self._trade_netki_name = trade_netki_name

    @property
    def trade_netki_address(self):
        """
        Gets the trade_netki_address of this BankSummaryData.


        :return: The trade_netki_address of this BankSummaryData.
        :rtype: str
        """
        return self._trade_netki_address

    @trade_netki_address.setter
    def trade_netki_address(self, trade_netki_address):
        """
        Sets the trade_netki_address of this BankSummaryData.


        :param trade_netki_address: The trade_netki_address of this BankSummaryData.
        :type: str
        """
        if trade_netki_address is None:
            raise ValueError("Invalid value for `trade_netki_address`, must not be `None`")

        self._trade_netki_address = trade_netki_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
