# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SuccessVerifySignupResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message=None, valid_till=None, login_message=None, login_token=None):
        """
        SuccessVerifySignupResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message': 'str',
            'valid_till': 'int',
            'login_message': 'str',
            'login_token': 'str'
        }

        self.attribute_map = {
            'message': 'message',
            'valid_till': 'validTill',
            'login_message': 'loginMessage',
            'login_token': 'loginToken'
        }

        self._message = message
        self._valid_till = valid_till
        self._login_message = login_message
        self._login_token = login_token


    @property
    def message(self):
        """
        Gets the message of this SuccessVerifySignupResponse.


        :return: The message of this SuccessVerifySignupResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this SuccessVerifySignupResponse.


        :param message: The message of this SuccessVerifySignupResponse.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def valid_till(self):
        """
        Gets the valid_till of this SuccessVerifySignupResponse.


        :return: The valid_till of this SuccessVerifySignupResponse.
        :rtype: int
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """
        Sets the valid_till of this SuccessVerifySignupResponse.


        :param valid_till: The valid_till of this SuccessVerifySignupResponse.
        :type: int
        """
        if valid_till is None:
            raise ValueError("Invalid value for `valid_till`, must not be `None`")

        self._valid_till = valid_till

    @property
    def login_message(self):
        """
        Gets the login_message of this SuccessVerifySignupResponse.


        :return: The login_message of this SuccessVerifySignupResponse.
        :rtype: str
        """
        return self._login_message

    @login_message.setter
    def login_message(self, login_message):
        """
        Sets the login_message of this SuccessVerifySignupResponse.


        :param login_message: The login_message of this SuccessVerifySignupResponse.
        :type: str
        """
        if login_message is None:
            raise ValueError("Invalid value for `login_message`, must not be `None`")

        self._login_message = login_message

    @property
    def login_token(self):
        """
        Gets the login_token of this SuccessVerifySignupResponse.


        :return: The login_token of this SuccessVerifySignupResponse.
        :rtype: str
        """
        return self._login_token

    @login_token.setter
    def login_token(self, login_token):
        """
        Sets the login_token of this SuccessVerifySignupResponse.


        :param login_token: The login_token of this SuccessVerifySignupResponse.
        :type: str
        """
        if login_token is None:
            raise ValueError("Invalid value for `login_token`, must not be `None`")

        self._login_token = login_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
