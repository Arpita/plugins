# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FiatBankData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time=None, status=None, update_time=None, update_message=None, bank_id=None, info=None, account_number=None, account_nick=None, account_type=None):
        """
        FiatBankData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time': 'int',
            'status': 'str',
            'update_time': 'int',
            'update_message': 'str',
            'bank_id': 'str',
            'info': 'str',
            'account_number': 'str',
            'account_nick': 'str',
            'account_type': 'str'
        }

        self.attribute_map = {
            'time': 'time',
            'status': 'status',
            'update_time': 'updateTime',
            'update_message': 'updateMessage',
            'bank_id': 'bankID',
            'info': 'info',
            'account_number': 'accountNumber',
            'account_nick': 'accountNick',
            'account_type': 'accountType'
        }

        self._time = time
        self._status = status
        self._update_time = update_time
        self._update_message = update_message
        self._bank_id = bank_id
        self._info = info
        self._account_number = account_number
        self._account_nick = account_nick
        self._account_type = account_type

    @property
    def time(self):
        """
        Gets the time of this FiatBankData.


        :return: The time of this FiatBankData.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this FiatBankData.


        :param time: The time of this FiatBankData.
        :type: int
        """

        self._time = time

    @property
    def status(self):
        """
        Gets the status of this FiatBankData.


        :return: The status of this FiatBankData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this FiatBankData.


        :param status: The status of this FiatBankData.
        :type: str
        """

        self._status = status

    @property
    def update_time(self):
        """
        Gets the update_time of this FiatBankData.


        :return: The update_time of this FiatBankData.
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this FiatBankData.


        :param update_time: The update_time of this FiatBankData.
        :type: int
        """

        self._update_time = update_time

    @property
    def update_message(self):
        """
        Gets the update_message of this FiatBankData.


        :return: The update_message of this FiatBankData.
        :rtype: str
        """
        return self._update_message

    @update_message.setter
    def update_message(self, update_message):
        """
        Sets the update_message of this FiatBankData.


        :param update_message: The update_message of this FiatBankData.
        :type: str
        """

        self._update_message = update_message

    @property
    def bank_id(self):
        """
        Gets the bank_id of this FiatBankData.


        :return: The bank_id of this FiatBankData.
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """
        Sets the bank_id of this FiatBankData.


        :param bank_id: The bank_id of this FiatBankData.
        :type: str
        """

        self._bank_id = bank_id

    @property
    def info(self):
        """
        Gets the info of this FiatBankData.


        :return: The info of this FiatBankData.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this FiatBankData.


        :param info: The info of this FiatBankData.
        :type: str
        """

        self._info = info

    @property
    def account_number(self):
        """
        Gets the account_number of this FiatBankData.


        :return: The account_number of this FiatBankData.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this FiatBankData.


        :param account_number: The account_number of this FiatBankData.
        :type: str
        """

        self._account_number = account_number

    @property
    def account_nick(self):
        """
        Gets the account_nick of this FiatBankData.


        :return: The account_nick of this FiatBankData.
        :rtype: str
        """
        return self._account_nick

    @account_nick.setter
    def account_nick(self, account_nick):
        """
        Sets the account_nick of this FiatBankData.


        :param account_nick: The account_nick of this FiatBankData.
        :type: str
        """

        self._account_nick = account_nick

    @property
    def account_type(self):
        """
        Gets the account_type of this FiatBankData.


        :return: The account_type of this FiatBankData.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this FiatBankData.


        :param account_type: The account_type of this FiatBankData.
        :type: str
        """

        self._account_type = account_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
