# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WithdrawFiat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fiat=None, account=None, msg=None, pin=None):
        """
        WithdrawFiat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fiat': 'int',
            'account': 'str',
            'msg': 'str',
            'pin': 'str'
        }

        self.attribute_map = {
            'fiat': 'fiat',
            'account': 'account',
            'msg': 'msg',
            'pin': 'pin'
        }

        self._fiat = fiat
        self._account = account
        self._msg = msg
        self._pin = pin


    @property
    def fiat(self):
        """
        Gets the fiat of this WithdrawFiat.


        :return: The fiat of this WithdrawFiat.
        :rtype: int
        """
        return self._fiat

    @fiat.setter
    def fiat(self, fiat):
        """
        Sets the fiat of this WithdrawFiat.


        :param fiat: The fiat of this WithdrawFiat.
        :type: int
        """
        if fiat is None:
            raise ValueError("Invalid value for `fiat`, must not be `None`")

        self._fiat = fiat

    @property
    def account(self):
        """
        Gets the account of this WithdrawFiat.


        :return: The account of this WithdrawFiat.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this WithdrawFiat.


        :param account: The account of this WithdrawFiat.
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def msg(self):
        """
        Gets the msg of this WithdrawFiat.


        :return: The msg of this WithdrawFiat.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """
        Sets the msg of this WithdrawFiat.


        :param msg: The msg of this WithdrawFiat.
        :type: str
        """

        self._msg = msg

    @property
    def pin(self):
        """
        Gets the pin of this WithdrawFiat.


        :return: The pin of this WithdrawFiat.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """
        Sets the pin of this WithdrawFiat.


        :param pin: The pin of this WithdrawFiat.
        :type: str
        """

        self._pin = pin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
