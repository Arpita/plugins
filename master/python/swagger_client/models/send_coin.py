# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SendCoin(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, satoshis=None, to_addr=None, msg=None, pin=None, fees=None):
        """
        SendCoin - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'satoshis': 'int',
            'to_addr': 'str',
            'msg': 'str',
            'pin': 'str',
            'fees': 'object'
        }

        self.attribute_map = {
            'satoshis': 'satoshis',
            'to_addr': 'toAddr',
            'msg': 'msg',
            'pin': 'pin',
            'fees': 'fees'
        }

        self._satoshis = satoshis
        self._to_addr = to_addr
        self._msg = msg
        self._pin = pin
        self._fees = fees


    @property
    def satoshis(self):
        """
        Gets the satoshis of this SendCoin.


        :return: The satoshis of this SendCoin.
        :rtype: int
        """
        return self._satoshis

    @satoshis.setter
    def satoshis(self, satoshis):
        """
        Sets the satoshis of this SendCoin.


        :param satoshis: The satoshis of this SendCoin.
        :type: int
        """
        if satoshis is None:
            raise ValueError("Invalid value for `satoshis`, must not be `None`")

        self._satoshis = satoshis

    @property
    def to_addr(self):
        """
        Gets the to_addr of this SendCoin.


        :return: The to_addr of this SendCoin.
        :rtype: str
        """
        return self._to_addr

    @to_addr.setter
    def to_addr(self, to_addr):
        """
        Sets the to_addr of this SendCoin.


        :param to_addr: The to_addr of this SendCoin.
        :type: str
        """
        if to_addr is None:
            raise ValueError("Invalid value for `to_addr`, must not be `None`")

        self._to_addr = to_addr

    @property
    def msg(self):
        """
        Gets the msg of this SendCoin.


        :return: The msg of this SendCoin.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """
        Sets the msg of this SendCoin.


        :param msg: The msg of this SendCoin.
        :type: str
        """

        self._msg = msg

    @property
    def pin(self):
        """
        Gets the pin of this SendCoin.


        :return: The pin of this SendCoin.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """
        Sets the pin of this SendCoin.


        :param pin: The pin of this SendCoin.
        :type: str
        """

        self._pin = pin

    @property
    def fees(self):
        """
        Gets the fees of this SendCoin.


        :return: The fees of this SendCoin.
        :rtype: object
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """
        Sets the fees of this SendCoin.


        :param fees: The fees of this SendCoin.
        :type: object
        """

        self._fees = fees

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
