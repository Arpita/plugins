# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SuccessLoginResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, success=False, email=None, message=None, key_type=None, key_needed=None):
        """
        SuccessLoginResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'success': 'bool',
            'email': 'str',
            'message': 'str',
            'key_type': 'str',
            'key_needed': 'str'
        }

        self.attribute_map = {
            'success': 'success',
            'email': 'email',
            'message': 'message',
            'key_type': 'keyType',
            'key_needed': 'keyNeeded'
        }

        self._success = success
        self._email = email
        self._message = message
        self._key_type = key_type
        self._key_needed = key_needed

    @property
    def success(self):
        """
        Gets the success of this SuccessLoginResponse.


        :return: The success of this SuccessLoginResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this SuccessLoginResponse.


        :param success: The success of this SuccessLoginResponse.
        :type: bool
        """

        self._success = success

    @property
    def email(self):
        """
        Gets the email of this SuccessLoginResponse.


        :return: The email of this SuccessLoginResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SuccessLoginResponse.


        :param email: The email of this SuccessLoginResponse.
        :type: str
        """

        self._email = email

    @property
    def message(self):
        """
        Gets the message of this SuccessLoginResponse.


        :return: The message of this SuccessLoginResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this SuccessLoginResponse.


        :param message: The message of this SuccessLoginResponse.
        :type: str
        """

        self._message = message

    @property
    def key_type(self):
        """
        Gets the key_type of this SuccessLoginResponse.


        :return: The key_type of this SuccessLoginResponse.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this SuccessLoginResponse.


        :param key_type: The key_type of this SuccessLoginResponse.
        :type: str
        """

        self._key_type = key_type

    @property
    def key_needed(self):
        """
        Gets the key_needed of this SuccessLoginResponse.


        :return: The key_needed of this SuccessLoginResponse.
        :rtype: str
        """
        return self._key_needed

    @key_needed.setter
    def key_needed(self, key_needed):
        """
        Sets the key_needed of this SuccessLoginResponse.


        :param key_needed: The key_needed of this SuccessLoginResponse.
        :type: str
        """

        self._key_needed = key_needed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
