# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TradeSummaryData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, completed_asks_sum=None, completed_bids_sum=None, completed_asks_count=None, completed_bids_count=None, pending_asks_count=None, pending_bids_count=None):
        """
        TradeSummaryData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'completed_asks_sum': 'int',
            'completed_bids_sum': 'int',
            'completed_asks_count': 'int',
            'completed_bids_count': 'int',
            'pending_asks_count': 'int',
            'pending_bids_count': 'int'
        }

        self.attribute_map = {
            'completed_asks_sum': 'completedAsksSum',
            'completed_bids_sum': 'completedBidsSum',
            'completed_asks_count': 'completedAsksCount',
            'completed_bids_count': 'completedBidsCount',
            'pending_asks_count': 'pendingAsksCount',
            'pending_bids_count': 'pendingBidsCount'
        }

        self._completed_asks_sum = completed_asks_sum
        self._completed_bids_sum = completed_bids_sum
        self._completed_asks_count = completed_asks_count
        self._completed_bids_count = completed_bids_count
        self._pending_asks_count = pending_asks_count
        self._pending_bids_count = pending_bids_count

    @property
    def completed_asks_sum(self):
        """
        Gets the completed_asks_sum of this TradeSummaryData.


        :return: The completed_asks_sum of this TradeSummaryData.
        :rtype: int
        """
        return self._completed_asks_sum

    @completed_asks_sum.setter
    def completed_asks_sum(self, completed_asks_sum):
        """
        Sets the completed_asks_sum of this TradeSummaryData.


        :param completed_asks_sum: The completed_asks_sum of this TradeSummaryData.
        :type: int
        """

        self._completed_asks_sum = completed_asks_sum

    @property
    def completed_bids_sum(self):
        """
        Gets the completed_bids_sum of this TradeSummaryData.


        :return: The completed_bids_sum of this TradeSummaryData.
        :rtype: int
        """
        return self._completed_bids_sum

    @completed_bids_sum.setter
    def completed_bids_sum(self, completed_bids_sum):
        """
        Sets the completed_bids_sum of this TradeSummaryData.


        :param completed_bids_sum: The completed_bids_sum of this TradeSummaryData.
        :type: int
        """

        self._completed_bids_sum = completed_bids_sum

    @property
    def completed_asks_count(self):
        """
        Gets the completed_asks_count of this TradeSummaryData.


        :return: The completed_asks_count of this TradeSummaryData.
        :rtype: int
        """
        return self._completed_asks_count

    @completed_asks_count.setter
    def completed_asks_count(self, completed_asks_count):
        """
        Sets the completed_asks_count of this TradeSummaryData.


        :param completed_asks_count: The completed_asks_count of this TradeSummaryData.
        :type: int
        """

        self._completed_asks_count = completed_asks_count

    @property
    def completed_bids_count(self):
        """
        Gets the completed_bids_count of this TradeSummaryData.


        :return: The completed_bids_count of this TradeSummaryData.
        :rtype: int
        """
        return self._completed_bids_count

    @completed_bids_count.setter
    def completed_bids_count(self, completed_bids_count):
        """
        Sets the completed_bids_count of this TradeSummaryData.


        :param completed_bids_count: The completed_bids_count of this TradeSummaryData.
        :type: int
        """

        self._completed_bids_count = completed_bids_count

    @property
    def pending_asks_count(self):
        """
        Gets the pending_asks_count of this TradeSummaryData.


        :return: The pending_asks_count of this TradeSummaryData.
        :rtype: int
        """
        return self._pending_asks_count

    @pending_asks_count.setter
    def pending_asks_count(self, pending_asks_count):
        """
        Sets the pending_asks_count of this TradeSummaryData.


        :param pending_asks_count: The pending_asks_count of this TradeSummaryData.
        :type: int
        """

        self._pending_asks_count = pending_asks_count

    @property
    def pending_bids_count(self):
        """
        Gets the pending_bids_count of this TradeSummaryData.


        :return: The pending_bids_count of this TradeSummaryData.
        :rtype: int
        """
        return self._pending_bids_count

    @pending_bids_count.setter
    def pending_bids_count(self, pending_bids_count):
        """
        Sets the pending_bids_count of this TradeSummaryData.


        :param pending_bids_count: The pending_bids_count of this TradeSummaryData.
        :type: int
        """

        self._pending_bids_count = pending_bids_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
