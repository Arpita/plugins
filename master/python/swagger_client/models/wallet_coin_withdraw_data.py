# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WalletCoinWithdrawData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time_details=None, tx_id=None, message=None, satoshis=None, wallet_id=None, withdraw_id=None, sent_to=None):
        """
        WalletCoinWithdrawData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time_details': 'TimeData',
            'tx_id': 'str',
            'message': 'str',
            'satoshis': 'int',
            'wallet_id': 'str',
            'withdraw_id': 'str',
            'sent_to': 'str'
        }

        self.attribute_map = {
            'time_details': 'timeDetails',
            'tx_id': 'txID',
            'message': 'message',
            'satoshis': 'satoshis',
            'wallet_id': 'walletID',
            'withdraw_id': 'withdrawID',
            'sent_to': 'sentTo'
        }

        self._time_details = time_details
        self._tx_id = tx_id
        self._message = message
        self._satoshis = satoshis
        self._wallet_id = wallet_id
        self._withdraw_id = withdraw_id
        self._sent_to = sent_to


    @property
    def time_details(self):
        """
        Gets the time_details of this WalletCoinWithdrawData.


        :return: The time_details of this WalletCoinWithdrawData.
        :rtype: TimeData
        """
        return self._time_details

    @time_details.setter
    def time_details(self, time_details):
        """
        Sets the time_details of this WalletCoinWithdrawData.


        :param time_details: The time_details of this WalletCoinWithdrawData.
        :type: TimeData
        """
        if time_details is None:
            raise ValueError("Invalid value for `time_details`, must not be `None`")

        self._time_details = time_details

    @property
    def tx_id(self):
        """
        Gets the tx_id of this WalletCoinWithdrawData.


        :return: The tx_id of this WalletCoinWithdrawData.
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """
        Sets the tx_id of this WalletCoinWithdrawData.


        :param tx_id: The tx_id of this WalletCoinWithdrawData.
        :type: str
        """
        if tx_id is None:
            raise ValueError("Invalid value for `tx_id`, must not be `None`")

        self._tx_id = tx_id

    @property
    def message(self):
        """
        Gets the message of this WalletCoinWithdrawData.


        :return: The message of this WalletCoinWithdrawData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this WalletCoinWithdrawData.


        :param message: The message of this WalletCoinWithdrawData.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def satoshis(self):
        """
        Gets the satoshis of this WalletCoinWithdrawData.


        :return: The satoshis of this WalletCoinWithdrawData.
        :rtype: int
        """
        return self._satoshis

    @satoshis.setter
    def satoshis(self, satoshis):
        """
        Sets the satoshis of this WalletCoinWithdrawData.


        :param satoshis: The satoshis of this WalletCoinWithdrawData.
        :type: int
        """
        if satoshis is None:
            raise ValueError("Invalid value for `satoshis`, must not be `None`")

        self._satoshis = satoshis

    @property
    def wallet_id(self):
        """
        Gets the wallet_id of this WalletCoinWithdrawData.


        :return: The wallet_id of this WalletCoinWithdrawData.
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """
        Sets the wallet_id of this WalletCoinWithdrawData.


        :param wallet_id: The wallet_id of this WalletCoinWithdrawData.
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")

        self._wallet_id = wallet_id

    @property
    def withdraw_id(self):
        """
        Gets the withdraw_id of this WalletCoinWithdrawData.


        :return: The withdraw_id of this WalletCoinWithdrawData.
        :rtype: str
        """
        return self._withdraw_id

    @withdraw_id.setter
    def withdraw_id(self, withdraw_id):
        """
        Sets the withdraw_id of this WalletCoinWithdrawData.


        :param withdraw_id: The withdraw_id of this WalletCoinWithdrawData.
        :type: str
        """
        if withdraw_id is None:
            raise ValueError("Invalid value for `withdraw_id`, must not be `None`")

        self._withdraw_id = withdraw_id

    @property
    def sent_to(self):
        """
        Gets the sent_to of this WalletCoinWithdrawData.


        :return: The sent_to of this WalletCoinWithdrawData.
        :rtype: str
        """
        return self._sent_to

    @sent_to.setter
    def sent_to(self, sent_to):
        """
        Sets the sent_to of this WalletCoinWithdrawData.


        :param sent_to: The sent_to of this WalletCoinWithdrawData.
        :type: str
        """
        if sent_to is None:
            raise ValueError("Invalid value for `sent_to`, must not be `None`")

        self._sent_to = sent_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
