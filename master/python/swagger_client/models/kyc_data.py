# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class KYCData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time_details=None, kyc_id=None, first_name=None, last_name=None, status=None, user_type=None, info=None):
        """
        KYCData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time_details': 'TimeKYCData',
            'kyc_id': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'status': 'str',
            'user_type': 'str',
            'info': 'str'
        }

        self.attribute_map = {
            'time_details': 'timeDetails',
            'kyc_id': 'kycID',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'status': 'status',
            'user_type': 'userType',
            'info': 'info'
        }

        self._time_details = time_details
        self._kyc_id = kyc_id
        self._first_name = first_name
        self._last_name = last_name
        self._status = status
        self._user_type = user_type
        self._info = info


    @property
    def time_details(self):
        """
        Gets the time_details of this KYCData.


        :return: The time_details of this KYCData.
        :rtype: TimeKYCData
        """
        return self._time_details

    @time_details.setter
    def time_details(self, time_details):
        """
        Sets the time_details of this KYCData.


        :param time_details: The time_details of this KYCData.
        :type: TimeKYCData
        """
        if time_details is None:
            raise ValueError("Invalid value for `time_details`, must not be `None`")

        self._time_details = time_details

    @property
    def kyc_id(self):
        """
        Gets the kyc_id of this KYCData.


        :return: The kyc_id of this KYCData.
        :rtype: str
        """
        return self._kyc_id

    @kyc_id.setter
    def kyc_id(self, kyc_id):
        """
        Sets the kyc_id of this KYCData.


        :param kyc_id: The kyc_id of this KYCData.
        :type: str
        """
        if kyc_id is None:
            raise ValueError("Invalid value for `kyc_id`, must not be `None`")

        self._kyc_id = kyc_id

    @property
    def first_name(self):
        """
        Gets the first_name of this KYCData.


        :return: The first_name of this KYCData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this KYCData.


        :param first_name: The first_name of this KYCData.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this KYCData.


        :return: The last_name of this KYCData.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this KYCData.


        :param last_name: The last_name of this KYCData.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def status(self):
        """
        Gets the status of this KYCData.


        :return: The status of this KYCData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this KYCData.


        :param status: The status of this KYCData.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def user_type(self):
        """
        Gets the user_type of this KYCData.


        :return: The user_type of this KYCData.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this KYCData.


        :param user_type: The user_type of this KYCData.
        :type: str
        """
        if user_type is None:
            raise ValueError("Invalid value for `user_type`, must not be `None`")

        self._user_type = user_type

    @property
    def info(self):
        """
        Gets the info of this KYCData.


        :return: The info of this KYCData.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this KYCData.


        :param info: The info of this KYCData.
        :type: str
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
