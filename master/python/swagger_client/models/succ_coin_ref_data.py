# coding: utf-8

"""
    Coinsecure Api Documentation

    To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SuccCoinRefData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ref_percent=None, time=None, order_id=None, ref_id=None, trade_id=None, new_user_id_masked=None, deposit_id=None, amt_paid=None):
        """
        SuccCoinRefData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ref_percent': 'float',
            'time': 'int',
            'order_id': 'str',
            'ref_id': 'str',
            'trade_id': 'str',
            'new_user_id_masked': 'str',
            'deposit_id': 'str',
            'amt_paid': 'int'
        }

        self.attribute_map = {
            'ref_percent': 'refPercent',
            'time': 'time',
            'order_id': 'orderID',
            'ref_id': 'refID',
            'trade_id': 'tradeID',
            'new_user_id_masked': 'newUserIDMasked',
            'deposit_id': 'depositID',
            'amt_paid': 'amtPaid'
        }

        self._ref_percent = ref_percent
        self._time = time
        self._order_id = order_id
        self._ref_id = ref_id
        self._trade_id = trade_id
        self._new_user_id_masked = new_user_id_masked
        self._deposit_id = deposit_id
        self._amt_paid = amt_paid


    @property
    def ref_percent(self):
        """
        Gets the ref_percent of this SuccCoinRefData.


        :return: The ref_percent of this SuccCoinRefData.
        :rtype: float
        """
        return self._ref_percent

    @ref_percent.setter
    def ref_percent(self, ref_percent):
        """
        Sets the ref_percent of this SuccCoinRefData.


        :param ref_percent: The ref_percent of this SuccCoinRefData.
        :type: float
        """
        if ref_percent is None:
            raise ValueError("Invalid value for `ref_percent`, must not be `None`")

        self._ref_percent = ref_percent

    @property
    def time(self):
        """
        Gets the time of this SuccCoinRefData.


        :return: The time of this SuccCoinRefData.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this SuccCoinRefData.


        :param time: The time of this SuccCoinRefData.
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def order_id(self):
        """
        Gets the order_id of this SuccCoinRefData.


        :return: The order_id of this SuccCoinRefData.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this SuccCoinRefData.


        :param order_id: The order_id of this SuccCoinRefData.
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def ref_id(self):
        """
        Gets the ref_id of this SuccCoinRefData.


        :return: The ref_id of this SuccCoinRefData.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """
        Sets the ref_id of this SuccCoinRefData.


        :param ref_id: The ref_id of this SuccCoinRefData.
        :type: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def trade_id(self):
        """
        Gets the trade_id of this SuccCoinRefData.


        :return: The trade_id of this SuccCoinRefData.
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """
        Sets the trade_id of this SuccCoinRefData.


        :param trade_id: The trade_id of this SuccCoinRefData.
        :type: str
        """
        if trade_id is None:
            raise ValueError("Invalid value for `trade_id`, must not be `None`")

        self._trade_id = trade_id

    @property
    def new_user_id_masked(self):
        """
        Gets the new_user_id_masked of this SuccCoinRefData.


        :return: The new_user_id_masked of this SuccCoinRefData.
        :rtype: str
        """
        return self._new_user_id_masked

    @new_user_id_masked.setter
    def new_user_id_masked(self, new_user_id_masked):
        """
        Sets the new_user_id_masked of this SuccCoinRefData.


        :param new_user_id_masked: The new_user_id_masked of this SuccCoinRefData.
        :type: str
        """
        if new_user_id_masked is None:
            raise ValueError("Invalid value for `new_user_id_masked`, must not be `None`")

        self._new_user_id_masked = new_user_id_masked

    @property
    def deposit_id(self):
        """
        Gets the deposit_id of this SuccCoinRefData.


        :return: The deposit_id of this SuccCoinRefData.
        :rtype: str
        """
        return self._deposit_id

    @deposit_id.setter
    def deposit_id(self, deposit_id):
        """
        Sets the deposit_id of this SuccCoinRefData.


        :param deposit_id: The deposit_id of this SuccCoinRefData.
        :type: str
        """
        if deposit_id is None:
            raise ValueError("Invalid value for `deposit_id`, must not be `None`")

        self._deposit_id = deposit_id

    @property
    def amt_paid(self):
        """
        Gets the amt_paid of this SuccCoinRefData.


        :return: The amt_paid of this SuccCoinRefData.
        :rtype: int
        """
        return self._amt_paid

    @amt_paid.setter
    def amt_paid(self, amt_paid):
        """
        Sets the amt_paid of this SuccCoinRefData.


        :param amt_paid: The amt_paid of this SuccCoinRefData.
        :type: int
        """
        if amt_paid is None:
            raise ValueError("Invalid value for `amt_paid`, must not be `None`")

        self._amt_paid = amt_paid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
