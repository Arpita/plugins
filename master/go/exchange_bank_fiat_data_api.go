/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: 1.0b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type ExchangeBankFiatDataApi struct {
	Configuration Configuration
}

func NewExchangeBankFiatDataApi() *ExchangeBankFiatDataApi {
	configuration := NewConfiguration()
	return &ExchangeBankFiatDataApi{
		Configuration: *configuration,
	}
}

func NewExchangeBankFiatDataApiWithBasePath(basePath string) *ExchangeBankFiatDataApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &ExchangeBankFiatDataApi{
		Configuration: *configuration,
	}
}

/**
 * Exchange Bitcoin Deposit Addresses
 * Gets a List of Users Exchange Bitcoin Addresses.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatBankDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatAccounts(authorization string, accept string) (*FiatBankDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/accounts"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatBankDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatAccounts")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatBankDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Available Exchange Fiat Balance
 * Returns balance which is in Available for Trades. The response is in paisa.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *RateDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatBalanceAvailable(authorization string, accept string) (*RateDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/balance/total"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(RateDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatBalanceAvailable")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(RateDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * In Trade Coin Balance
 * Returns in-trade or pending fiat balance in paisa.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *RateDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatBalancePending(authorization string, accept string) (*RateDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/balance/pending"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(RateDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatBalancePending")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(RateDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Total Exchange Fiat Balance
 * Returns users total fiat balance in paisa. Pending + Available
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *RateDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatBalanceTotal(authorization string, accept string) (*RateDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/balance/available"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(RateDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatBalanceTotal")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(RateDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Cancelled Exchange Fiat Deposits
 * Gets a List of Cancelled Exchange Fiat Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatDepDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatDepositCancelled(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatDepDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/deposit/cancelled"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatDepDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatDepositCancelled")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatDepDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Unverified Exchange Fiat Deposits
 * Gets a List of Unverified Exchange Fiat Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatDepDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatDepositUnverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatDepDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/deposit/unverified"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatDepDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatDepositUnverified")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatDepDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Verified Exchange Fiat Deposits
 * Gets a List of Verified Exchange Fiat Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatDepDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatDepositVerified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatDepDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/deposit/verified"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatDepDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatDepositVerified")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatDepDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Cancelled Exchange Fiat Withdrawals
 * Gets a List of Cancelled Exchange Fiat Withdrawals. The fiat value is in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatWithDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatWithdrawCancelled(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatWithDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/withdraw/cancelled"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatWithDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatWithdrawCancelled")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatWithDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Completed Exchange Fiat Withdrawals
 * Gets a List of Completed Exchange Fiat Withdrawals. The fiat value is in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatWithDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatWithdrawCompleted(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatWithDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/withdraw/completed"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatWithDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatWithdrawCompleted")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatWithDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Unverified Exchange Fiat Withdrawals
 * Gets a List of Unverified Exchange Fiat Withdrawals. The fiat value is in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatWithDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatWithdrawUnverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatWithDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/withdraw/unverified"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatWithDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatWithdrawUnverified")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatWithDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Verified Exchange Fiat Withdrawals
 * Gets a List of Verified Exchange Fiat Withdrawals. The fiat value is in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *FiatWithDataResponse
 */
func (a ExchangeBankFiatDataApi) V1UserExchangeBankFiatWithdrawVerified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*FiatWithDataResponse, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/v1/user/exchange/bank/fiat/withdraw/verified"

	// verify the required parameter 'authorization' is set
	if &authorization == nil {
		return new(FiatWithDataResponse), nil, errors.New("Missing required parameter 'authorization' when calling ExchangeBankFiatDataApi->V1UserExchangeBankFiatWithdrawVerified")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
			queryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
			queryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"application/csv",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Authorization"
	headerParams["Authorization"] = authorization
	// header params "accept"
	headerParams["accept"] = accept

	var successPayload = new(FiatWithDataResponse)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

