/* 
 * Coinsecure Api Documentation
 *
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
)

type ExchangeBankCoinDataApi struct {
	Configuration *Configuration
}

func NewExchangeBankCoinDataApi() *ExchangeBankCoinDataApi {
	configuration := NewConfiguration()
	return &ExchangeBankCoinDataApi{
		Configuration: configuration,
	}
}

func NewExchangeBankCoinDataApiWithBasePath(basePath string) *ExchangeBankCoinDataApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &ExchangeBankCoinDataApi{
		Configuration: configuration,
	}
}

/**
 * Exchange Coin Addresses
 * Gets a List of Users Exchange Bitcoin Deposit Addresses.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *TradeAddressDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinaddresses(authorization string, accept string) (*TradeAddressDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(TradeAddressDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinaddresses", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Available Exchange Coin Balance
 * Returns balance which is in Available for Trades. The response is in satoshis.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *VolDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinbalanceavailable(authorization string, accept string) (*VolDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/balance/total"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(VolDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinbalanceavailable", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * In Trade Coin Balance
 * Returns in-trade or pending coin balance in satoshi.
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *VolDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinbalancepending(authorization string, accept string) (*VolDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/balance/pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(VolDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinbalancepending", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Total Exchange Coin Balance
 * Returns users total coin balance in satoshis. Pending + Available
 *
 * @param authorization API object to be added
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *VolDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinbalancetotal(authorization string, accept string) (*VolDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/balance/available"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(VolDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinbalancetotal", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Cancelled Exchange Coin Deposits
 * Gets a List of Cancelled Exchange Coin Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *CoinDepDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoindepositcancelled(authorization string, from int64, to int64, max int32, offset int64, accept string) (*CoinDepDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/deposit/cancelled"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(CoinDepDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoindepositcancelled", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Unverified Exchange Coin Deposits
 * Gets a List of Unverified Exchange Coin Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *CoinDepDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoindepositunverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*CoinDepDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/deposit/unverified"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(CoinDepDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoindepositunverified", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Verified Exchange Coin Deposits
 * Gets a List of Verified Exchange Coin Deposits. The value and fees are in paisa.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *CoinDepDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoindepositverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*CoinDepDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/deposit/verified"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(CoinDepDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoindepositverified", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Cancelled Exchange Coin Withdrawals
 * Gets a List of Cancelled Coin Withdrawals. The value and fees are in satoshis.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *TradeCoinWithdrawDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinwithdrawcancelled(authorization string, from int64, to int64, max int32, offset int64, accept string) (*TradeCoinWithdrawDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/withdraw/cancelled"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(TradeCoinWithdrawDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinwithdrawcancelled", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Completed Exchange Coin Withdrawals
 * Gets a List of Completed Coin Withdrawals. The value and fees are in satoshis.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *TradeCoinWithdrawDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinwithdrawcompleted(authorization string, from int64, to int64, max int32, offset int64, accept string) (*TradeCoinWithdrawDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/withdraw/completed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(TradeCoinWithdrawDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinwithdrawcompleted", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Unverified Exchange Coin Withdrawals
 * Gets a List of Unverified Exchange Coin Withdrawals. The value and fees are in satoshis.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *TradeCoinWithdrawDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinwithdrawunverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*TradeCoinWithdrawDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/withdraw/unverified"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(TradeCoinWithdrawDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinwithdrawunverified", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Verified Exchange Coin Withdrawals
 * Gets a List of Verified Exchange Coin Withdrawals. The value and fees are in satoshis.
 *
 * @param authorization API object to be added
 * @param from From date in Epoch, defaults to 0 if invalid input or greater than current time. (Optional)
 * @param to To Date in Epoch, defaults to current time if invalid input or greater than current time. (Optional)
 * @param max Max defaults to 10 if invalid input and defaults to 100 if greater than 100. (Optional)
 * @param offset Offset defaults to 0 if input is invalid. (Optional)
 * @param accept JSON, XML or CSV can be returned (Optional)
 * @return *TradeCoinWithdrawDataResponse
 */
func (a ExchangeBankCoinDataApi) V1userexchangebankcoinwithdrawverified(authorization string, from int64, to int64, max int32, offset int64, accept string) (*TradeCoinWithdrawDataResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/user/exchange/bank/coin/withdraw/verified"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
		localVarQueryParams.Add("to", a.Configuration.APIClient.ParameterToString(to, ""))
		localVarQueryParams.Add("max", a.Configuration.APIClient.ParameterToString(max, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		"application/xml",
		"application/csv",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "Authorization"
	localVarHeaderParams["Authorization"] = a.Configuration.APIClient.ParameterToString(authorization, "")
	// header params "accept"
	localVarHeaderParams["accept"] = a.Configuration.APIClient.ParameterToString(accept, "")
	var successPayload = new(TradeCoinWithdrawDataResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1userexchangebankcoinwithdrawverified", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

